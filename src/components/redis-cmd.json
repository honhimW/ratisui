[{"syntax":"ACL","command":"ACL","summary":"A container for Access List Control commands.","since":"6.0.0","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"ACL CAT [category]","command":"ACL CAT","summary":"Lists the ACL categories, or the commands inside a category.","since":"6.0.0","complexity":"O(1) since the categories and commands are a fixed set.","group":"server","acl":"@slow","arguments":[{"type":"single","name":"category"}]},{"syntax":"ACL DELUSER username [username ...]","command":"ACL DELUSER","summary":"Deletes ACL users, and terminates their connections.","since":"6.0.0","complexity":"O(1) amortized time considering the typical user.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"username"}]},{"syntax":"ACL DRYRUN username command [arg [arg ...]]","command":"ACL DRYRUN","summary":"Simulates the execution of a command by a user, without executing the command.","since":"7.0.0","complexity":"O(1).","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"username"},{"type":"single","name":"command"},{"type":"many","name":"arg"}]},{"syntax":"ACL GENPASS [bits]","command":"ACL GENPASS","summary":"Generates a pseudorandom, secure password that can be used to identify ACL users.","since":"6.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[{"type":"single","name":"bits"}]},{"syntax":"ACL GETUSER username","command":"ACL GETUSER","summary":"Lists the ACL rules of a user.","since":"6.0.0","complexity":"O(N). Where N is the number of password, command and pattern rules that the user has.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"username"}]},{"syntax":"ACL HELP","command":"ACL HELP","summary":"Returns helpful text about the different subcommands.","since":"6.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"ACL LIST","command":"ACL LIST","summary":"Dumps the effective rules in ACL file format.","since":"6.0.0","complexity":"O(N). Where N is the number of configured users.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"ACL LOAD","command":"ACL LOAD","summary":"Reloads the rules from the configured ACL file.","since":"6.0.0","complexity":"O(N). Where N is the number of configured users.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"ACL LOG [count | RESET]","command":"ACL LOG","summary":"Lists recent security events generated due to ACL rules.","since":"6.0.0","complexity":"O(N) with N being the number of entries shown.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["","RESET"]}]},{"syntax":"ACL SAVE","command":"ACL SAVE","summary":"Saves the effective ACL rules in the configured ACL file.","since":"6.0.0","complexity":"O(N). Where N is the number of configured users.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"ACL SETUSER username [rule [rule ...]]","command":"ACL SETUSER","summary":"Creates and modifies an ACL user and its rules.","since":"6.0.0","complexity":"O(N). Where N is the number of rules provided.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"username"},{"type":"many","name":"rule"}]},{"syntax":"ACL USERS","command":"ACL USERS","summary":"Lists all ACL users.","since":"6.0.0","complexity":"O(N). Where N is the number of configured users.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"ACL WHOAMI","command":"ACL WHOAMI","summary":"Returns the authenticated username of the current connection.","since":"6.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"APPEND key value","command":"APPEND","summary":"Appends a string to the value of a key. Creates the key if it doesn't exist.","since":"2.0.0","complexity":"O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"}]},{"syntax":"ASKING","command":"ASKING","summary":"Signals that a cluster client is following an -ASK redirect.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@fast, @connection","arguments":[]},{"syntax":"AUTH [username] password","command":"AUTH","summary":"Authenticates the connection.","since":"1.0.0","complexity":"O(N) where N is the number of passwords defined for the user","group":"connection","acl":"@fast, @connection","arguments":[{"type":"single","name":"username"},{"type":"single","name":"password"}]},{"syntax":"BF.ADD key item","command":"BF.ADD","summary":"Adds an item to a Bloom Filter","since":"1.0.0","complexity":"O(k), where k is the number of hash functions used by the last sub-filter","group":"bf","acl":"@bloom, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"BF.CARD key","command":"BF.CARD","summary":"Returns the cardinality of a Bloom filter","since":"2.4.4","complexity":"O(1)","group":"bf","acl":"@bloom, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"BF.EXISTS key item","command":"BF.EXISTS","summary":"Checks whether an item exists in a Bloom Filter","since":"1.0.0","complexity":"O(k), where k is the number of hash functions used by the last sub-filter","group":"bf","acl":"@bloom, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"BF.INFO key [CAPACITY | SIZE | FILTERS | ITEMS | EXPANSION]","command":"BF.INFO","summary":"Returns information about a Bloom Filter","since":"1.0.0","complexity":"O(1)","group":"bf","acl":"@bloom, @read, @fast","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["CAPACITY","SIZE","FILTERS","ITEMS","EXPANSION"]}]},{"syntax":"BF.INSERT key [CAPACITY capacity] [ERROR error]\n  [EXPANSION expansion] [NOCREATE] [NONSCALING] ITEMS item [item\n  ...]","command":"BF.INSERT","summary":"Adds one or more items to a Bloom Filter. A filter will be created if it does not exist","since":"1.0.0","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","acl":"@bloom, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"CAPACITY","arg":"capacity","detail":"capacity"},{"type":"arg","key":"ERROR","arg":"error","detail":"error"},{"type":"arg","key":"EXPANSION","arg":"expansion","detail":"expansion"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"NONSCALING"},{"type":"flag","value":"ITEMS"},{"type":"many","name":"item"}]},{"syntax":"BF.LOADCHUNK key iterator data","command":"BF.LOADCHUNK","summary":"Restores a filter previously saved using SCANDUMP","since":"1.0.0","complexity":"O(n), where n is the capacity","group":"bf","acl":"@bloom, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"iterator"},{"type":"single","name":"data"}]},{"syntax":"BF.MADD key item [item ...]","command":"BF.MADD","summary":"Adds one or more items to a Bloom Filter. A filter will be created if it does not exist","since":"1.0.0","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","acl":"@bloom, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"BF.MEXISTS key item [item ...]","command":"BF.MEXISTS","summary":"Checks whether one or more items exist in a Bloom Filter","since":"1.0.0","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","acl":"@bloom, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"BF.RESERVE key error_rate capacity [EXPANSION expansion]\n  [NONSCALING]","command":"BF.RESERVE","summary":"Creates a new Bloom Filter","since":"1.0.0","complexity":"O(1)","group":"bf","acl":"@bloom, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"error_rate"},{"type":"single","name":"capacity"},{"type":"arg","key":"EXPANSION","arg":"expansion","detail":"expansion"},{"type":"flag","value":"NONSCALING"}]},{"syntax":"BF.SCANDUMP key iterator","command":"BF.SCANDUMP","summary":"Begins an incremental save of the bloom filter","since":"1.0.0","complexity":"O(n), where n is the capacity","group":"bf","acl":"@bloom, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"iterator"}]},{"syntax":"BGREWRITEAOF","command":"BGREWRITEAOF","summary":"Asynchronously rewrites the append-only file to disk.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"BGSAVE [SCHEDULE]","command":"BGSAVE","summary":"Asynchronously saves the database(s) to disk.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"flag","value":"SCHEDULE"}]},{"syntax":"BITCOUNT key [start end [BYTE | BIT]]","command":"BITCOUNT","summary":"Counts the number of set bits (population counting) in a string.","since":"2.6.0","complexity":"O(N)","group":"bitmap","acl":"@read, @bitmap, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["","",""]}]},{"syntax":"BITFIELD key [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  ...]]","command":"BITFIELD","summary":"Performs arbitrary bitfield integer operations on strings.","since":"3.2.0","complexity":"O(1) for each subcommand specified","group":"bitmap","acl":"@write, @bitmap, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"get-block write"}]},{"syntax":"BITFIELD_RO key [GET encoding offset [GET encoding offset ...]]","command":"BITFIELD_RO","summary":"Performs arbitrary read-only bitfield integer operations on strings.","since":"6.0.0","complexity":"O(1) for each subcommand specified","group":"bitmap","acl":"@read, @bitmap, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"GET","arg":"get-block","detail":"get-block"}]},{"syntax":"BITOP <AND | OR | XOR | NOT> destkey key [key ...]","command":"BITOP","summary":"Performs bitwise operations on multiple strings, and stores the result.","since":"2.6.0","complexity":"O(N)","group":"bitmap","acl":"@write, @bitmap, @slow","arguments":[{"type":"enum","values":["AND","OR","XOR","NOT"]},{"type":"single","name":"destkey"},{"type":"many","name":"key"}]},{"syntax":"BITPOS key bit [start [end [BYTE | BIT]]]","command":"BITPOS","summary":"Finds the first set (1) or clear (0) bit in a string.","since":"2.8.7","complexity":"O(N)","group":"bitmap","acl":"@read, @bitmap, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"bit"},{"type":"enum","values":["",""]}]},{"syntax":"BLMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT> timeout","command":"BLMOVE","summary":"Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.","since":"6.2.0","complexity":"O(1)","group":"list","acl":"@write, @list, @slow, @blocking","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"single","name":"timeout"}]},{"syntax":"BLMPOP timeout numkeys key [key ...] <LEFT | RIGHT> [COUNT count]","command":"BLMPOP","summary":"Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","since":"7.0.0","complexity":"O(N+M) where N is the number of provided keys and M is the number of elements returned.","group":"list","acl":"@write, @list, @slow, @blocking","arguments":[{"type":"single","name":"timeout"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"BLPOP key [key ...] timeout","command":"BLPOP","summary":"Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","since":"2.0.0","complexity":"O(N) where N is the number of provided keys.","group":"list","acl":"@write, @list, @slow, @blocking","arguments":[{"type":"many","name":"key"},{"type":"single","name":"timeout"}]},{"syntax":"BRPOP key [key ...] timeout","command":"BRPOP","summary":"Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","since":"2.0.0","complexity":"O(N) where N is the number of provided keys.","group":"list","acl":"@write, @list, @slow, @blocking","arguments":[{"type":"many","name":"key"},{"type":"single","name":"timeout"}]},{"syntax":"BRPOPLPUSH source destination timeout","command":"BRPOPLPUSH","summary":"Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.","since":"2.2.0","complexity":"O(1)","group":"list","acl":"@write, @list, @slow, @blocking","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"},{"type":"single","name":"timeout"}]},{"syntax":"BZMPOP timeout numkeys key [key ...] <MIN | MAX> [COUNT count]","command":"BZMPOP","summary":"Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","since":"7.0.0","complexity":"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","acl":"@write, @sortedset, @slow, @blocking","arguments":[{"type":"single","name":"timeout"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"enum","values":["MIN","MAX"]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"BZPOPMAX key [key ...] timeout","command":"BZPOPMAX","summary":"Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.","since":"5.0.0","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","acl":"@write, @sortedset, @fast, @blocking","arguments":[{"type":"many","name":"key"},{"type":"single","name":"timeout"}]},{"syntax":"BZPOPMIN key [key ...] timeout","command":"BZPOPMIN","summary":"Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","since":"5.0.0","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","acl":"@write, @sortedset, @fast, @blocking","arguments":[{"type":"many","name":"key"},{"type":"single","name":"timeout"}]},{"syntax":"CF.ADD key item","command":"CF.ADD","summary":"Adds an item to a Cuckoo Filter","since":"1.0.0","complexity":"O(k + i), where k is the number of sub-filters and i is maxIterations","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"CF.ADDNX key item","command":"CF.ADDNX","summary":"Adds an item to a Cuckoo Filter if the item did not exist previously.","since":"1.0.0","complexity":"O(k + i), where k is the number of sub-filters and i is maxIterations","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"CF.COUNT key item","command":"CF.COUNT","summary":"Return the number of times an item might be in a Cuckoo Filter","since":"1.0.0","complexity":"O(k), where k is the number of sub-filters","group":"cf","acl":"@cuckoo, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"CF.DEL key item","command":"CF.DEL","summary":"Deletes an item from a Cuckoo Filter","since":"1.0.0","complexity":"O(k), where k is the number of sub-filters","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"CF.EXISTS key item","command":"CF.EXISTS","summary":"Checks whether one or more items exist in a Cuckoo Filter","since":"1.0.0","complexity":"O(k), where k is the number of sub-filters","group":"cf","acl":"@cuckoo, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"item"}]},{"syntax":"CF.INFO key","command":"CF.INFO","summary":"Returns information about a Cuckoo Filter","since":"1.0.0","complexity":"O(1)","group":"cf","acl":"@cuckoo, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"CF.INSERT key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]","command":"CF.INSERT","summary":"Adds one or more items to a Cuckoo Filter. A filter will be created if it does not exist","since":"1.0.0","complexity":"O(n * (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"CAPACITY","arg":"capacity","detail":"capacity"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"ITEMS"},{"type":"many","name":"item"}]},{"syntax":"CF.INSERTNX key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]","command":"CF.INSERTNX","summary":"Adds one or more items to a Cuckoo Filter if the items did not exist previously. A filter will be created if it does not exist","since":"1.0.0","complexity":"O(n * (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"CAPACITY","arg":"capacity","detail":"capacity"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"ITEMS"},{"type":"many","name":"item"}]},{"syntax":"CF.LOADCHUNK key iterator data","command":"CF.LOADCHUNK","summary":"Restores a filter previously saved using SCANDUMP","since":"1.0.0","complexity":"O(n), where n is the capacity","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"iterator"},{"type":"single","name":"data"}]},{"syntax":"CF.MEXISTS key item [item ...]","command":"CF.MEXISTS","summary":"Checks whether one or more items exist in a Cuckoo Filter","since":"1.0.0","complexity":"O(k * n), where k is the number of sub-filters and n is the number of items","group":"cf","acl":"@cuckoo, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"CF.RESERVE key capacity [BUCKETSIZE bucketsize]\n  [MAXITERATIONS maxiterations] [EXPANSION expansion]","command":"CF.RESERVE","summary":"Creates a new Cuckoo Filter","since":"1.0.0","complexity":"O(1)","group":"cf","acl":"@cuckoo, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"capacity"},{"type":"arg","key":"BUCKETSIZE","arg":"bucketsize","detail":"bucketsize"},{"type":"arg","key":"MAXITERATIONS","arg":"maxiterations","detail":"maxiterations"},{"type":"arg","key":"EXPANSION","arg":"expansion","detail":"expansion"}]},{"syntax":"CF.SCANDUMP key iterator","command":"CF.SCANDUMP","summary":"Begins an incremental save of the bloom filter","since":"1.0.0","complexity":"O(n), where n is the capacity","group":"cf","acl":"@cuckoo, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"iterator"}]},{"syntax":"CLIENT","command":"CLIENT","summary":"A container for client connection commands.","since":"2.4.0","complexity":"Depends on subcommand.","group":"connection","acl":"@slow","arguments":[]},{"syntax":"CLIENT CACHING <YES | NO>","command":"CLIENT CACHING","summary":"Instructs the server whether to track the keys in the next request.","since":"6.0.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[{"type":"enum","values":["YES","NO"]}]},{"syntax":"CLIENT GETNAME","command":"CLIENT GETNAME","summary":"Returns the name of the connection.","since":"2.6.9","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT GETREDIR","command":"CLIENT GETREDIR","summary":"Returns the client ID to which the connection's tracking notifications are redirected.","since":"6.0.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT HELP","command":"CLIENT HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT ID","command":"CLIENT ID","summary":"Returns the unique client ID of the connection.","since":"5.0.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT INFO","command":"CLIENT INFO","summary":"Returns information about the connection.","since":"6.2.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT KILL <ip:port | <[ID client-id] | [TYPE <NORMAL | MASTER |\n  SLAVE | REPLICA | PUBSUB>] | [USER username] | [ADDR ip:port] |\n  [LADDR ip:port] | [SKIPME <YES | NO>] | [MAXAGE maxage]\n  [[ID client-id] | [TYPE <NORMAL | MASTER | SLAVE | REPLICA |\n  PUBSUB>] | [USER username] | [ADDR ip:port] | [LADDR ip:port] |\n  [SKIPME <YES | NO>] | [MAXAGE maxage] ...]>>","command":"CLIENT KILL","summary":"Terminates open connections.","since":"2.4.0","complexity":"O(N) where N is the number of client connections","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"enum","values":["",""]}]},{"syntax":"CLIENT LIST [TYPE <NORMAL | MASTER | REPLICA | PUBSUB>]\n  [ID client-id [client-id ...]]","command":"CLIENT LIST","summary":"Lists open connections.","since":"2.4.0","complexity":"O(N) where N is the number of client connections","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"arg","key":"TYPE","arg":"client-type","detail":"client-type"},{"type":"arg","key":"ID","arg":"client-id","detail":"client-id"}]},{"syntax":"CLIENT NO-EVICT <ON | OFF>","command":"CLIENT NO-EVICT","summary":"Sets the client eviction mode of the connection.","since":"7.0.0","complexity":"O(1)","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"enum","values":["ON","OFF"]}]},{"syntax":"CLIENT NO-TOUCH <ON | OFF>","command":"CLIENT NO-TOUCH","summary":"Controls whether commands sent by the client affect the LRU/LFU of accessed keys.","since":"7.2.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF"]}]},{"syntax":"CLIENT PAUSE timeout [WRITE | ALL]","command":"CLIENT PAUSE","summary":"Suspends commands processing.","since":"3.0.0","complexity":"O(1)","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"single","name":"timeout"},{"type":"enum","values":["WRITE","ALL"]}]},{"syntax":"CLIENT REPLY <ON | OFF | SKIP>","command":"CLIENT REPLY","summary":"Instructs the server whether to reply to commands.","since":"3.2.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF","SKIP"]}]},{"syntax":"CLIENT SETINFO <LIB-NAME libname | LIB-VER libver>","command":"CLIENT SETINFO","summary":"Sets information specific to the client or connection.","since":"7.2.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[{"type":"enum","values":["LIB-NAME","LIB-VER"]}]},{"syntax":"CLIENT SETNAME connection-name","command":"CLIENT SETNAME","summary":"Sets the connection name.","since":"2.6.9","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[{"type":"single","name":"connection-name"}]},{"syntax":"CLIENT TRACKING <ON | OFF> [REDIRECT client-id] [PREFIX prefix\n  [PREFIX prefix ...]] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]","command":"CLIENT TRACKING","summary":"Controls server-assisted client-side caching for the connection.","since":"6.0.0","complexity":"O(1). Some options may introduce additional complexity.","group":"connection","acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF"]},{"type":"arg","key":"REDIRECT","arg":"client-id","detail":"client-id"},{"type":"arg","key":"PREFIX","arg":"prefix","detail":"prefix"},{"type":"flag","value":"BCAST"},{"type":"flag","value":"OPTIN"},{"type":"flag","value":"OPTOUT"},{"type":"flag","value":"NOLOOP"}]},{"syntax":"CLIENT TRACKINGINFO","command":"CLIENT TRACKINGINFO","summary":"Returns information about server-assisted client-side caching for the connection.","since":"6.2.0","complexity":"O(1)","group":"connection","acl":"@slow, @connection","arguments":[]},{"syntax":"CLIENT UNBLOCK client-id [TIMEOUT | ERROR]","command":"CLIENT UNBLOCK","summary":"Unblocks a client blocked by a blocking command from a different connection.","since":"5.0.0","complexity":"O(log N) where N is the number of client connections","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"single","name":"client-id"},{"type":"enum","values":["TIMEOUT","ERROR"]}]},{"syntax":"CLIENT UNPAUSE","command":"CLIENT UNPAUSE","summary":"Resumes processing commands from paused clients.","since":"6.2.0","complexity":"O(N) Where N is the number of paused clients","group":"connection","acl":"@admin, @slow, @dangerous, @connection","arguments":[]},{"syntax":"CLUSTER","command":"CLUSTER","summary":"A container for Redis Cluster commands.","since":"3.0.0","complexity":"Depends on subcommand.","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER ADDSLOTS slot [slot ...]","command":"CLUSTER ADDSLOTS","summary":"Assigns new hash slots to a node.","since":"3.0.0","complexity":"O(N) where N is the total number of hash slot arguments","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"slot"}]},{"syntax":"CLUSTER ADDSLOTSRANGE start-slot end-slot [start-slot end-slot ...]","command":"CLUSTER ADDSLOTSRANGE","summary":"Assigns new hash slot ranges to a node.","since":"7.0.0","complexity":"O(N) where N is the total number of the slots between the start slot and end slot arguments.","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"start-slot end-slot"}]},{"syntax":"CLUSTER BUMPEPOCH","command":"CLUSTER BUMPEPOCH","summary":"Advances the cluster config epoch.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"CLUSTER COUNT-FAILURE-REPORTS node-id","command":"CLUSTER COUNT-FAILURE-REPORTS","summary":"Returns the number of active failure reports active for a node.","since":"3.0.0","complexity":"O(N) where N is the number of failure reports","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"node-id"}]},{"syntax":"CLUSTER COUNTKEYSINSLOT slot","command":"CLUSTER COUNTKEYSINSLOT","summary":"Returns the number of keys in a hash slot.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@slow","arguments":[{"type":"single","name":"slot"}]},{"syntax":"CLUSTER DELSLOTS slot [slot ...]","command":"CLUSTER DELSLOTS","summary":"Sets hash slots as unbound for a node.","since":"3.0.0","complexity":"O(N) where N is the total number of hash slot arguments","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"slot"}]},{"syntax":"CLUSTER DELSLOTSRANGE start-slot end-slot [start-slot end-slot ...]","command":"CLUSTER DELSLOTSRANGE","summary":"Sets hash slot ranges as unbound for a node.","since":"7.0.0","complexity":"O(N) where N is the total number of the slots between the start slot and end slot arguments.","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"start-slot end-slot"}]},{"syntax":"CLUSTER FAILOVER [FORCE | TAKEOVER]","command":"CLUSTER FAILOVER","summary":"Forces a replica to perform a manual failover of its master.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["FORCE","TAKEOVER"]}]},{"syntax":"CLUSTER FLUSHSLOTS","command":"CLUSTER FLUSHSLOTS","summary":"Deletes all slots information from a node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"CLUSTER FORGET node-id","command":"CLUSTER FORGET","summary":"Removes a node from the nodes table.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"node-id"}]},{"syntax":"CLUSTER GETKEYSINSLOT slot count","command":"CLUSTER GETKEYSINSLOT","summary":"Returns the key names in a hash slot.","since":"3.0.0","complexity":"O(N) where N is the number of requested keys","group":"cluster","acl":"@slow","arguments":[{"type":"single","name":"slot"},{"type":"single","name":"count"}]},{"syntax":"CLUSTER HELP","command":"CLUSTER HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER INFO","command":"CLUSTER INFO","summary":"Returns information about the state of a node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER KEYSLOT key","command":"CLUSTER KEYSLOT","summary":"Returns the hash slot for a key.","since":"3.0.0","complexity":"O(N) where N is the number of bytes in the key","group":"cluster","acl":"@slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"CLUSTER LINKS","command":"CLUSTER LINKS","summary":"Returns a list of all TCP links to and from peer nodes.","since":"7.0.0","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER MEET ip port [cluster-bus-port]","command":"CLUSTER MEET","summary":"Forces a node to handshake with another node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"ip"},{"type":"single","name":"port"},{"type":"single","name":"cluster-bus-port"}]},{"syntax":"CLUSTER MYID","command":"CLUSTER MYID","summary":"Returns the ID of a node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER MYSHARDID","command":"CLUSTER MYSHARDID","summary":"Returns the shard ID of a node.","since":"7.2.0","complexity":"O(1)","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER NODES","command":"CLUSTER NODES","summary":"Returns the cluster configuration for a node.","since":"3.0.0","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER REPLICAS node-id","command":"CLUSTER REPLICAS","summary":"Lists the replica nodes of a master node.","since":"5.0.0","complexity":"O(N) where N is the number of replicas.","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"node-id"}]},{"syntax":"CLUSTER REPLICATE node-id","command":"CLUSTER REPLICATE","summary":"Configure a node as replica of a master node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"node-id"}]},{"syntax":"CLUSTER RESET [HARD | SOFT]","command":"CLUSTER RESET","summary":"Resets a node.","since":"3.0.0","complexity":"O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["HARD","SOFT"]}]},{"syntax":"CLUSTER SAVECONFIG","command":"CLUSTER SAVECONFIG","summary":"Forces a node to save the cluster configuration to disk.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"CLUSTER SET-CONFIG-EPOCH config-epoch","command":"CLUSTER SET-CONFIG-EPOCH","summary":"Sets the configuration epoch for a new node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"config-epoch"}]},{"syntax":"CLUSTER SETSLOT slot <IMPORTING node-id | MIGRATING node-id |\n  NODE node-id | STABLE>","command":"CLUSTER SETSLOT","summary":"Binds a hash slot to a node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"slot"},{"type":"enum","values":["IMPORTING","MIGRATING","NODE","STABLE"]}]},{"syntax":"CLUSTER SHARDS","command":"CLUSTER SHARDS","summary":"Returns the mapping of cluster slots to shards.","since":"7.0.0","complexity":"O(N) where N is the total number of cluster nodes","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CLUSTER SLAVES node-id","command":"CLUSTER SLAVES","summary":"Lists the replica nodes of a master node.","since":"3.0.0","complexity":"O(N) where N is the number of replicas.","group":"cluster","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"node-id"}]},{"syntax":"CLUSTER SLOTS","command":"CLUSTER SLOTS","summary":"Returns the mapping of cluster slots to nodes.","since":"3.0.0","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","acl":"@slow","arguments":[]},{"syntax":"CMS.INCRBY key item increment [item increment ...]","command":"CMS.INCRBY","summary":"Increases the count of one or more items by increment","since":"2.0.0","complexity":"O(n) where n is the number of items","group":"cms","acl":"@cms, @write","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item increment"}]},{"syntax":"CMS.INFO key","command":"CMS.INFO","summary":"Returns information about a sketch","since":"2.0.0","complexity":"O(1)","group":"cms","acl":"@cms, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"CMS.INITBYDIM key width depth","command":"CMS.INITBYDIM","summary":"Initializes a Count-Min Sketch to dimensions specified by user","since":"2.0.0","complexity":"O(1)","group":"cms","acl":"@cms, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"width"},{"type":"single","name":"depth"}]},{"syntax":"CMS.INITBYPROB key error probability","command":"CMS.INITBYPROB","summary":"Initializes a Count-Min Sketch to accommodate requested tolerances.","since":"2.0.0","complexity":"O(1)","group":"cms","acl":"@cms, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"error"},{"type":"single","name":"probability"}]},{"syntax":"CMS.MERGE destination numKeys source [source ...] [WEIGHTS weight\n  [weight ...]]","command":"CMS.MERGE","summary":"Merges several sketches into one sketch","since":"2.0.0","complexity":"O(n) where n is the number of sketches","group":"cms","acl":"@cms, @write","arguments":[{"type":"single","name":"destination"},{"type":"single","name":"numKeys"},{"type":"many","name":"source"},{"type":"enum","values":["WEIGHTS",""]}]},{"syntax":"CMS.QUERY key item [item ...]","command":"CMS.QUERY","summary":"Returns the count for one or more items in a sketch","since":"2.0.0","complexity":"O(n) where n is the number of items","group":"cms","acl":"@cms, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"COMMAND","command":"COMMAND","summary":"Returns detailed information about all commands.","since":"2.8.13","complexity":"O(N) where N is the total number of Redis commands","group":"server","acl":"@slow, @connection","arguments":[]},{"syntax":"COMMAND COUNT","command":"COMMAND COUNT","summary":"Returns a count of commands.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@slow, @connection","arguments":[]},{"syntax":"COMMAND DOCS [command-name [command-name ...]]","command":"COMMAND DOCS","summary":"Returns documentary information about one, multiple or all commands.","since":"7.0.0","complexity":"O(N) where N is the number of commands to look up","group":"server","acl":"@slow, @connection","arguments":[{"type":"many","name":"command-name"}]},{"syntax":"COMMAND GETKEYS command [arg [arg ...]]","command":"COMMAND GETKEYS","summary":"Extracts the key names from an arbitrary command.","since":"2.8.13","complexity":"O(N) where N is the number of arguments to the command","group":"server","acl":"@slow, @connection","arguments":[{"type":"single","name":"command"},{"type":"many","name":"arg"}]},{"syntax":"COMMAND GETKEYSANDFLAGS command [arg [arg ...]]","command":"COMMAND GETKEYSANDFLAGS","summary":"Extracts the key names and access flags for an arbitrary command.","since":"7.0.0","complexity":"O(N) where N is the number of arguments to the command","group":"server","acl":"@slow, @connection","arguments":[{"type":"single","name":"command"},{"type":"many","name":"arg"}]},{"syntax":"COMMAND HELP","command":"COMMAND HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"server","acl":"@slow, @connection","arguments":[]},{"syntax":"COMMAND INFO [command-name [command-name ...]]","command":"COMMAND INFO","summary":"Returns information about one, multiple or all commands.","since":"2.8.13","complexity":"O(N) where N is the number of commands to look up","group":"server","acl":"@slow, @connection","arguments":[{"type":"many","name":"command-name"}]},{"syntax":"COMMAND LIST [FILTERBY <MODULE module-name | ACLCAT category |\n  PATTERN pattern>]","command":"COMMAND LIST","summary":"Returns a list of command names.","since":"7.0.0","complexity":"O(N) where N is the total number of Redis commands","group":"server","acl":"@slow, @connection","arguments":[{"type":"arg","key":"FILTERBY","arg":"filterby","detail":"filterby"}]},{"syntax":"CONFIG","command":"CONFIG","summary":"A container for server configuration commands.","since":"2.0.0","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"CONFIG GET parameter [parameter ...]","command":"CONFIG GET","summary":"Returns the effective values of configuration parameters.","since":"2.0.0","complexity":"O(N) when N is the number of configuration parameters provided","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"parameter"}]},{"syntax":"CONFIG HELP","command":"CONFIG HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"CONFIG RESETSTAT","command":"CONFIG RESETSTAT","summary":"Resets the server's statistics.","since":"2.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"CONFIG REWRITE","command":"CONFIG REWRITE","summary":"Persists the effective configuration to file.","since":"2.8.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"CONFIG SET parameter value [parameter value ...]","command":"CONFIG SET","summary":"Sets configuration parameters in-flight.","since":"2.0.0","complexity":"O(N) when N is the number of configuration parameters provided","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"parameter value"}]},{"syntax":"COPY source destination [DB destination-db] [REPLACE]","command":"COPY","summary":"Copies the value of a key to a new key.","since":"6.2.0","complexity":"O(N) worst case for collections, where N is the number of nested items. O(1) for string values.","group":"generic","acl":"@keyspace, @write, @slow","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"},{"type":"arg","key":"DB","arg":"destination-db","detail":"destination-db"},{"type":"flag","value":"REPLACE"}]},{"syntax":"DBSIZE","command":"DBSIZE","summary":"Returns the number of keys in the database.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@keyspace, @read, @fast","arguments":[]},{"syntax":"DEBUG","command":"DEBUG","summary":"A container for debugging commands.","since":"1.0.0","complexity":"Depends on subcommand.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"DECR key","command":"DECR","summary":"Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"DECRBY key decrement","command":"DECRBY","summary":"Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"decrement"}]},{"syntax":"DEL key [key ...]","command":"DEL","summary":"Deletes one or more keys.","since":"1.0.0","complexity":"O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).","group":"generic","acl":"@keyspace, @write, @slow","arguments":[{"type":"many","name":"key"}]},{"syntax":"DISCARD","command":"DISCARD","summary":"Discards a transaction.","since":"2.0.0","complexity":"O(N), when N is the number of queued commands","group":"transactions","acl":"@fast, @transaction","arguments":[]},{"syntax":"DUMP key","command":"DUMP","summary":"Returns a serialized representation of the value stored at a key.","since":"2.6.0","complexity":"O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"ECHO message","command":"ECHO","summary":"Returns the given string.","since":"1.0.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[{"type":"single","name":"message"}]},{"syntax":"EVAL script numkeys [key [key ...]] [arg [arg ...]]","command":"EVAL","summary":"Executes a server-side Lua script.","since":"2.6.0","complexity":"Depends on the script that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"script"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"EVALSHA sha1 numkeys [key [key ...]] [arg [arg ...]]","command":"EVALSHA","summary":"Executes a server-side Lua script by SHA1 digest.","since":"2.6.0","complexity":"Depends on the script that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"sha1"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"EVALSHA_RO sha1 numkeys [key [key ...]] [arg [arg ...]]","command":"EVALSHA_RO","summary":"Executes a read-only server-side Lua script by SHA1 digest.","since":"7.0.0","complexity":"Depends on the script that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"sha1"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"EVAL_RO script numkeys [key [key ...]] [arg [arg ...]]","command":"EVAL_RO","summary":"Executes a read-only server-side Lua script.","since":"7.0.0","complexity":"Depends on the script that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"script"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"EXEC","command":"EXEC","summary":"Executes all commands in a transaction.","since":"1.2.0","complexity":"Depends on commands in the transaction","group":"transactions","acl":"@slow, @transaction","arguments":[]},{"syntax":"EXISTS key [key ...]","command":"EXISTS","summary":"Determines whether one or more keys exist.","since":"1.0.0","complexity":"O(N) where N is the number of keys to check.","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"many","name":"key"}]},{"syntax":"EXPIRE key seconds [NX | XX | GT | LT]","command":"EXPIRE","summary":"Sets the expiration time of a key in seconds.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"seconds"},{"type":"enum","values":["NX","XX","GT","LT"]}]},{"syntax":"EXPIREAT key unix-time-seconds [NX | XX | GT | LT]","command":"EXPIREAT","summary":"Sets the expiration time of a key to a Unix timestamp.","since":"1.2.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"unix-time-seconds"},{"type":"enum","values":["NX","XX","GT","LT"]}]},{"syntax":"EXPIRETIME key","command":"EXPIRETIME","summary":"Returns the expiration time of a key as a Unix timestamp.","since":"7.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"FAILOVER [TO host port [FORCE]] [ABORT] [TIMEOUT milliseconds]","command":"FAILOVER","summary":"Starts a coordinated failover from a server to one of its replicas.","since":"6.2.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"arg","key":"TO","arg":"target","detail":"target"},{"type":"flag","value":"ABORT"},{"type":"arg","key":"TIMEOUT","arg":"milliseconds","detail":"milliseconds"}]},{"syntax":"FCALL function numkeys [key [key ...]] [arg [arg ...]]","command":"FCALL","summary":"Invokes a function.","since":"7.0.0","complexity":"Depends on the function that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"function"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"FCALL_RO function numkeys [key [key ...]] [arg [arg ...]]","command":"FCALL_RO","summary":"Invokes a read-only function.","since":"7.0.0","complexity":"Depends on the function that is executed.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"function"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"many","name":"arg"}]},{"syntax":"FLUSHALL [ASYNC | SYNC]","command":"FLUSHALL","summary":"Removes all keys from all databases.","since":"1.0.0","complexity":"O(N) where N is the total number of keys in all databases","group":"server","acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}]},{"syntax":"FLUSHDB [ASYNC | SYNC]","command":"FLUSHDB","summary":"Remove all keys from the current database.","since":"1.0.0","complexity":"O(N) where N is the number of keys in the selected database","group":"server","acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}]},{"syntax":"FT.AGGREGATE index query [VERBATIM] [LOAD count field [field ...]]\n  [TIMEOUT timeout] [LOAD *] [GROUPBY nargs property [property ...]\n  [REDUCE function nargs arg [arg ...] [AS name] [REDUCE function\n  nargs arg [arg ...] [AS name] ...]] [GROUPBY nargs property\n  [property ...] [REDUCE function nargs arg [arg ...] [AS name]\n  [REDUCE function nargs arg [arg ...] [AS name] ...]] ...]]\n  [SORTBY nargs [property <ASC | DESC> [property <ASC | DESC> ...]]\n  [MAX num]] [APPLY expression AS name [APPLY expression AS name\n  ...]] [LIMIT offset num] [FILTER filter] [WITHCURSOR\n  [COUNT read_size] [MAXIDLE idle_time]] [PARAMS nargs name value\n  [name value ...]]\n  [SCORER scorer]\n [ADDSCORES]\n  [DIALECT dialect]","command":"FT.AGGREGATE","summary":"Run a search query on an index and perform aggregate transformations on the results","since":"1.1.0","complexity":"O(1)","group":"search","acl":"@search, @read, @fast","arguments":[{"type":"single","name":"index"},{"type":"single","name":"query"},{"type":"flag","value":"VERBATIM"},{"type":"enum","values":["LOAD",""]},{"type":"arg","key":"TIMEOUT","arg":"timeout","detail":"timeout"},{"type":"flag","value":"LOAD *"},{"type":"many","name":"nargs property reduce"},{"type":"enum","values":["SORTBY","","MAX"]},{"type":"many","name":"expression name"},{"type":"enum","values":["LIMIT","",""]},{"type":"arg","key":"FILTER","arg":"filter","detail":"filter"},{"type":"enum","values":["WITHCURSOR","COUNT","MAXIDLE"]},{"type":"enum","values":["PARAMS","",""]},{"type":"arg","key":"SCORER","arg":"scorer","detail":"scorer"},{"type":"flag","value":"ADDSCORES"},{"type":"arg","key":"DIALECT","arg":"dialect","detail":"dialect"}]},{"syntax":"FT.ALIASADD alias index","command":"FT.ALIASADD","summary":"Adds an alias to the index","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"alias"},{"type":"single","name":"index"}]},{"syntax":"FT.ALIASDEL alias","command":"FT.ALIASDEL","summary":"Deletes an alias from the index","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"alias"}]},{"syntax":"FT.ALIASUPDATE alias index","command":"FT.ALIASUPDATE","summary":"Adds or updates an alias to the index","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"alias"},{"type":"single","name":"index"}]},{"syntax":"FT.ALTER index [SKIPINITIALSCAN] SCHEMA ADD field options","command":"FT.ALTER","summary":"Adds a new field to the index","since":"1.0.0","complexity":"O(N) where N is the number of keys in the keyspace","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"flag","value":"SKIPINITIALSCAN"},{"type":"flag","value":"SCHEMA"},{"type":"flag","value":"ADD"},{"type":"single","name":"field"},{"type":"single","name":"options"}]},{"syntax":"FT.CONFIG GET option","command":"FT.CONFIG GET","summary":"Retrieves runtime configuration options","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@admin, @search","arguments":[{"type":"single","name":"option"}]},{"syntax":"FT.CONFIG HELP option","command":"FT.CONFIG HELP","summary":"Help description of runtime configuration options","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@admin, @search","arguments":[{"type":"single","name":"option"}]},{"syntax":"FT.CONFIG SET option value","command":"FT.CONFIG SET","summary":"Sets runtime configuration options","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@admin, @search","arguments":[{"type":"single","name":"option"},{"type":"single","name":"value"}]},{"syntax":"FT.CREATE index [ON <HASH | JSON>] [PREFIX count prefix [prefix\n  ...]] [FILTER filter] [LANGUAGE default_lang]\n  [LANGUAGE_FIELD lang_attribute] [SCORE default_score]\n  [SCORE_FIELD score_attribute] [PAYLOAD_FIELD payload_attribute]\n  [MAXTEXTFIELDS] [TEMPORARY seconds] [NOOFFSETS] [NOHL] [NOFIELDS]\n  [NOFREQS] [STOPWORDS count [stopword [stopword ...]]]\n  [SKIPINITIALSCAN] SCHEMA field_name [AS alias] <TEXT | TAG |\n  NUMERIC | GEO | VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]]\n  [NOINDEX] [field_name [AS alias] <TEXT | TAG | NUMERIC | GEO |\n  VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]] [NOINDEX] ...]","command":"FT.CREATE","summary":"Creates an index with the given spec","since":"1.0.0","complexity":"O(K) at creation where K is the number of fields, O(N) if scanning the keyspace is triggered, where N is the number of keys in the keyspace","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"arg","key":"ON","arg":"data_type","detail":"data_type"},{"type":"enum","values":["PREFIX",""]},{"type":"arg","key":"FILTER","arg":"filter","detail":"filter"},{"type":"arg","key":"LANGUAGE","arg":"default_lang","detail":"default_lang"},{"type":"arg","key":"LANGUAGE_FIELD","arg":"lang_attribute","detail":"lang_attribute"},{"type":"arg","key":"SCORE","arg":"default_score","detail":"default_score"},{"type":"arg","key":"SCORE_FIELD","arg":"score_attribute","detail":"score_attribute"},{"type":"arg","key":"PAYLOAD_FIELD","arg":"payload_attribute","detail":"payload_attribute"},{"type":"flag","value":"MAXTEXTFIELDS"},{"type":"arg","key":"TEMPORARY","arg":"seconds","detail":"seconds"},{"type":"flag","value":"NOOFFSETS"},{"type":"flag","value":"NOHL"},{"type":"flag","value":"NOFIELDS"},{"type":"flag","value":"NOFREQS"},{"type":"arg","key":"STOPWORDS","arg":"stopwords","detail":"stopwords"},{"type":"flag","value":"SKIPINITIALSCAN"},{"type":"flag","value":"SCHEMA"},{"type":"many","name":"field_name alias field_type withsuffixtrie indexempty sortable noindex"}]},{"syntax":"FT.CURSOR DEL index cursor_id","command":"FT.CURSOR DEL","summary":"Deletes a cursor","since":"1.1.0","complexity":"O(1)","group":"search","acl":"@read, @search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"cursor_id"}]},{"syntax":"FT.CURSOR READ index cursor_id [COUNT read size]","command":"FT.CURSOR READ","summary":"Reads from a cursor","since":"1.1.0","complexity":"O(1)","group":"search","acl":"@read, @search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"cursor_id"},{"type":"arg","key":"COUNT","arg":"read size","detail":"read size"}]},{"syntax":"FT.DICTADD dict term [term ...]","command":"FT.DICTADD","summary":"Adds terms to a dictionary","since":"1.4.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"dict"},{"type":"many","name":"term"}]},{"syntax":"FT.DICTDEL dict term [term ...]","command":"FT.DICTDEL","summary":"Deletes terms from a dictionary","since":"1.4.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"dict"},{"type":"many","name":"term"}]},{"syntax":"FT.DICTDUMP dict","command":"FT.DICTDUMP","summary":"Dumps all terms in the given dictionary","since":"1.4.0","complexity":"O(N), where N is the size of the dictionary","group":"search","acl":"@search","arguments":[{"type":"single","name":"dict"}]},{"syntax":"FT.DROPINDEX index [DD]","command":"FT.DROPINDEX","summary":"Deletes the index","since":"2.0.0","complexity":"O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace","group":"search","acl":"@dangerous, @search, @slow, @write","arguments":[{"type":"single","name":"index"},{"type":"enum","values":["DD"]}]},{"syntax":"FT.EXPLAIN index query [DIALECT dialect]","command":"FT.EXPLAIN","summary":"Returns the execution plan for a complex query","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"query"},{"type":"arg","key":"DIALECT","arg":"dialect","detail":"dialect"}]},{"syntax":"FT.EXPLAINCLI index query [DIALECT dialect]","command":"FT.EXPLAINCLI","summary":"Returns the execution plan for a complex query","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"query"},{"type":"arg","key":"DIALECT","arg":"dialect","detail":"dialect"}]},{"syntax":"FT.INFO index","command":"FT.INFO","summary":"Returns information and statistics on the index","since":"1.0.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"}]},{"syntax":"FT.PROFILE index <SEARCH | AGGREGATE> [LIMITED] QUERY query","command":"FT.PROFILE","summary":"Performs a `FT.SEARCH` or `FT.AGGREGATE` command and collects performance information","since":"2.2.0","complexity":"O(N)","group":"search","acl":"@read, @search","arguments":[{"type":"single","name":"index"},{"type":"enum","values":["SEARCH","AGGREGATE"]},{"type":"flag","value":"LIMITED"},{"type":"flag","value":"QUERY"},{"type":"single","name":"query"}]},{"syntax":"FT.SEARCH index query [NOCONTENT] [VERBATIM] [NOSTOPWORDS]\n  [WITHSCORES] [WITHPAYLOADS] [WITHSORTKEYS] [FILTER numeric_field\n  min max [FILTER numeric_field min max ...]] [GEOFILTER geo_field\n  lon lat radius <m | km | mi | ft> [GEOFILTER geo_field lon lat\n  radius <m | km | mi | ft> ...]] [INKEYS count key [key ...]]\n  [INFIELDS count field [field ...]] [RETURN count identifier\n  [AS property] [identifier [AS property] ...]] [SUMMARIZE\n  [FIELDS count field [field ...]] [FRAGS num] [LEN fragsize]\n  [SEPARATOR separator]] [HIGHLIGHT [FIELDS count field [field ...]]\n  [TAGS open close]] [SLOP slop] [TIMEOUT timeout] [INORDER]\n  [LANGUAGE language] [EXPANDER expander] [SCORER scorer]\n  [EXPLAINSCORE] [PAYLOAD payload] [SORTBY sortby [ASC | DESC]]\n  [LIMIT offset num] [PARAMS nargs name value [name value ...]]\n  [DIALECT dialect]","command":"FT.SEARCH","summary":"Searches the index with a textual query, returning either documents or just ids","since":"1.0.0","complexity":"O(N)","group":"search","acl":"@read, @search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"query"},{"type":"flag","value":"NOCONTENT"},{"type":"flag","value":"VERBATIM"},{"type":"flag","value":"NOSTOPWORDS"},{"type":"flag","value":"WITHSCORES"},{"type":"flag","value":"WITHPAYLOADS"},{"type":"flag","value":"WITHSORTKEYS"},{"type":"many","name":"numeric_field min max"},{"type":"many","name":"geo_field lon lat radius radius_type"},{"type":"enum","values":["INKEYS",""]},{"type":"enum","values":["INFIELDS",""]},{"type":"enum","values":["RETURN",""]},{"type":"enum","values":["SUMMARIZE","","FRAGS","LEN","SEPARATOR"]},{"type":"enum","values":["HIGHLIGHT","",""]},{"type":"arg","key":"SLOP","arg":"slop","detail":"slop"},{"type":"arg","key":"TIMEOUT","arg":"timeout","detail":"timeout"},{"type":"flag","value":"INORDER"},{"type":"arg","key":"LANGUAGE","arg":"language","detail":"language"},{"type":"arg","key":"EXPANDER","arg":"expander","detail":"expander"},{"type":"arg","key":"SCORER","arg":"scorer","detail":"scorer"},{"type":"flag","value":"EXPLAINSCORE"},{"type":"arg","key":"PAYLOAD","arg":"payload","detail":"payload"},{"type":"enum","values":["SORTBY",""]},{"type":"enum","values":["LIMIT","",""]},{"type":"enum","values":["PARAMS","",""]},{"type":"arg","key":"DIALECT","arg":"dialect","detail":"dialect"}]},{"syntax":"FT.SPELLCHECK index query [DISTANCE distance] [TERMS <INCLUDE |\n  EXCLUDE> dictionary [terms [terms ...]]] [DIALECT dialect]","command":"FT.SPELLCHECK","summary":"Performs spelling correction on a query, returning suggestions for misspelled terms","since":"1.4.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"query"},{"type":"arg","key":"DISTANCE","arg":"distance","detail":"distance"},{"type":"arg","key":"TERMS","arg":"terms","detail":"terms"},{"type":"arg","key":"DIALECT","arg":"dialect","detail":"dialect"}]},{"syntax":"FT.SUGADD key string score [INCR] [PAYLOAD payload]","command":"FT.SUGADD","summary":"Adds a suggestion string to an auto-complete suggestion dictionary","since":"1.0.0","complexity":"O(1)","group":"suggestion","acl":"@search, @write","arguments":[{"type":"single","name":"key"},{"type":"single","name":"string"},{"type":"single","name":"score"},{"type":"enum","values":["INCR"]},{"type":"arg","key":"PAYLOAD","arg":"payload","detail":"payload"}]},{"syntax":"FT.SUGDEL key string","command":"FT.SUGDEL","summary":"Deletes a string from a suggestion index","since":"1.0.0","complexity":"O(1)","group":"suggestion","acl":"@search, @write","arguments":[{"type":"single","name":"key"},{"type":"single","name":"string"}]},{"syntax":"FT.SUGGET key prefix [FUZZY] [WITHSCORES] [WITHPAYLOADS] [MAX max]","command":"FT.SUGGET","summary":"Gets completion suggestions for a prefix","since":"1.0.0","complexity":"O(1)","group":"suggestion","acl":"@search","arguments":[{"type":"single","name":"key"},{"type":"single","name":"prefix"},{"type":"flag","value":"FUZZY"},{"type":"flag","value":"WITHSCORES"},{"type":"flag","value":"WITHPAYLOADS"},{"type":"arg","key":"MAX","arg":"max","detail":"max"}]},{"syntax":"FT.SUGLEN key","command":"FT.SUGLEN","summary":"Gets the size of an auto-complete suggestion dictionary","since":"1.0.0","complexity":"O(1)","group":"suggestion","acl":"@search","arguments":[{"type":"single","name":"key"}]},{"syntax":"FT.SYNDUMP index","command":"FT.SYNDUMP","summary":"Dumps the contents of a synonym group","since":"1.2.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"}]},{"syntax":"FT.SYNUPDATE index synonym_group_id [SKIPINITIALSCAN] term [term\n  ...]","command":"FT.SYNUPDATE","summary":"Creates or updates a synonym group with additional terms","since":"1.2.0","complexity":"O(1)","group":"search","acl":"@search","arguments":[{"type":"single","name":"index"},{"type":"single","name":"synonym_group_id"},{"type":"flag","value":"SKIPINITIALSCAN"},{"type":"many","name":"term"}]},{"syntax":"FT.TAGVALS index field_name","command":"FT.TAGVALS","summary":"Returns the distinct tags indexed in a Tag field","since":"1.0.0","complexity":"O(N)","group":"search","acl":"@dangerous, @read, @search, @slow","arguments":[{"type":"single","name":"index"},{"type":"single","name":"field_name"}]},{"syntax":"FT._LIST","command":"FT._LIST","summary":"Returns a list of all existing indexes","since":"2.0.0","complexity":"O(1)","group":"search","acl":"@admin, @search, @slow","arguments":[]},{"syntax":"FUNCTION","command":"FUNCTION","summary":"A container for function commands.","since":"7.0.0","complexity":"Depends on subcommand.","group":"scripting","acl":"@slow","arguments":[]},{"syntax":"FUNCTION DELETE library-name","command":"FUNCTION DELETE","summary":"Deletes a library and its functions.","since":"7.0.0","complexity":"O(1)","group":"scripting","acl":"@write, @slow, @scripting","arguments":[{"type":"single","name":"library-name"}]},{"syntax":"FUNCTION DUMP","command":"FUNCTION DUMP","summary":"Dumps all libraries into a serialized binary payload.","since":"7.0.0","complexity":"O(N) where N is the number of functions","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"FUNCTION FLUSH [ASYNC | SYNC]","command":"FUNCTION FLUSH","summary":"Deletes all libraries and functions.","since":"7.0.0","complexity":"O(N) where N is the number of functions deleted","group":"scripting","acl":"@write, @slow, @scripting","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}]},{"syntax":"FUNCTION HELP","command":"FUNCTION HELP","summary":"Returns helpful text about the different subcommands.","since":"7.0.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"FUNCTION KILL","command":"FUNCTION KILL","summary":"Terminates a function during execution.","since":"7.0.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"FUNCTION LIST [LIBRARYNAME library-name-pattern] [WITHCODE]","command":"FUNCTION LIST","summary":"Returns information about all libraries.","since":"7.0.0","complexity":"O(N) where N is the number of functions","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"arg","key":"LIBRARYNAME","arg":"library-name-pattern","detail":"library-name-pattern"},{"type":"flag","value":"WITHCODE"}]},{"syntax":"FUNCTION LOAD [REPLACE] function-code","command":"FUNCTION LOAD","summary":"Creates a library.","since":"7.0.0","complexity":"O(1) (considering compilation time is redundant)","group":"scripting","acl":"@write, @slow, @scripting","arguments":[{"type":"flag","value":"REPLACE"},{"type":"single","name":"function-code"}]},{"syntax":"FUNCTION RESTORE serialized-value [FLUSH | APPEND | REPLACE]","command":"FUNCTION RESTORE","summary":"Restores all libraries from a payload.","since":"7.0.0","complexity":"O(N) where N is the number of functions on the payload","group":"scripting","acl":"@write, @slow, @scripting","arguments":[{"type":"single","name":"serialized-value"},{"type":"enum","values":["FLUSH","APPEND","REPLACE"]}]},{"syntax":"FUNCTION STATS","command":"FUNCTION STATS","summary":"Returns information about a function during execution.","since":"7.0.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"GEOADD key [NX | XX] [CH] longitude latitude member [longitude\n  latitude member ...]","command":"GEOADD","summary":"Adds one or more members to a geospatial index. The key is created if it doesn't exist.","since":"3.2.0","complexity":"O(log(N)) for each item added, where N is the number of elements in the sorted set.","group":"geo","acl":"@write, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["NX","XX"]},{"type":"flag","value":"CH"},{"type":"many","name":"longitude latitude member"}]},{"syntax":"GEODIST key member1 member2 [M | KM | FT | MI]","command":"GEODIST","summary":"Returns the distance between two members of a geospatial index.","since":"3.2.0","complexity":"O(1)","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member1"},{"type":"single","name":"member2"},{"type":"enum","values":["M","KM","FT","MI"]}]},{"syntax":"GEOHASH key [member [member ...]]","command":"GEOHASH","summary":"Returns members from a geospatial index as geohash strings.","since":"3.2.0","complexity":"O(1) for each member requested.","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"GEOPOS key [member [member ...]]","command":"GEOPOS","summary":"Returns the longitude and latitude of members from a geospatial index.","since":"3.2.0","complexity":"O(1) for each member requested.","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"GEORADIUS key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n  [STORE key | STOREDIST key]","command":"GEORADIUS","summary":"Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.","since":"3.2.0","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","acl":"@write, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"longitude"},{"type":"single","name":"latitude"},{"type":"single","name":"radius"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["STORE","STOREDIST"]}]},{"syntax":"GEORADIUSBYMEMBER key member radius <M | KM | FT | MI> [WITHCOORD]\n  [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key\n  | STOREDIST key]","command":"GEORADIUSBYMEMBER","summary":"Queries a geospatial index for members within a distance from a member, optionally stores the result.","since":"3.2.0","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","acl":"@write, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"},{"type":"single","name":"radius"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["STORE","STOREDIST"]}]},{"syntax":"GEORADIUSBYMEMBER_RO key member radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]","command":"GEORADIUSBYMEMBER_RO","summary":"Returns members from a geospatial index that are within a distance from a member.","since":"3.2.10","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"},{"type":"single","name":"radius"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]}]},{"syntax":"GEORADIUS_RO key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]","command":"GEORADIUS_RO","summary":"Returns members from a geospatial index that are within a distance from a coordinate.","since":"3.2.10","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"longitude"},{"type":"single","name":"latitude"},{"type":"single","name":"radius"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]}]},{"syntax":"GEOSEARCH key <FROMMEMBER member | FROMLONLAT longitude latitude>\n  <BYRADIUS radius <M | KM | FT | MI> | BYBOX width height <M | KM |\n  FT | MI>> [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST]\n  [WITHHASH]","command":"GEOSEARCH","summary":"Queries a geospatial index for members inside an area of a box or a circle.","since":"6.2.0","complexity":"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","group":"geo","acl":"@read, @geo, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["FROMMEMBER","FROMLONLAT"]},{"type":"enum","values":["",""]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["COUNT","ANY"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"}]},{"syntax":"GEOSEARCHSTORE destination source <FROMMEMBER member |\n  FROMLONLAT longitude latitude> <BYRADIUS radius <M | KM | FT | MI>\n  | BYBOX width height <M | KM | FT | MI>> [ASC | DESC] [COUNT count\n  [ANY]] [STOREDIST]","command":"GEOSEARCHSTORE","summary":"Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.","since":"6.2.0","complexity":"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","group":"geo","acl":"@write, @geo, @slow","arguments":[{"type":"single","name":"destination"},{"type":"single","name":"source"},{"type":"enum","values":["FROMMEMBER","FROMLONLAT"]},{"type":"enum","values":["",""]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["COUNT","ANY"]},{"type":"flag","value":"STOREDIST"}]},{"syntax":"GET key","command":"GET","summary":"Returns the string value of a key.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@read, @string, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"GETBIT key offset","command":"GETBIT","summary":"Returns a bit value by offset.","since":"2.2.0","complexity":"O(1)","group":"bitmap","acl":"@read, @bitmap, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"offset"}]},{"syntax":"GETDEL key","command":"GETDEL","summary":"Returns the string value of a key after deleting the key.","since":"6.2.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"GETEX key [EX seconds | PX milliseconds | EXAT unix-time-seconds |\n  PXAT unix-time-milliseconds | PERSIST]","command":"GETEX","summary":"Returns the string value of a key after setting its expiration time.","since":"6.2.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["EX","PX","EXAT","PXAT","PERSIST"]}]},{"syntax":"GETRANGE key start end","command":"GETRANGE","summary":"Returns a substring of the string stored at a key.","since":"2.4.0","complexity":"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","group":"string","acl":"@read, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"end"}]},{"syntax":"GETSET key value","command":"GETSET","summary":"Returns the previous string value of a key after setting it to a new value.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"}]},{"syntax":"HDEL key field [field ...]","command":"HDEL","summary":"Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.","since":"2.0.0","complexity":"O(N) where N is the number of fields to be removed.","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"field"}]},{"syntax":"HELLO [protover [AUTH username password] [SETNAME clientname]]","command":"HELLO","summary":"Handshakes with the Redis server.","since":"6.0.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[{"type":"enum","values":["","AUTH","SETNAME"]}]},{"syntax":"HEXISTS key field","command":"HEXISTS","summary":"Determines whether a field exists in a hash.","since":"2.0.0","complexity":"O(1)","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"}]},{"syntax":"HEXPIRE key seconds [NX | XX | GT | LT] FIELDS numfields field\n  [field ...]","command":"HEXPIRE","summary":"Set expiry for hash field using relative time to expire (seconds)","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"seconds"},{"type":"enum","values":["NX","XX","GT","LT"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HEXPIREAT key unix-time-seconds [NX | XX | GT | LT] FIELDS numfields\n  field [field ...]","command":"HEXPIREAT","summary":"Set expiry for hash field using an absolute Unix timestamp (seconds)","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"unix-time-seconds"},{"type":"enum","values":["NX","XX","GT","LT"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HEXPIRETIME key FIELDS numfields field [field ...]","command":"HEXPIRETIME","summary":"Returns the expiration time of a hash field as a Unix timestamp, in seconds.","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HGET key field","command":"HGET","summary":"Returns the value of a field in a hash.","since":"2.0.0","complexity":"O(1)","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"}]},{"syntax":"HGETALL key","command":"HGETALL","summary":"Returns all fields and values in a hash.","since":"2.0.0","complexity":"O(N) where N is the size of the hash.","group":"hash","acl":"@read, @hash, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"HGETDEL key FIELDS numfields field [field ...]","command":"HGETDEL","summary":"Returns the value of a field and deletes it from the hash.","since":"8.0.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HGETEX key [EX seconds | PX milliseconds | EXAT unix-time-seconds |\n  PXAT unix-time-milliseconds | PERSIST] FIELDS numfields field\n  [field ...]","command":"HGETEX","summary":"Get the value of one or more fields of a given hash key, and optionally set their expiration.","since":"8.0.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["EX","PX","EXAT","PXAT","PERSIST"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HINCRBY key field increment","command":"HINCRBY","summary":"Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.","since":"2.0.0","complexity":"O(1)","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"},{"type":"single","name":"increment"}]},{"syntax":"HINCRBYFLOAT key field increment","command":"HINCRBYFLOAT","summary":"Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.","since":"2.6.0","complexity":"O(1)","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"},{"type":"single","name":"increment"}]},{"syntax":"HKEYS key","command":"HKEYS","summary":"Returns all fields in a hash.","since":"2.0.0","complexity":"O(N) where N is the size of the hash.","group":"hash","acl":"@read, @hash, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"HLEN key","command":"HLEN","summary":"Returns the number of fields in a hash.","since":"2.0.0","complexity":"O(1)","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"HMGET key field [field ...]","command":"HMGET","summary":"Returns the values of all fields in a hash.","since":"2.0.0","complexity":"O(N) where N is the number of fields being requested.","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"field"}]},{"syntax":"HMSET key field value [field value ...]","command":"HMSET","summary":"Sets the values of multiple fields.","since":"2.0.0","complexity":"O(N) where N is the number of fields being set.","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"field value"}]},{"syntax":"HPERSIST key FIELDS numfields field [field ...]","command":"HPERSIST","summary":"Removes the expiration time for each specified field","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HPEXPIRE key milliseconds [NX | XX | GT | LT] FIELDS numfields field\n  [field ...]","command":"HPEXPIRE","summary":"Set expiry for hash field using relative time to expire (milliseconds)","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"milliseconds"},{"type":"enum","values":["NX","XX","GT","LT"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HPEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]\n  FIELDS numfields field [field ...]","command":"HPEXPIREAT","summary":"Set expiry for hash field using an absolute Unix timestamp (milliseconds)","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"unix-time-milliseconds"},{"type":"enum","values":["NX","XX","GT","LT"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HPEXPIRETIME key FIELDS numfields field [field ...]","command":"HPEXPIRETIME","summary":"Returns the expiration time of a hash field as a Unix timestamp, in msec.","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HPTTL key FIELDS numfields field [field ...]","command":"HPTTL","summary":"Returns the TTL in milliseconds of a hash field.","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HRANDFIELD key [count [WITHVALUES]]","command":"HRANDFIELD","summary":"Returns one or more random fields from a hash.","since":"6.2.0","complexity":"O(N) where N is the number of fields returned","group":"hash","acl":"@read, @hash, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["","WITHVALUES"]}]},{"syntax":"HSCAN key cursor [MATCH pattern] [COUNT count] [NOVALUES]","command":"HSCAN","summary":"Iterates over fields and values of a hash.","since":"2.8.0","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"hash","acl":"@read, @hash, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"cursor"},{"type":"arg","key":"MATCH","arg":"pattern","detail":"pattern"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"flag","value":"NOVALUES"}]},{"syntax":"HSET key field value [field value ...]","command":"HSET","summary":"Creates or modifies the value of a field in a hash.","since":"2.0.0","complexity":"O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"field value"}]},{"syntax":"HSETEX key [FNX | FXX] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]\n  FIELDS numfields field value [field value ...]","command":"HSETEX","summary":"Set the value of one or more fields of a given hash key, and optionally set their expiration.","since":"8.0.0","complexity":"O(N) where N is the number of fields being set.","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["FNX","FXX"]},{"type":"enum","values":["EX","PX","EXAT","PXAT","KEEPTTL"]},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HSETNX key field value","command":"HSETNX","summary":"Sets the value of a field in a hash only when the field doesn't exist.","since":"2.0.0","complexity":"O(1)","group":"hash","acl":"@write, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"},{"type":"single","name":"value"}]},{"syntax":"HSTRLEN key field","command":"HSTRLEN","summary":"Returns the length of the value of a field.","since":"3.2.0","complexity":"O(1)","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"field"}]},{"syntax":"HTTL key FIELDS numfields field [field ...]","command":"HTTL","summary":"Returns the TTL in seconds of a hash field.","since":"7.4.0","complexity":"O(N) where N is the number of specified fields","group":"hash","acl":"@read, @hash, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"FIELDS","arg":"fields","detail":"fields"}]},{"syntax":"HVALS key","command":"HVALS","summary":"Returns all values in a hash.","since":"2.0.0","complexity":"O(N) where N is the size of the hash.","group":"hash","acl":"@read, @hash, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"INCR key","command":"INCR","summary":"Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"INCRBY key increment","command":"INCRBY","summary":"Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"increment"}]},{"syntax":"INCRBYFLOAT key increment","command":"INCRBYFLOAT","summary":"Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.","since":"2.6.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"increment"}]},{"syntax":"INFO [section [section ...]]","command":"INFO","summary":"Returns information and statistics about the server.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@slow, @dangerous","arguments":[{"type":"many","name":"section"}]},{"syntax":"JSON.ARRAPPEND key [path] value [value ...]","command":"JSON.ARRAPPEND","summary":"Append one or more json values into the array at path after the last element in it.","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"many","name":"value"}]},{"syntax":"JSON.ARRINDEX key path value [start [stop]]","command":"JSON.ARRINDEX","summary":"Returns the index of the first occurrence of a JSON scalar value in the array at path","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"},{"type":"enum","values":["",""]}]},{"syntax":"JSON.ARRINSERT key path index value [value ...]","command":"JSON.ARRINSERT","summary":"Inserts the JSON scalar(s) value at the specified index in the array at path","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"index"},{"type":"many","name":"value"}]},{"syntax":"JSON.ARRLEN key [path]","command":"JSON.ARRLEN","summary":"Returns the length of the array at path","since":"1.0.0","complexity":"O(1) where path is evaluated to a single value, O(N) where path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.ARRPOP key [path [index]]","command":"JSON.ARRPOP","summary":"Removes and returns the element at the specified index in the array at path","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the array and the specified index is not the last element, O(1) when path is evaluated to a single value and the specified index is the last element, or O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["",""]}]},{"syntax":"JSON.ARRTRIM key path start stop","command":"JSON.ARRTRIM","summary":"Trims the array at path to contain only the specified inclusive range of indices from start to stop","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"start"},{"type":"single","name":"stop"}]},{"syntax":"JSON.CLEAR key [path]","command":"JSON.CLEAR","summary":"Clears all values from an array or an object and sets numeric values to `0`","since":"2.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the values, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.DEBUG","command":"JSON.DEBUG","summary":"Debugging container command","since":"1.0.0","complexity":"N/A","group":"json","acl":"","arguments":[]},{"syntax":"JSON.DEBUG HELP","command":"JSON.DEBUG HELP","summary":"Shows helpful information","since":"1.0.0","complexity":"N/A","group":"json","acl":"","arguments":[]},{"syntax":"JSON.DEBUG MEMORY key [path]","command":"JSON.DEBUG MEMORY","summary":"Reports the size in bytes of a key","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.DEL key [path]","command":"JSON.DEL","summary":"Deletes a value","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.FORGET key [path]","command":"JSON.FORGET","summary":"Deletes a value","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.GET key [INDENT indent] [NEWLINE newline] [SPACE space] [path\n  [path ...]]","command":"JSON.GET","summary":"Gets the value at one or more paths in JSON serialized form","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"INDENT","arg":"indent","detail":"indent"},{"type":"arg","key":"NEWLINE","arg":"newline","detail":"newline"},{"type":"arg","key":"SPACE","arg":"space","detail":"space"},{"type":"many","name":"path"}]},{"syntax":"JSON.MERGE key path value","command":"JSON.MERGE","summary":"Merges a given JSON value into matching paths. Consequently, JSON values at matching paths are updated, deleted, or expanded with new children","since":"2.6.0","complexity":"O(M+N) when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, O(M+N) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"}]},{"syntax":"JSON.MGET key [key ...] path","command":"JSON.MGET","summary":"Returns the values at a path from one or more keys","since":"1.0.0","complexity":"O(M*N) when path is evaluated to a single value where M is the number of keys and N is the size of the value, O(N1+N2+...+Nm) when path is evaluated to multiple values where m is the number of keys and Ni is the size of the i-th key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"many","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.MSET key path value [key path value ...]","command":"JSON.MSET","summary":"Sets or updates the JSON value of one or more keys","since":"2.6.0","complexity":"O(K*(M+N)) where k is the number of keys in the command, when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, or O(K*(M+N)) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"many","name":"key path value"}]},{"syntax":"JSON.NUMINCRBY key path value","command":"JSON.NUMINCRBY","summary":"Increments the numeric value at path by a value","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"}]},{"syntax":"JSON.NUMMULTBY key path value","command":"JSON.NUMMULTBY","summary":"Multiplies the numeric value at path by a value","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"}]},{"syntax":"JSON.OBJKEYS key [path]","command":"JSON.OBJKEYS","summary":"Returns the JSON keys of the object at path","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value, where N is the number of keys in the object, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.OBJLEN key [path]","command":"JSON.OBJLEN","summary":"Returns the number of keys of the object at path","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.RESP key [path]","command":"JSON.RESP","summary":"Returns the JSON value at path in Redis Serialization Protocol (RESP)","since":"1.0.0","complexity":"O(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.SET key path value [NX | XX]","command":"JSON.SET","summary":"Sets or updates the JSON value at a path","since":"1.0.0","complexity":"O(M+N) when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, O(M+N) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"},{"type":"enum","values":["NX","XX"]}]},{"syntax":"JSON.STRAPPEND key [path] value","command":"JSON.STRAPPEND","summary":"Appends a string to a JSON string value at path","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"},{"type":"single","name":"value"}]},{"syntax":"JSON.STRLEN key [path]","command":"JSON.STRLEN","summary":"Returns the length of the JSON String at path in key","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.TOGGLE key path","command":"JSON.TOGGLE","summary":"Toggles a boolean value","since":"2.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"JSON.TYPE key [path]","command":"JSON.TYPE","summary":"Returns the type of the JSON value at path","since":"1.0.0","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","acl":"@json, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"path"}]},{"syntax":"KEYS pattern","command":"KEYS","summary":"Returns all key names that match a pattern.","since":"1.0.0","complexity":"O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.","group":"generic","acl":"@keyspace, @read, @slow, @dangerous","arguments":[{"type":"single","name":"pattern"}]},{"syntax":"LASTSAVE","command":"LASTSAVE","summary":"Returns the Unix timestamp of the last successful save to disk.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@admin, @fast, @dangerous","arguments":[]},{"syntax":"LATENCY","command":"LATENCY","summary":"A container for latency diagnostics commands.","since":"2.8.13","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"LATENCY DOCTOR","command":"LATENCY DOCTOR","summary":"Returns a human-readable latency analysis report.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"LATENCY GRAPH event","command":"LATENCY GRAPH","summary":"Returns a latency graph for an event.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"event"}]},{"syntax":"LATENCY HELP","command":"LATENCY HELP","summary":"Returns helpful text about the different subcommands.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"LATENCY HISTOGRAM [command [command ...]]","command":"LATENCY HISTOGRAM","summary":"Returns the cumulative distribution of latencies of a subset or all commands.","since":"7.0.0","complexity":"O(N) where N is the number of commands with latency information being retrieved.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"command"}]},{"syntax":"LATENCY HISTORY event","command":"LATENCY HISTORY","summary":"Returns timestamp-latency samples for an event.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"event"}]},{"syntax":"LATENCY LATEST","command":"LATENCY LATEST","summary":"Returns the latest latency samples for all events.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"LATENCY RESET [event [event ...]]","command":"LATENCY RESET","summary":"Resets the latency data for one or more events.","since":"2.8.13","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"many","name":"event"}]},{"syntax":"LCS key1 key2 [LEN] [IDX] [MINMATCHLEN min-match-len] [WITHMATCHLEN]","command":"LCS","summary":"Finds the longest common substring.","since":"7.0.0","complexity":"O(N*M) where N and M are the lengths of s1 and s2, respectively","group":"string","acl":"@read, @string, @slow","arguments":[{"type":"single","name":"key1"},{"type":"single","name":"key2"},{"type":"flag","value":"LEN"},{"type":"flag","value":"IDX"},{"type":"arg","key":"MINMATCHLEN","arg":"min-match-len","detail":"min-match-len"},{"type":"flag","value":"WITHMATCHLEN"}]},{"syntax":"LINDEX key index","command":"LINDEX","summary":"Returns an element from a list by its index.","since":"1.0.0","complexity":"O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).","group":"list","acl":"@read, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"index"}]},{"syntax":"LINSERT key <BEFORE | AFTER> pivot element","command":"LINSERT","summary":"Inserts an element before or after another element in a list.","since":"2.2.0","complexity":"O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["BEFORE","AFTER"]},{"type":"single","name":"pivot"},{"type":"single","name":"element"}]},{"syntax":"LLEN key","command":"LLEN","summary":"Returns the length of a list.","since":"1.0.0","complexity":"O(1)","group":"list","acl":"@read, @list, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"LMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT>","command":"LMOVE","summary":"Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.","since":"6.2.0","complexity":"O(1)","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"enum","values":["LEFT","RIGHT"]}]},{"syntax":"LMPOP numkeys key [key ...] <LEFT | RIGHT> [COUNT count]","command":"LMPOP","summary":"Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.","since":"7.0.0","complexity":"O(N+M) where N is the number of provided keys and M is the number of elements returned.","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"LOLWUT [VERSION version]","command":"LOLWUT","summary":"Displays computer art and the Redis version","since":"5.0.0","complexity":null,"group":"server","acl":"@read, @fast","arguments":[{"type":"arg","key":"VERSION","arg":"version","detail":"version"}]},{"syntax":"LPOP key [count]","command":"LPOP","summary":"Returns the first elements in a list after removing it. Deletes the list if the last element was popped.","since":"1.0.0","complexity":"O(N) where N is the number of elements returned","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len]","command":"LPOS","summary":"Returns the index of matching elements in a list.","since":"6.0.6","complexity":"O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.","group":"list","acl":"@read, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"element"},{"type":"arg","key":"RANK","arg":"rank","detail":"rank"},{"type":"arg","key":"COUNT","arg":"num-matches","detail":"num-matches"},{"type":"arg","key":"MAXLEN","arg":"len","detail":"len"}]},{"syntax":"LPUSH key element [element ...]","command":"LPUSH","summary":"Prepends one or more elements to a list. Creates the key if it doesn't exist.","since":"1.0.0","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"element"}]},{"syntax":"LPUSHX key element [element ...]","command":"LPUSHX","summary":"Prepends one or more elements to a list only when the list exists.","since":"2.2.0","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"element"}]},{"syntax":"LRANGE key start stop","command":"LRANGE","summary":"Returns a range of elements from a list.","since":"1.0.0","complexity":"O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.","group":"list","acl":"@read, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"stop"}]},{"syntax":"LREM key count element","command":"LREM","summary":"Removes elements from a list. Deletes the list if the last element was removed.","since":"1.0.0","complexity":"O(N+M) where N is the length of the list and M is the number of elements removed.","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"},{"type":"single","name":"element"}]},{"syntax":"LSET key index element","command":"LSET","summary":"Sets the value of an element in a list by its index.","since":"1.0.0","complexity":"O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"index"},{"type":"single","name":"element"}]},{"syntax":"LTRIM key start stop","command":"LTRIM","summary":"Removes elements from both ends a list. Deletes the list if all elements were trimmed.","since":"1.0.0","complexity":"O(N) where N is the number of elements to be removed by the operation.","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"stop"}]},{"syntax":"MEMORY","command":"MEMORY","summary":"A container for memory diagnostics commands.","since":"4.0.0","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY DOCTOR","command":"MEMORY DOCTOR","summary":"Outputs a memory problems report.","since":"4.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY HELP","command":"MEMORY HELP","summary":"Returns helpful text about the different subcommands.","since":"4.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY MALLOC-STATS","command":"MEMORY MALLOC-STATS","summary":"Returns the allocator statistics.","since":"4.0.0","complexity":"Depends on how much memory is allocated, could be slow","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY PURGE","command":"MEMORY PURGE","summary":"Asks the allocator to release memory.","since":"4.0.0","complexity":"Depends on how much memory is allocated, could be slow","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY STATS","command":"MEMORY STATS","summary":"Returns details about memory usage.","since":"4.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"MEMORY USAGE key [SAMPLES count]","command":"MEMORY USAGE","summary":"Estimates the memory usage of a key.","since":"4.0.0","complexity":"O(N) where N is the number of samples.","group":"server","acl":"@read, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"SAMPLES","arg":"count","detail":"count"}]},{"syntax":"MGET key [key ...]","command":"MGET","summary":"Atomically returns the string values of one or more keys.","since":"1.0.0","complexity":"O(N) where N is the number of keys to retrieve.","group":"string","acl":"@read, @string, @fast","arguments":[{"type":"many","name":"key"}]},{"syntax":"MIGRATE host port <key | \"\"> destination-db timeout [COPY] [REPLACE]\n  [AUTH password | AUTH2 username password] [KEYS key [key ...]]","command":"MIGRATE","summary":"Atomically transfers a key from one Redis instance to another.","since":"2.6.0","complexity":"This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.","group":"generic","acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"single","name":"host"},{"type":"single","name":"port"},{"type":"enum","values":["",""]},{"type":"single","name":"destination-db"},{"type":"single","name":"timeout"},{"type":"flag","value":"COPY"},{"type":"flag","value":"REPLACE"},{"type":"enum","values":["AUTH","AUTH2"]},{"type":"arg","key":"KEYS","arg":"keys","detail":"keys"}]},{"syntax":"MODULE","command":"MODULE","summary":"A container for module commands.","since":"4.0.0","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"MODULE HELP","command":"MODULE HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"MODULE LIST","command":"MODULE LIST","summary":"Returns all loaded modules.","since":"4.0.0","complexity":"O(N) where N is the number of loaded modules.","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"MODULE LOAD path [arg [arg ...]]","command":"MODULE LOAD","summary":"Loads a module.","since":"4.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"path"},{"type":"many","name":"arg"}]},{"syntax":"MODULE LOADEX path [CONFIG name value [CONFIG name value ...]]\n  [ARGS args [args ...]]","command":"MODULE LOADEX","summary":"Loads a module using extended parameters.","since":"7.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"path"},{"type":"arg","key":"CONFIG","arg":"configs","detail":"configs"},{"type":"arg","key":"ARGS","arg":"args","detail":"args"}]},{"syntax":"MODULE UNLOAD name","command":"MODULE UNLOAD","summary":"Unloads a module.","since":"4.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"name"}]},{"syntax":"MONITOR","command":"MONITOR","summary":"Listens for all requests received by the server in real-time.","since":"1.0.0","complexity":null,"group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"MOVE key db","command":"MOVE","summary":"Moves a key to another database.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"db"}]},{"syntax":"MSET key value [key value ...]","command":"MSET","summary":"Atomically creates or modifies the string values of one or more keys.","since":"1.0.1","complexity":"O(N) where N is the number of keys to set.","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"many","name":"key value"}]},{"syntax":"MSETNX key value [key value ...]","command":"MSETNX","summary":"Atomically modifies the string values of one or more keys only when all keys don't exist.","since":"1.0.1","complexity":"O(N) where N is the number of keys to set.","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"many","name":"key value"}]},{"syntax":"MULTI","command":"MULTI","summary":"Starts a transaction.","since":"1.2.0","complexity":"O(1)","group":"transactions","acl":"@fast, @transaction","arguments":[]},{"syntax":"OBJECT","command":"OBJECT","summary":"A container for object introspection commands.","since":"2.2.3","complexity":"Depends on subcommand.","group":"generic","acl":"@slow","arguments":[]},{"syntax":"OBJECT ENCODING key","command":"OBJECT ENCODING","summary":"Returns the internal encoding of a Redis object.","since":"2.2.3","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"OBJECT FREQ key","command":"OBJECT FREQ","summary":"Returns the logarithmic access frequency counter of a Redis object.","since":"4.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"OBJECT HELP","command":"OBJECT HELP","summary":"Returns helpful text about the different subcommands.","since":"6.2.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @slow","arguments":[]},{"syntax":"OBJECT IDLETIME key","command":"OBJECT IDLETIME","summary":"Returns the time since the last access to a Redis object.","since":"2.2.3","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"OBJECT REFCOUNT key","command":"OBJECT REFCOUNT","summary":"Returns the reference count of a value of a key.","since":"2.2.3","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"PERSIST key","command":"PERSIST","summary":"Removes the expiration time of a key.","since":"2.2.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"PEXPIRE key milliseconds [NX | XX | GT | LT]","command":"PEXPIRE","summary":"Sets the expiration time of a key in milliseconds.","since":"2.6.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"milliseconds"},{"type":"enum","values":["NX","XX","GT","LT"]}]},{"syntax":"PEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]","command":"PEXPIREAT","summary":"Sets the expiration time of a key to a Unix milliseconds timestamp.","since":"2.6.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"unix-time-milliseconds"},{"type":"enum","values":["NX","XX","GT","LT"]}]},{"syntax":"PEXPIRETIME key","command":"PEXPIRETIME","summary":"Returns the expiration time of a key as a Unix milliseconds timestamp.","since":"7.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"PFADD key [element [element ...]]","command":"PFADD","summary":"Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.","since":"2.8.9","complexity":"O(1) to add every element.","group":"hyperloglog","acl":"@write, @hyperloglog, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"element"}]},{"syntax":"PFCOUNT key [key ...]","command":"PFCOUNT","summary":"Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).","since":"2.8.9","complexity":"O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.","group":"hyperloglog","acl":"@read, @hyperloglog, @slow","arguments":[{"type":"many","name":"key"}]},{"syntax":"PFDEBUG subcommand key","command":"PFDEBUG","summary":"Internal commands for debugging HyperLogLog values.","since":"2.8.9","complexity":"N/A","group":"hyperloglog","acl":"@write, @hyperloglog, @admin, @slow, @dangerous","arguments":[{"type":"single","name":"subcommand"},{"type":"single","name":"key"}]},{"syntax":"PFMERGE destkey [sourcekey [sourcekey ...]]","command":"PFMERGE","summary":"Merges one or more HyperLogLog values into a single key.","since":"2.8.9","complexity":"O(N) to merge N HyperLogLogs, but with high constant times.","group":"hyperloglog","acl":"@write, @hyperloglog, @slow","arguments":[{"type":"single","name":"destkey"},{"type":"many","name":"sourcekey"}]},{"syntax":"PFSELFTEST","command":"PFSELFTEST","summary":"An internal command for testing HyperLogLog values.","since":"2.8.9","complexity":"N/A","group":"hyperloglog","acl":"@hyperloglog, @admin, @slow, @dangerous","arguments":[]},{"syntax":"PING [message]","command":"PING","summary":"Returns the server's liveliness response.","since":"1.0.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[{"type":"single","name":"message"}]},{"syntax":"PSETEX key milliseconds value","command":"PSETEX","summary":"Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.","since":"2.6.0","complexity":"O(1)","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"milliseconds"},{"type":"single","name":"value"}]},{"syntax":"PSUBSCRIBE pattern [pattern ...]","command":"PSUBSCRIBE","summary":"Listens for messages published to channels that match one or more patterns.","since":"2.0.0","complexity":"O(N) where N is the number of patterns to subscribe to.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"pattern"}]},{"syntax":"PSYNC replicationid offset","command":"PSYNC","summary":"An internal command used in replication.","since":"2.8.0","complexity":null,"group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"replicationid"},{"type":"single","name":"offset"}]},{"syntax":"PTTL key","command":"PTTL","summary":"Returns the expiration time in milliseconds of a key.","since":"2.6.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"PUBLISH channel message","command":"PUBLISH","summary":"Posts a message to a channel.","since":"2.0.0","complexity":"O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).","group":"pubsub","acl":"@pubsub, @fast","arguments":[{"type":"single","name":"channel"},{"type":"single","name":"message"}]},{"syntax":"PUBSUB","command":"PUBSUB","summary":"A container for Pub/Sub commands.","since":"2.8.0","complexity":"Depends on subcommand.","group":"pubsub","acl":"@slow","arguments":[]},{"syntax":"PUBSUB CHANNELS [pattern]","command":"PUBSUB CHANNELS","summary":"Returns the active channels.","since":"2.8.0","complexity":"O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"single","name":"pattern"}]},{"syntax":"PUBSUB HELP","command":"PUBSUB HELP","summary":"Returns helpful text about the different subcommands.","since":"6.2.0","complexity":"O(1)","group":"pubsub","acl":"@slow","arguments":[]},{"syntax":"PUBSUB NUMPAT","command":"PUBSUB NUMPAT","summary":"Returns a count of unique pattern subscriptions.","since":"2.8.0","complexity":"O(1)","group":"pubsub","acl":"@pubsub, @slow","arguments":[]},{"syntax":"PUBSUB NUMSUB [channel [channel ...]]","command":"PUBSUB NUMSUB","summary":"Returns a count of subscribers to channels.","since":"2.8.0","complexity":"O(N) for the NUMSUB subcommand, where N is the number of requested channels","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"channel"}]},{"syntax":"PUBSUB SHARDCHANNELS [pattern]","command":"PUBSUB SHARDCHANNELS","summary":"Returns the active shard channels.","since":"7.0.0","complexity":"O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"single","name":"pattern"}]},{"syntax":"PUBSUB SHARDNUMSUB [shardchannel [shardchannel ...]]","command":"PUBSUB SHARDNUMSUB","summary":"Returns the count of subscribers of shard channels.","since":"7.0.0","complexity":"O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"shardchannel"}]},{"syntax":"PUNSUBSCRIBE [pattern [pattern ...]]","command":"PUNSUBSCRIBE","summary":"Stops listening to messages published to channels that match one or more patterns.","since":"2.0.0","complexity":"O(N) where N is the number of patterns to unsubscribe.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"pattern"}]},{"syntax":"QUIT","command":"QUIT","summary":"Closes the connection.","since":"1.0.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[]},{"syntax":"RANDOMKEY","command":"RANDOMKEY","summary":"Returns a random key name from the database.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @slow","arguments":[]},{"syntax":"READONLY","command":"READONLY","summary":"Enables read-only queries for a connection to a Redis Cluster replica node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@fast, @connection","arguments":[]},{"syntax":"READWRITE","command":"READWRITE","summary":"Enables read-write queries for a connection to a Reids Cluster replica node.","since":"3.0.0","complexity":"O(1)","group":"cluster","acl":"@fast, @connection","arguments":[]},{"syntax":"RENAME key newkey","command":"RENAME","summary":"Renames a key and overwrites the destination.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"newkey"}]},{"syntax":"RENAMENX key newkey","command":"RENAMENX","summary":"Renames a key only when the target key name doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"newkey"}]},{"syntax":"REPLCONF","command":"REPLCONF","summary":"An internal command for configuring the replication stream.","since":"3.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"REPLICAOF <host port | NO ONE>","command":"REPLICAOF","summary":"Configures a server as replica of another, or promotes it to a master.","since":"5.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["",""]}]},{"syntax":"RESET","command":"RESET","summary":"Resets the connection.","since":"6.2.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[]},{"syntax":"RESTORE key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]","command":"RESTORE","summary":"Creates a key from the serialized representation of a value.","since":"2.6.0","complexity":"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","group":"generic","acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"single","name":"key"},{"type":"single","name":"ttl"},{"type":"single","name":"serialized-value"},{"type":"flag","value":"REPLACE"},{"type":"flag","value":"ABSTTL"},{"type":"arg","key":"IDLETIME","arg":"seconds","detail":"seconds"},{"type":"arg","key":"FREQ","arg":"frequency","detail":"frequency"}]},{"syntax":"RESTORE-ASKING key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]","command":"RESTORE-ASKING","summary":"An internal command for migrating keys in a cluster.","since":"3.0.0","complexity":"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","group":"server","acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"single","name":"key"},{"type":"single","name":"ttl"},{"type":"single","name":"serialized-value"},{"type":"flag","value":"REPLACE"},{"type":"flag","value":"ABSTTL"},{"type":"arg","key":"IDLETIME","arg":"seconds","detail":"seconds"},{"type":"arg","key":"FREQ","arg":"frequency","detail":"frequency"}]},{"syntax":"ROLE","command":"ROLE","summary":"Returns the replication role.","since":"2.8.12","complexity":"O(1)","group":"server","acl":"@admin, @fast, @dangerous","arguments":[]},{"syntax":"RPOP key [count]","command":"RPOP","summary":"Returns and removes the last elements of a list. Deletes the list if the last element was popped.","since":"1.0.0","complexity":"O(N) where N is the number of elements returned","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"RPOPLPUSH source destination","command":"RPOPLPUSH","summary":"Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.","since":"1.2.0","complexity":"O(1)","group":"list","acl":"@write, @list, @slow","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"}]},{"syntax":"RPUSH key element [element ...]","command":"RPUSH","summary":"Appends one or more elements to a list. Creates the key if it doesn't exist.","since":"1.0.0","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"element"}]},{"syntax":"RPUSHX key element [element ...]","command":"RPUSHX","summary":"Appends an element to a list only when the list exists.","since":"2.2.0","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","acl":"@write, @list, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"element"}]},{"syntax":"SADD key member [member ...]","command":"SADD","summary":"Adds one or more members to a set. Creates the key if it doesn't exist.","since":"1.0.0","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"set","acl":"@write, @set, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"SAVE","command":"SAVE","summary":"Synchronously saves the database(s) to disk.","since":"1.0.0","complexity":"O(N) where N is the total number of keys in all databases","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]","command":"SCAN","summary":"Iterates over the key names in the database.","since":"2.8.0","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"generic","acl":"@keyspace, @read, @slow","arguments":[{"type":"single","name":"cursor"},{"type":"arg","key":"MATCH","arg":"pattern","detail":"pattern"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"arg","key":"TYPE","arg":"type","detail":"type"}]},{"syntax":"SCARD key","command":"SCARD","summary":"Returns the number of members in a set.","since":"1.0.0","complexity":"O(1)","group":"set","acl":"@read, @set, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"SCRIPT","command":"SCRIPT","summary":"A container for Lua scripts management commands.","since":"2.6.0","complexity":"Depends on subcommand.","group":"scripting","acl":"@slow","arguments":[]},{"syntax":"SCRIPT DEBUG <YES | SYNC | NO>","command":"SCRIPT DEBUG","summary":"Sets the debug mode of server-side Lua scripts.","since":"3.2.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"enum","values":["YES","SYNC","NO"]}]},{"syntax":"SCRIPT EXISTS sha1 [sha1 ...]","command":"SCRIPT EXISTS","summary":"Determines whether server-side Lua scripts exist in the script cache.","since":"2.6.0","complexity":"O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"many","name":"sha1"}]},{"syntax":"SCRIPT FLUSH [ASYNC | SYNC]","command":"SCRIPT FLUSH","summary":"Removes all server-side Lua scripts from the script cache.","since":"2.6.0","complexity":"O(N) with N being the number of scripts in cache","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}]},{"syntax":"SCRIPT HELP","command":"SCRIPT HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"SCRIPT KILL","command":"SCRIPT KILL","summary":"Terminates a server-side Lua script during execution.","since":"2.6.0","complexity":"O(1)","group":"scripting","acl":"@slow, @scripting","arguments":[]},{"syntax":"SCRIPT LOAD script","command":"SCRIPT LOAD","summary":"Loads a server-side Lua script to the script cache.","since":"2.6.0","complexity":"O(N) with N being the length in bytes of the script body.","group":"scripting","acl":"@slow, @scripting","arguments":[{"type":"single","name":"script"}]},{"syntax":"SDIFF key [key ...]","command":"SDIFF","summary":"Returns the difference of multiple sets.","since":"1.0.0","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"many","name":"key"}]},{"syntax":"SDIFFSTORE destination key [key ...]","command":"SDIFFSTORE","summary":"Stores the difference of multiple sets in a key.","since":"1.0.0","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","acl":"@write, @set, @slow","arguments":[{"type":"single","name":"destination"},{"type":"many","name":"key"}]},{"syntax":"SELECT index","command":"SELECT","summary":"Changes the selected database.","since":"1.0.0","complexity":"O(1)","group":"connection","acl":"@fast, @connection","arguments":[{"type":"single","name":"index"}]},{"syntax":"SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]","command":"SET","summary":"Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"},{"type":"enum","values":["NX","XX"]},{"type":"flag","value":"GET"},{"type":"enum","values":["EX","PX","EXAT","PXAT","KEEPTTL"]}]},{"syntax":"SETBIT key offset value","command":"SETBIT","summary":"Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.","since":"2.2.0","complexity":"O(1)","group":"bitmap","acl":"@write, @bitmap, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"offset"},{"type":"single","name":"value"}]},{"syntax":"SETEX key seconds value","command":"SETEX","summary":"Sets the string value and expiration time of a key. Creates the key if it doesn't exist.","since":"2.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"seconds"},{"type":"single","name":"value"}]},{"syntax":"SETNX key value","command":"SETNX","summary":"Set the string value of a key only when the key doesn't exist.","since":"1.0.0","complexity":"O(1)","group":"string","acl":"@write, @string, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"}]},{"syntax":"SETRANGE key offset value","command":"SETRANGE","summary":"Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.","since":"2.2.0","complexity":"O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.","group":"string","acl":"@write, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"offset"},{"type":"single","name":"value"}]},{"syntax":"SHUTDOWN [NOSAVE | SAVE] [NOW] [FORCE] [ABORT]","command":"SHUTDOWN","summary":"Synchronously saves the database(s) to disk and shuts down the Redis server.","since":"1.0.0","complexity":"O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["NOSAVE","SAVE"]},{"type":"flag","value":"NOW"},{"type":"flag","value":"FORCE"},{"type":"flag","value":"ABORT"}]},{"syntax":"SINTER key [key ...]","command":"SINTER","summary":"Returns the intersect of multiple sets.","since":"1.0.0","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"many","name":"key"}]},{"syntax":"SINTERCARD numkeys key [key ...] [LIMIT limit]","command":"SINTERCARD","summary":"Returns the number of members of the intersect of multiple sets.","since":"7.0.0","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"SINTERSTORE destination key [key ...]","command":"SINTERSTORE","summary":"Stores the intersect of multiple sets in a key.","since":"1.0.0","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","acl":"@write, @set, @slow","arguments":[{"type":"single","name":"destination"},{"type":"many","name":"key"}]},{"syntax":"SISMEMBER key member","command":"SISMEMBER","summary":"Determines whether a member belongs to a set.","since":"1.0.0","complexity":"O(1)","group":"set","acl":"@read, @set, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"}]},{"syntax":"SLAVEOF <host port | NO ONE>","command":"SLAVEOF","summary":"Sets a Redis server as a replica of another, or promotes it to being a master.","since":"1.0.0","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["",""]}]},{"syntax":"SLOWLOG","command":"SLOWLOG","summary":"A container for slow log commands.","since":"2.2.12","complexity":"Depends on subcommand.","group":"server","acl":"@slow","arguments":[]},{"syntax":"SLOWLOG GET [count]","command":"SLOWLOG GET","summary":"Returns the slow log's entries.","since":"2.2.12","complexity":"O(N) where N is the number of entries returned","group":"server","acl":"@admin, @slow, @dangerous","arguments":[{"type":"single","name":"count"}]},{"syntax":"SLOWLOG HELP","command":"SLOWLOG HELP","summary":"Show helpful text about the different subcommands","since":"6.2.0","complexity":"O(1)","group":"server","acl":"@slow","arguments":[]},{"syntax":"SLOWLOG LEN","command":"SLOWLOG LEN","summary":"Returns the number of entries in the slow log.","since":"2.2.12","complexity":"O(1)","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"SLOWLOG RESET","command":"SLOWLOG RESET","summary":"Clears all entries from the slow log.","since":"2.2.12","complexity":"O(N) where N is the number of entries in the slowlog","group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"SMEMBERS key","command":"SMEMBERS","summary":"Returns all members of a set.","since":"1.0.0","complexity":"O(N) where N is the set cardinality.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"SMISMEMBER key member [member ...]","command":"SMISMEMBER","summary":"Determines whether multiple members belong to a set.","since":"6.2.0","complexity":"O(N) where N is the number of elements being checked for membership","group":"set","acl":"@read, @set, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"SMOVE source destination member","command":"SMOVE","summary":"Moves a member from one set to another.","since":"1.0.0","complexity":"O(1)","group":"set","acl":"@write, @set, @fast","arguments":[{"type":"single","name":"source"},{"type":"single","name":"destination"},{"type":"single","name":"member"}]},{"syntax":"SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern\n  ...]] [ASC | DESC] [ALPHA] [STORE destination]","command":"SORT","summary":"Sorts the elements in a list, a set, or a sorted set, optionally storing the result.","since":"1.0.0","complexity":"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","group":"generic","acl":"@write, @set, @sortedset, @list, @slow, @dangerous","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"BY","arg":"by-pattern","detail":"by-pattern"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"},{"type":"arg","key":"GET","arg":"get-pattern","detail":"get-pattern"},{"type":"enum","values":["ASC","DESC"]},{"type":"flag","value":"ALPHA"},{"type":"arg","key":"STORE","arg":"destination","detail":"destination"}]},{"syntax":"SORT_RO key [BY pattern] [LIMIT offset count] [GET pattern [GET\n  pattern ...]] [ASC | DESC] [ALPHA]","command":"SORT_RO","summary":"Returns the sorted elements of a list, a set, or a sorted set.","since":"7.0.0","complexity":"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","group":"generic","acl":"@read, @set, @sortedset, @list, @slow, @dangerous","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"BY","arg":"by-pattern","detail":"by-pattern"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"},{"type":"arg","key":"GET","arg":"get-pattern","detail":"get-pattern"},{"type":"enum","values":["ASC","DESC"]},{"type":"flag","value":"ALPHA"}]},{"syntax":"SPOP key [count]","command":"SPOP","summary":"Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.","since":"1.0.0","complexity":"Without the count argument O(1), otherwise O(N) where N is the value of the passed count.","group":"set","acl":"@write, @set, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"SPUBLISH shardchannel message","command":"SPUBLISH","summary":"Post a message to a shard channel","since":"7.0.0","complexity":"O(N) where N is the number of clients subscribed to the receiving shard channel.","group":"pubsub","acl":"@pubsub, @fast","arguments":[{"type":"single","name":"shardchannel"},{"type":"single","name":"message"}]},{"syntax":"SRANDMEMBER key [count]","command":"SRANDMEMBER","summary":"Get one or multiple random members from a set","since":"1.0.0","complexity":"Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"SREM key member [member ...]","command":"SREM","summary":"Removes one or more members from a set. Deletes the set if the last member was removed.","since":"1.0.0","complexity":"O(N) where N is the number of members to be removed.","group":"set","acl":"@write, @set, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"SSCAN key cursor [MATCH pattern] [COUNT count]","command":"SSCAN","summary":"Iterates over members of a set.","since":"2.8.0","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"cursor"},{"type":"arg","key":"MATCH","arg":"pattern","detail":"pattern"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"SSUBSCRIBE shardchannel [shardchannel ...]","command":"SSUBSCRIBE","summary":"Listens for messages published to shard channels.","since":"7.0.0","complexity":"O(N) where N is the number of shard channels to subscribe to.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"shardchannel"}]},{"syntax":"STRLEN key","command":"STRLEN","summary":"Returns the length of a string value.","since":"2.2.0","complexity":"O(1)","group":"string","acl":"@read, @string, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"SUBSCRIBE channel [channel ...]","command":"SUBSCRIBE","summary":"Listens for messages published to channels.","since":"2.0.0","complexity":"O(N) where N is the number of channels to subscribe to.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"channel"}]},{"syntax":"SUBSTR key start end","command":"SUBSTR","summary":"Returns a substring from a string value.","since":"1.0.0","complexity":"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","group":"string","acl":"@read, @string, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"end"}]},{"syntax":"SUNION key [key ...]","command":"SUNION","summary":"Returns the union of multiple sets.","since":"1.0.0","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","acl":"@read, @set, @slow","arguments":[{"type":"many","name":"key"}]},{"syntax":"SUNIONSTORE destination key [key ...]","command":"SUNIONSTORE","summary":"Stores the union of multiple sets in a key.","since":"1.0.0","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","acl":"@write, @set, @slow","arguments":[{"type":"single","name":"destination"},{"type":"many","name":"key"}]},{"syntax":"SUNSUBSCRIBE [shardchannel [shardchannel ...]]","command":"SUNSUBSCRIBE","summary":"Stops listening to messages posted to shard channels.","since":"7.0.0","complexity":"O(N) where N is the number of shard channels to unsubscribe.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"shardchannel"}]},{"syntax":"SWAPDB index1 index2","command":"SWAPDB","summary":"Swaps two Redis databases.","since":"4.0.0","complexity":"O(N) where N is the count of clients watching or blocking on keys from both databases.","group":"server","acl":"@keyspace, @write, @fast, @dangerous","arguments":[{"type":"single","name":"index1"},{"type":"single","name":"index2"}]},{"syntax":"SYNC","command":"SYNC","summary":"An internal command used in replication.","since":"1.0.0","complexity":null,"group":"server","acl":"@admin, @slow, @dangerous","arguments":[]},{"syntax":"TDIGEST.ADD key value [value ...]","command":"TDIGEST.ADD","summary":"Adds one or more observations to a t-digest sketch","since":"2.4.0","complexity":"O(N) , where N is the number of samples to add","group":"tdigest","acl":"@tdigest, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"value"}]},{"syntax":"TDIGEST.BYRANK key rank [rank ...]","command":"TDIGEST.BYRANK","summary":"Returns, for each input rank, an estimation of the value (floating-point) with that rank","since":"2.4.0","complexity":"O(N) where N is the number of ranks specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"rank"}]},{"syntax":"TDIGEST.BYREVRANK key reverse_rank [reverse_rank ...]","command":"TDIGEST.BYREVRANK","summary":"Returns, for each input reverse rank, an estimation of the value (floating-point) with that reverse rank","since":"2.4.0","complexity":"O(N) where N is the number of reverse ranks specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"reverse_rank"}]},{"syntax":"TDIGEST.CDF key value [value ...]","command":"TDIGEST.CDF","summary":"Returns, for each input value, an estimation of the fraction (floating-point) of (observations smaller than the given value + half the observations equal to the given value)","since":"2.4.0","complexity":"O(N) where N is the number of values specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"value"}]},{"syntax":"TDIGEST.CREATE key [COMPRESSION compression]","command":"TDIGEST.CREATE","summary":"Allocates memory and initializes a new t-digest sketch","since":"2.4.0","complexity":"O(1)","group":"tdigest","acl":"@tdigest, @write","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"COMPRESSION","arg":"compression","detail":"compression"}]},{"syntax":"TDIGEST.INFO key","command":"TDIGEST.INFO","summary":"Returns information and statistics about a t-digest sketch","since":"2.4.0","complexity":"O(1)","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"}]},{"syntax":"TDIGEST.MAX key","command":"TDIGEST.MAX","summary":"Returns the maximum observation value from a t-digest sketch","since":"2.4.0","complexity":"O(1)","group":"tdigest","acl":"@tdigest, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"TDIGEST.MERGE destination-key numkeys source-key [source-key ...]\n  [COMPRESSION compression] [OVERRIDE]","command":"TDIGEST.MERGE","summary":"Merges multiple t-digest sketches into a single sketch","since":"2.4.0","complexity":"O(N*K), where N is the number of centroids and K being the number of input sketches","group":"tdigest","acl":"@tdigest, @write, @slow","arguments":[{"type":"single","name":"destination-key"},{"type":"single","name":"numkeys"},{"type":"many","name":"source-key"},{"type":"enum","values":["COMPRESSION",""]},{"type":"flag","value":"OVERRIDE"}]},{"syntax":"TDIGEST.MIN key","command":"TDIGEST.MIN","summary":"Returns the minimum observation value from a t-digest sketch","since":"2.4.0","complexity":"O(1)","group":"tdigest","acl":"@tdigest, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"TDIGEST.QUANTILE key quantile [quantile ...]","command":"TDIGEST.QUANTILE","summary":"Returns, for each input fraction, an estimation of the value (floating point) that is smaller than the given fraction of observations","since":"2.4.0","complexity":"O(N) where N is the number of quantiles specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"quantile"}]},{"syntax":"TDIGEST.RANK key value [value ...]","command":"TDIGEST.RANK","summary":"Returns, for each input value (floating-point), the estimated rank of the value (the number of observations in the sketch that are smaller than the value + half the number of observations that are equal to the value)","since":"2.4.0","complexity":"O(N) where N is the number of values specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"value"}]},{"syntax":"TDIGEST.RESET key","command":"TDIGEST.RESET","summary":"Resets a t-digest sketch: empty the sketch and re-initializes it.","since":"2.4.0","complexity":"O(1)","group":"tdigest","acl":"@tdigest, @write, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"TDIGEST.REVRANK key value [value ...]","command":"TDIGEST.REVRANK","summary":"Returns, for each input value (floating-point), the estimated reverse rank of the value (the number of observations in the sketch that are larger than the value + half the number of observations that are equal to the value)","since":"2.4.0","complexity":"O(N) where N is the number of values specified.","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"many","name":"value"}]},{"syntax":"TDIGEST.TRIMMED_MEAN key low_cut_quantile high_cut_quantile","command":"TDIGEST.TRIMMED_MEAN","summary":"Returns an estimation of the mean value from the sketch, excluding observation values outside the low and high cutoff quantiles","since":"2.4.0","complexity":"O(N) where N is the number of centroids","group":"tdigest","acl":"@tdigest, @read","arguments":[{"type":"single","name":"key"},{"type":"single","name":"low_cut_quantile"},{"type":"single","name":"high_cut_quantile"}]},{"syntax":"TIME","command":"TIME","summary":"Returns the server time.","since":"2.6.0","complexity":"O(1)","group":"server","acl":"@fast","arguments":[]},{"syntax":"TOPK.ADD key items [items ...]","command":"TOPK.ADD","summary":"Increases the count of one or more items by increment","since":"2.0.0","complexity":"O(n * k) where n is the number of items and k is the depth","group":"topk","acl":"@topk, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"items"}]},{"syntax":"TOPK.COUNT key item [item ...]","command":"TOPK.COUNT","summary":"Return the count for one or more items are in a sketch","since":"2.0.0","complexity":"O(n) where n is the number of items","group":"topk","acl":"@topk, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"TOPK.INCRBY key item increment [item increment ...]","command":"TOPK.INCRBY","summary":"Increases the count of one or more items by increment","since":"2.0.0","complexity":"O(n * k * incr) where n is the number of items, k is the depth and incr is the increment","group":"topk","acl":"@topk, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item increment"}]},{"syntax":"TOPK.INFO key","command":"TOPK.INFO","summary":"Returns information about a sketch","since":"2.0.0","complexity":"O(1)","group":"topk","acl":"@topk, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"TOPK.LIST key [WITHCOUNT]","command":"TOPK.LIST","summary":"Return full list of items in Top K list","since":"2.0.0","complexity":"O(k*log(k)) where k is the value of top-k","group":"topk","acl":"@topk, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"flag","value":"WITHCOUNT"}]},{"syntax":"TOPK.QUERY key item [item ...]","command":"TOPK.QUERY","summary":"Checks whether one or more items are in a sketch","since":"2.0.0","complexity":"O(n) where n is the number of items","group":"topk","acl":"@topk, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"many","name":"item"}]},{"syntax":"TOPK.RESERVE key topk [width depth decay]","command":"TOPK.RESERVE","summary":"Initializes a TopK with specified parameters","since":"2.0.0","complexity":"O(1)","group":"topk","acl":"@topk, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"topk"},{"type":"enum","values":["","",""]}]},{"syntax":"TOUCH key [key ...]","command":"TOUCH","summary":"Returns the number of existing keys out of those specified after updating the time they were last accessed.","since":"3.2.1","complexity":"O(N) where N is the number of keys that will be touched.","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"many","name":"key"}]},{"syntax":"TS.ADD key timestamp value [RETENTION retentionPeriod]\n  [ENCODING <COMPRESSED | UNCOMPRESSED>] [CHUNK_SIZE size]\n  [DUPLICATE_POLICY policy] \n  [ON_DUPLICATE <BLOCK | FIRST | LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff]\n  [LABELS [label value ...]]","command":"TS.ADD","summary":"Append a sample to a time series","since":"1.0.0","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"timestamp"},{"type":"single","name":"value"},{"type":"arg","key":"RETENTION","arg":"retentionPeriod","detail":"retentionPeriod"},{"type":"arg","key":"ENCODING","arg":"enc","detail":"enc"},{"type":"arg","key":"CHUNK_SIZE","arg":"size","detail":"size"},{"type":"arg","key":"DUPLICATE_POLICY","arg":"policy","detail":"policy"},{"type":"arg","key":"ON_DUPLICATE","arg":"policy_ovr","detail":"policy_ovr"},{"type":"arg","key":"LABELS","arg":"labels","detail":"labels"}]},{"syntax":"TS.ALTER key [RETENTION retentionPeriod] [CHUNK_SIZE size]\n  [DUPLICATE_POLICY <BLOCK | FIRST | LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff] \n  [LABELS [label value ...]]","command":"TS.ALTER","summary":"Update the retention, chunk size, duplicate policy, and labels of an existing time series","since":"1.0.0","complexity":"O(N) where N is the number of labels requested to update","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"RETENTION","arg":"retentionPeriod","detail":"retentionPeriod"},{"type":"arg","key":"CHUNK_SIZE","arg":"size","detail":"size"},{"type":"arg","key":"DUPLICATE_POLICY","arg":"policy","detail":"policy"},{"type":"arg","key":"LABELS","arg":"labels","detail":"labels"}]},{"syntax":"TS.CREATE key [RETENTION retentionPeriod] [ENCODING <COMPRESSED |\n  UNCOMPRESSED>] [CHUNK_SIZE size] [DUPLICATE_POLICY <BLOCK | FIRST |\n  LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff]\n  [LABELS [label value ...]]","command":"TS.CREATE","summary":"Create a new time series","since":"1.0.0","complexity":"O(1)","group":"timeseries","acl":"@timeseries, @write, @fast","arguments":[{"type":"single","name":"key"},{"type":"arg","key":"RETENTION","arg":"retentionPeriod","detail":"retentionPeriod"},{"type":"arg","key":"ENCODING","arg":"enc","detail":"enc"},{"type":"arg","key":"CHUNK_SIZE","arg":"size","detail":"size"},{"type":"arg","key":"DUPLICATE_POLICY","arg":"policy","detail":"policy"},{"type":"arg","key":"LABELS","arg":"labels","detail":"labels"}]},{"syntax":"TS.CREATERULE sourceKey destKey AGGREGATION <AVG | FIRST | LAST |\n  MIN | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S |\n  TWA> bucketDuration [alignTimestamp]","command":"TS.CREATERULE","summary":"Create a compaction rule","since":"1.0.0","complexity":"O(1)","group":"timeseries","acl":"@timeseries, @write, @fast","arguments":[{"type":"single","name":"sourceKey"},{"type":"single","name":"destKey"},{"type":"arg","key":"AGGREGATION","arg":"aggregator","detail":"aggregator"},{"type":"single","name":"bucketDuration"},{"type":"single","name":"alignTimestamp"}]},{"syntax":"TS.DECRBY key value [TIMESTAMP timestamp]\n  [RETENTION retentionPeriod] [ENCODING <COMPRESSED|UNCOMPRESSED>] [CHUNK_SIZE size]\n [DUPLICATE_POLICY policy] [LABELS [label value ...]]","command":"TS.DECRBY","summary":"Decrease the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given decrement","since":"1.0.0","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"},{"type":"arg","key":"TIMESTAMP","arg":"timestamp","detail":"timestamp"},{"type":"arg","key":"RETENTION","arg":"retentionPeriod","detail":"retentionPeriod"},{"type":"arg","key":"ENCODING","arg":"enc","detail":"enc"},{"type":"arg","key":"CHUNK_SIZE","arg":"size","detail":"size"},{"type":"arg","key":"DUPLICATE_POLICY","arg":"policy","detail":"policy"},{"type":"arg","key":"LABELS","arg":"labels","detail":"labels"}]},{"syntax":"TS.DEL key from_timestamp to_timestamp","command":"TS.DEL","summary":"Delete all samples between two timestamps for a given time series","since":"1.6.0","complexity":"O(N) where N is the number of data points that will be removed","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"from_timestamp"},{"type":"single","name":"to_timestamp"}]},{"syntax":"TS.DELETERULE sourceKey destKey","command":"TS.DELETERULE","summary":"Delete a compaction rule","since":"1.0.0","complexity":"O(1)","group":"timeseries","acl":"@timeseries, @write, @fast","arguments":[{"type":"single","name":"sourceKey"},{"type":"single","name":"destKey"}]},{"syntax":"TS.GET key [LATEST]","command":"TS.GET","summary":"Get the sample with the highest timestamp from a given time series","since":"1.0.0","complexity":"O(1)","group":"timeseries","acl":"@timeseries, @read, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"LATEST"}]},{"syntax":"TS.INCRBY key value [TIMESTAMP timestamp]\n  [RETENTION retentionPeriod] [ENCODING <COMPRESSED|UNCOMPRESSED>] [CHUNK_SIZE size]\n [DUPLICATE_POLICY policy] [LABELS [label value ...]]","command":"TS.INCRBY","summary":"Increase the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given increment","since":"1.0.0","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"value"},{"type":"arg","key":"TIMESTAMP","arg":"timestamp","detail":"timestamp"},{"type":"arg","key":"RETENTION","arg":"retentionPeriod","detail":"retentionPeriod"},{"type":"arg","key":"ENCODING","arg":"enc","detail":"enc"},{"type":"arg","key":"CHUNK_SIZE","arg":"size","detail":"size"},{"type":"arg","key":"DUPLICATE_POLICY","arg":"policy","detail":"policy"},{"type":"arg","key":"LABELS","arg":"labels","detail":"labels"}]},{"syntax":"TS.INFO key [DEBUG]","command":"TS.INFO","summary":"Returns information and statistics for a time series","since":"1.0.0","complexity":"O(1)","group":"timeseries","acl":"@timeseries, @read, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"DEBUG"}]},{"syntax":"TS.MADD key timestamp value [key timestamp value ...]","command":"TS.MADD","summary":"Append new samples to one or more time series","since":"1.0.0","complexity":"O(N*M) when N is the amount of series updated and M is the amount of compaction rules or O(N) with no compaction","group":"timeseries","acl":"@timeseries, @write, @slow","arguments":[{"type":"many","name":"key timestamp value"}]},{"syntax":"TS.MGET [LATEST] [WITHLABELS | <SELECTED_LABELS label1 [label1 ...]>]\n  FILTER <l=v | l!=v | l= | l!= | l=(v1,v2,...) | l!=(v1,v2,...)\n  [l=v | l!=v | l= | l!= | l=(v1,v2,...) | l!=(v1,v2,...) ...]>","command":"TS.MGET","summary":"Get the sample with the highest timestamp from each time series matching a specific filter","since":"1.0.0","complexity":"O(n) where n is the number of time-series that match the filters","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"single","name":"LATEST"},{"type":"enum","values":["WITHLABELS",""]},{"type":"arg","key":"FILTER","arg":"filterExpr","detail":"filterExpr"}]},{"syntax":"TS.MRANGE fromTimestamp toTimestamp [LATEST] [FILTER_BY_TS Timestamp\n  [Timestamp ...]] [FILTER_BY_VALUE min max] [WITHLABELS |\n  <SELECTED_LABELS label1 [label1 ...]>] [COUNT count] [[ALIGN value]\n  AGGREGATION <AVG | FIRST | LAST | MIN | MAX | SUM | RANGE | COUNT\n  | STD.P | STD.S | VAR.P | VAR.S | TWA> bucketDuration\n  [BUCKETTIMESTAMP] [EMPTY]] FILTER <l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) [l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) ...]> [GROUPBY label REDUCE\n  reducer]","command":"TS.MRANGE","summary":"Query a range across multiple time series by filters in forward direction","since":"1.0.0","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"single","name":"fromTimestamp"},{"type":"single","name":"toTimestamp"},{"type":"single","name":"LATEST"},{"type":"arg","key":"FILTER_BY_TS","arg":"Timestamp","detail":"Timestamp"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"enum","values":["WITHLABELS",""]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]},{"type":"arg","key":"FILTER","arg":"filterExpr","detail":"filterExpr"},{"type":"enum","values":["GROUPBY","","",""]}]},{"syntax":"TS.MREVRANGE fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [WITHLABELS | <SELECTED_LABELS label1 [label1 ...]>] [COUNT count]\n  [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN | MAX | SUM |\n  RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]] FILTER <l=v | l!=v | l=\n  | l!= | l=(v1,v2,...) | l!=(v1,v2,...) [l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) ...]> [GROUPBY label REDUCE\n  reducer]","command":"TS.MREVRANGE","summary":"Query a range across multiple time-series by filters in reverse direction","since":"1.4.0","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"single","name":"fromTimestamp"},{"type":"single","name":"toTimestamp"},{"type":"single","name":"LATEST"},{"type":"arg","key":"FILTER_BY_TS","arg":"Timestamp","detail":"Timestamp"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"enum","values":["WITHLABELS",""]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]},{"type":"arg","key":"FILTER","arg":"filterExpr","detail":"filterExpr"},{"type":"enum","values":["GROUPBY","","",""]}]},{"syntax":"TS.QUERYINDEX <l=v | l!=v | l= | l!= | l=(v1,v2,...) |\n  l!=(v1,v2,...) [l=v | l!=v | l= | l!= | l=(v1,v2,...) |\n  l!=(v1,v2,...) ...]>","command":"TS.QUERYINDEX","summary":"Get all time series keys matching a filter list","since":"1.0.0","complexity":"O(n) where n is the number of time-series that match the filters","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"many","name":"l=v l!=v l= l!= l=(v1,v2,...) l!=(v1,v2,...)"}]},{"syntax":"TS.RANGE key fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [COUNT count] [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN\n  | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]]","command":"TS.RANGE","summary":"Query a range in forward direction","since":"1.0.0","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"fromTimestamp"},{"type":"single","name":"toTimestamp"},{"type":"single","name":"LATEST"},{"type":"arg","key":"FILTER_BY_TS","arg":"Timestamp","detail":"Timestamp"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]}]},{"syntax":"TS.REVRANGE key fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [COUNT count] [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN\n  | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]]","command":"TS.REVRANGE","summary":"Query a range in reverse direction","since":"1.4.0","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range","group":"timeseries","acl":"@timeseries, @read, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"fromTimestamp"},{"type":"single","name":"toTimestamp"},{"type":"single","name":"LATEST"},{"type":"arg","key":"FILTER_BY_TS","arg":"Timestamp","detail":"Timestamp"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]}]},{"syntax":"TTL key","command":"TTL","summary":"Returns the expiration time in seconds of a key.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"TYPE key","command":"TYPE","summary":"Determines the type of value stored at a key.","since":"1.0.0","complexity":"O(1)","group":"generic","acl":"@keyspace, @read, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"UNLINK key [key ...]","command":"UNLINK","summary":"Asynchronously deletes one or more keys.","since":"4.0.0","complexity":"O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.","group":"generic","acl":"@keyspace, @write, @fast","arguments":[{"type":"many","name":"key"}]},{"syntax":"UNSUBSCRIBE [channel [channel ...]]","command":"UNSUBSCRIBE","summary":"Stops listening to messages posted to channels.","since":"2.0.0","complexity":"O(N) where N is the number of channels to unsubscribe.","group":"pubsub","acl":"@pubsub, @slow","arguments":[{"type":"many","name":"channel"}]},{"syntax":"UNWATCH","command":"UNWATCH","summary":"Forgets about watched keys of a transaction.","since":"2.2.0","complexity":"O(1)","group":"transactions","acl":"@fast, @transaction","arguments":[]},{"syntax":"VADD key [REDUCE dim] (FP32 | VALUES num) vector element [CAS] [NOQUANT | Q8 | BIN]\n  [EF build-exploration-factor] [SETATTR attributes] [M numlinks]","command":"VADD","summary":"Add a new element to a vector set, or update its vector if it already exists.","since":"8.0.0","complexity":"O(log(N)) for each element added, where N is the number of elements in the vector set.","group":"vector_set","acl":"","arguments":[]},{"syntax":"VCARD key","command":"VCARD","summary":"Return the number of elements in a vector set.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VDIM key","command":"VDIM","summary":"Return the dimension of vectors in the vector set.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VEMB key element [RAW]","command":"VEMB","summary":"Return the vector associated with an element.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VGETATTR key element","command":"VGETATTR","summary":"Retrieve the JSON attributes of elements.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VINFO key","command":"VINFO","summary":"Return information about a vector set.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VLINKS key element [WITHSCORES]","command":"VLINKS","summary":"Return the neighbors of an element at each layer in the HNSW graph.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VRANDMEMBER key [count]","command":"VRANDMEMBER","summary":"Return one or multiple random members from a vector set.","since":"8.0.0","complexity":"O(N) where N is the absolute value of the count argument.","group":"vector_set","acl":"","arguments":[]},{"syntax":"VREM key element","command":"VREM","summary":"Remove one or more elements from a vector set.","since":"8.0.0","complexity":"O(log(N)) for each element removed, where N is the number of elements in the vector set.","group":"vector_set","acl":"","arguments":[]},{"syntax":"VSETATTR key element \"{ JSON obj }\"","command":"VSETATTR","summary":"Associate or remove the JSON attributes of elements.","since":"8.0.0","complexity":"O(1)","group":"vector_set","acl":"","arguments":[]},{"syntax":"VSIM key (ELE | FP32 | VALUES num) (vector | element) [WITHSCORES] [COUNT num] [EF search-exploration-factor]\n  [FILTER expression] [FILTER-EF max-filtering-effort] [TRUTH] [NOTHREAD]","command":"VSIM","summary":"Return elements by vector similarity.","since":"8.0.0","complexity":"O(log(N)) where N is the number of elements in the vector set.","group":"vector_set","acl":"","arguments":[]},{"syntax":"WAIT numreplicas timeout","command":"WAIT","summary":"Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.","since":"3.0.0","complexity":"O(1)","group":"generic","acl":"@slow, @blocking, @connection","arguments":[{"type":"single","name":"numreplicas"},{"type":"single","name":"timeout"}]},{"syntax":"WAITAOF numlocal numreplicas timeout","command":"WAITAOF","summary":"Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.","since":"7.2.0","complexity":"O(1)","group":"generic","acl":"@slow, @blocking, @connection","arguments":[{"type":"single","name":"numlocal"},{"type":"single","name":"numreplicas"},{"type":"single","name":"timeout"}]},{"syntax":"WATCH key [key ...]","command":"WATCH","summary":"Monitors changes to keys to determine the execution of a transaction.","since":"2.2.0","complexity":"O(1) for every key.","group":"transactions","acl":"@fast, @transaction","arguments":[{"type":"many","name":"key"}]},{"syntax":"XACK key group id [id ...]","command":"XACK","summary":"Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.","since":"5.0.0","complexity":"O(1) for each message ID processed.","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"many","name":"id"}]},{"syntax":"XADD key [NOMKSTREAM] [<MAXLEN | MINID> [= | ~] threshold\n  [LIMIT count]] <* | id> field value [field value ...]","command":"XADD","summary":"Appends a new message to a stream. Creates the key if it doesn't exist.","since":"5.0.0","complexity":"O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"flag","value":"NOMKSTREAM"},{"type":"enum","values":["","","","LIMIT"]},{"type":"enum","values":["*",""]},{"type":"many","name":"field value"}]},{"syntax":"XAUTOCLAIM key group consumer min-idle-time start [COUNT count]\n  [JUSTID]","command":"XAUTOCLAIM","summary":"Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.","since":"6.2.0","complexity":"O(1) if COUNT is small.","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"single","name":"consumer"},{"type":"single","name":"min-idle-time"},{"type":"single","name":"start"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"flag","value":"JUSTID"}]},{"syntax":"XCLAIM key group consumer min-idle-time id [id ...] [IDLE ms]\n  [TIME unix-time-milliseconds] [RETRYCOUNT count] [FORCE] [JUSTID]\n  [LASTID lastid]","command":"XCLAIM","summary":"Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.","since":"5.0.0","complexity":"O(log N) with N being the number of messages in the PEL of the consumer group.","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"single","name":"consumer"},{"type":"single","name":"min-idle-time"},{"type":"many","name":"id"},{"type":"arg","key":"IDLE","arg":"ms","detail":"ms"},{"type":"arg","key":"TIME","arg":"unix-time-milliseconds","detail":"unix-time-milliseconds"},{"type":"arg","key":"RETRYCOUNT","arg":"count","detail":"count"},{"type":"flag","value":"FORCE"},{"type":"flag","value":"JUSTID"},{"type":"arg","key":"LASTID","arg":"lastid","detail":"lastid"}]},{"syntax":"XDEL key id [id ...]","command":"XDEL","summary":"Returns the number of messages after removing them from a stream.","since":"5.0.0","complexity":"O(1) for each single item to delete in the stream, regardless of the stream size.","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"id"}]},{"syntax":"XGROUP","command":"XGROUP","summary":"A container for consumer groups commands.","since":"5.0.0","complexity":"Depends on subcommand.","group":"stream","acl":"@slow","arguments":[]},{"syntax":"XGROUP CREATE key group <id | $> [MKSTREAM]\n  [ENTRIESREAD entries-read]","command":"XGROUP CREATE","summary":"Creates a consumer group.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"enum","values":["","$"]},{"type":"flag","value":"MKSTREAM"},{"type":"arg","key":"ENTRIESREAD","arg":"entriesread","detail":"entriesread"}]},{"syntax":"XGROUP CREATECONSUMER key group consumer","command":"XGROUP CREATECONSUMER","summary":"Creates a consumer in a consumer group.","since":"6.2.0","complexity":"O(1)","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"single","name":"consumer"}]},{"syntax":"XGROUP DELCONSUMER key group consumer","command":"XGROUP DELCONSUMER","summary":"Deletes a consumer from a consumer group.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"single","name":"consumer"}]},{"syntax":"XGROUP DESTROY key group","command":"XGROUP DESTROY","summary":"Destroys a consumer group.","since":"5.0.0","complexity":"O(N) where N is the number of entries in the group's pending entries list (PEL).","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"}]},{"syntax":"XGROUP HELP","command":"XGROUP HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@stream, @slow","arguments":[]},{"syntax":"XGROUP SETID key group <id | $> [ENTRIESREAD entries-read]","command":"XGROUP SETID","summary":"Sets the last-delivered ID of a consumer group.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"enum","values":["","$"]},{"type":"arg","key":"ENTRIESREAD","arg":"entriesread","detail":"entriesread"}]},{"syntax":"XINFO","command":"XINFO","summary":"A container for stream introspection commands.","since":"5.0.0","complexity":"Depends on subcommand.","group":"stream","acl":"@slow","arguments":[]},{"syntax":"XINFO CONSUMERS key group","command":"XINFO CONSUMERS","summary":"Returns a list of the consumers in a consumer group.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"}]},{"syntax":"XINFO GROUPS key","command":"XINFO GROUPS","summary":"Returns a list of the consumer groups of a stream.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"}]},{"syntax":"XINFO HELP","command":"XINFO HELP","summary":"Returns helpful text about the different subcommands.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@stream, @slow","arguments":[]},{"syntax":"XINFO STREAM key [FULL [COUNT count]]","command":"XINFO STREAM","summary":"Returns information about a stream.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["FULL","COUNT"]}]},{"syntax":"XLEN key","command":"XLEN","summary":"Return the number of messages in a stream.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@read, @stream, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"XPENDING key group [[IDLE min-idle-time] start end count [consumer]]","command":"XPENDING","summary":"Returns the information and entries from a stream consumer group's pending entries list.","since":"5.0.0","complexity":"O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"group"},{"type":"enum","values":["IDLE","","","",""]}]},{"syntax":"XRANGE key start end [COUNT count]","command":"XRANGE","summary":"Returns the messages from a stream within a range of IDs.","since":"5.0.0","complexity":"O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"end"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id\n  [id ...]","command":"XREAD","summary":"Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.","since":"5.0.0","complexity":null,"group":"stream","acl":"@read, @stream, @slow, @blocking","arguments":[{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"arg","key":"BLOCK","arg":"milliseconds","detail":"milliseconds"},{"type":"arg","key":"STREAMS","arg":"streams","detail":"streams"}]},{"syntax":"XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds]\n  [NOACK] STREAMS key [key ...] id [id ...]","command":"XREADGROUP","summary":"Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.","since":"5.0.0","complexity":"For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.","group":"stream","acl":"@write, @stream, @slow, @blocking","arguments":[{"type":"arg","key":"GROUP","arg":"group-block","detail":"group-block"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"},{"type":"arg","key":"BLOCK","arg":"milliseconds","detail":"milliseconds"},{"type":"flag","value":"NOACK"},{"type":"arg","key":"STREAMS","arg":"streams","detail":"streams"}]},{"syntax":"XREVRANGE key end start [COUNT count]","command":"XREVRANGE","summary":"Returns the messages from a stream within a range of IDs in reverse order.","since":"5.0.0","complexity":"O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","group":"stream","acl":"@read, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"end"},{"type":"single","name":"start"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"XSETID key last-id [ENTRIESADDED entries-added]\n  [MAXDELETEDID max-deleted-id]","command":"XSETID","summary":"An internal command for replicating stream values.","since":"5.0.0","complexity":"O(1)","group":"stream","acl":"@write, @stream, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"last-id"},{"type":"arg","key":"ENTRIESADDED","arg":"entries-added","detail":"entries-added"},{"type":"arg","key":"MAXDELETEDID","arg":"max-deleted-id","detail":"max-deleted-id"}]},{"syntax":"XTRIM key <MAXLEN | MINID> [= | ~] threshold [LIMIT count]","command":"XTRIM","summary":"Deletes messages from the beginning of a stream.","since":"5.0.0","complexity":"O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.","group":"stream","acl":"@write, @stream, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["","","","LIMIT"]}]},{"syntax":"ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member\n  ...]","command":"ZADD","summary":"Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.","since":"1.2.0","complexity":"O(log(N)) for each item added, where N is the number of elements in the sorted set.","group":"sorted-set","acl":"@write, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["NX","XX"]},{"type":"enum","values":["GT","LT"]},{"type":"flag","value":"CH"},{"type":"flag","value":"INCR"},{"type":"many","name":"score member"}]},{"syntax":"ZCARD key","command":"ZCARD","summary":"Returns the number of members in a sorted set.","since":"1.2.0","complexity":"O(1)","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"}]},{"syntax":"ZCOUNT key min max","command":"ZCOUNT","summary":"Returns the count of members in a sorted set that have scores within a range.","since":"2.0.0","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"}]},{"syntax":"ZDIFF numkeys key [key ...] [WITHSCORES]","command":"ZDIFF","summary":"Returns the difference between multiple sorted sets.","since":"6.2.0","complexity":"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"flag","value":"WITHSCORES"}]},{"syntax":"ZDIFFSTORE destination numkeys key [key ...]","command":"ZDIFFSTORE","summary":"Stores the difference of multiple sorted sets in a key.","since":"6.2.0","complexity":"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"destination"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"}]},{"syntax":"ZINCRBY key increment member","command":"ZINCRBY","summary":"Increments the score of a member in a sorted set.","since":"1.2.0","complexity":"O(log(N)) where N is the number of elements in the sorted set.","group":"sorted-set","acl":"@write, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"increment"},{"type":"single","name":"member"}]},{"syntax":"ZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]","command":"ZINTER","summary":"Returns the intersect of multiple sorted sets.","since":"6.2.0","complexity":"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"WEIGHTS","arg":"weight","detail":"weight"},{"type":"arg","key":"AGGREGATE","arg":"aggregate","detail":"aggregate"},{"type":"flag","value":"WITHSCORES"}]},{"syntax":"ZINTERCARD numkeys key [key ...] [LIMIT limit]","command":"ZINTERCARD","summary":"Returns the number of members of the intersect of multiple sorted sets.","since":"7.0.0","complexity":"O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]","command":"ZINTERSTORE","summary":"Stores the intersect of multiple sorted sets in a key.","since":"2.0.0","complexity":"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"destination"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"WEIGHTS","arg":"weight","detail":"weight"},{"type":"arg","key":"AGGREGATE","arg":"aggregate","detail":"aggregate"}]},{"syntax":"ZLEXCOUNT key min max","command":"ZLEXCOUNT","summary":"Returns the number of members in a sorted set within a lexicographical range.","since":"2.8.9","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"}]},{"syntax":"ZMPOP numkeys key [key ...] <MIN | MAX> [COUNT count]","command":"ZMPOP","summary":"Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.","since":"7.0.0","complexity":"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"enum","values":["MIN","MAX"]},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"ZMSCORE key member [member ...]","command":"ZMSCORE","summary":"Returns the score of one or more members in a sorted set.","since":"6.2.0","complexity":"O(N) where N is the number of members being requested.","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"ZPOPMAX key [count]","command":"ZPOPMAX","summary":"Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","since":"5.0.0","complexity":"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","acl":"@write, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"ZPOPMIN key [count]","command":"ZPOPMIN","summary":"Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","since":"5.0.0","complexity":"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","acl":"@write, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"count"}]},{"syntax":"ZRANDMEMBER key [count [WITHSCORES]]","command":"ZRANDMEMBER","summary":"Returns one or more random members from a sorted set.","since":"6.2.0","complexity":"O(N) where N is the number of members returned","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"enum","values":["","WITHSCORES"]}]},{"syntax":"ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count]\n  [WITHSCORES]","command":"ZRANGE","summary":"Returns members in a sorted set within a range of indexes.","since":"1.2.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"stop"},{"type":"enum","values":["BYSCORE","BYLEX"]},{"type":"flag","value":"REV"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"},{"type":"flag","value":"WITHSCORES"}]},{"syntax":"ZRANGEBYLEX key min max [LIMIT offset count]","command":"ZRANGEBYLEX","summary":"Returns members in a sorted set within a lexicographical range.","since":"2.8.9","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]","command":"ZRANGEBYSCORE","summary":"Returns members in a sorted set within a range of scores.","since":"1.0.5","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"},{"type":"flag","value":"WITHSCORES"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZRANGESTORE dst src min max [BYSCORE | BYLEX] [REV] [LIMIT offset\n  count]","command":"ZRANGESTORE","summary":"Stores a range of members from sorted set in a key.","since":"6.2.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"dst"},{"type":"single","name":"src"},{"type":"single","name":"min"},{"type":"single","name":"max"},{"type":"enum","values":["BYSCORE","BYLEX"]},{"type":"flag","value":"REV"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZRANK key member [WITHSCORE]","command":"ZRANK","summary":"Returns the index of a member in a sorted set ordered by ascending scores.","since":"2.0.0","complexity":"O(log(N))","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"},{"type":"flag","value":"WITHSCORE"}]},{"syntax":"ZREM key member [member ...]","command":"ZREM","summary":"Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.","since":"1.2.0","complexity":"O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.","group":"sorted-set","acl":"@write, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"many","name":"member"}]},{"syntax":"ZREMRANGEBYLEX key min max","command":"ZREMRANGEBYLEX","summary":"Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.","since":"2.8.9","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"}]},{"syntax":"ZREMRANGEBYRANK key start stop","command":"ZREMRANGEBYRANK","summary":"Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.","since":"2.0.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"stop"}]},{"syntax":"ZREMRANGEBYSCORE key min max","command":"ZREMRANGEBYSCORE","summary":"Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.","since":"1.2.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"min"},{"type":"single","name":"max"}]},{"syntax":"ZREVRANGE key start stop [WITHSCORES]","command":"ZREVRANGE","summary":"Returns members in a sorted set within a range of indexes in reverse order.","since":"1.2.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"start"},{"type":"single","name":"stop"},{"type":"flag","value":"WITHSCORES"}]},{"syntax":"ZREVRANGEBYLEX key max min [LIMIT offset count]","command":"ZREVRANGEBYLEX","summary":"Returns members in a sorted set within a lexicographical range in reverse order.","since":"2.8.9","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"max"},{"type":"single","name":"min"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]","command":"ZREVRANGEBYSCORE","summary":"Returns members in a sorted set within a range of scores in reverse order.","since":"2.2.0","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"max"},{"type":"single","name":"min"},{"type":"flag","value":"WITHSCORES"},{"type":"arg","key":"LIMIT","arg":"limit","detail":"limit"}]},{"syntax":"ZREVRANK key member [WITHSCORE]","command":"ZREVRANK","summary":"Returns the index of a member in a sorted set ordered by descending scores.","since":"2.0.0","complexity":"O(log(N))","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"},{"type":"flag","value":"WITHSCORE"}]},{"syntax":"ZSCAN key cursor [MATCH pattern] [COUNT count]","command":"ZSCAN","summary":"Iterates over members and scores of a sorted set.","since":"2.8.0","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"key"},{"type":"single","name":"cursor"},{"type":"arg","key":"MATCH","arg":"pattern","detail":"pattern"},{"type":"arg","key":"COUNT","arg":"count","detail":"count"}]},{"syntax":"ZSCORE key member","command":"ZSCORE","summary":"Returns the score of a member in a sorted set.","since":"1.2.0","complexity":"O(1)","group":"sorted-set","acl":"@read, @sortedset, @fast","arguments":[{"type":"single","name":"key"},{"type":"single","name":"member"}]},{"syntax":"ZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]","command":"ZUNION","summary":"Returns the union of multiple sorted sets.","since":"6.2.0","complexity":"O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","group":"sorted-set","acl":"@read, @sortedset, @slow","arguments":[{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"WEIGHTS","arg":"weight","detail":"weight"},{"type":"arg","key":"AGGREGATE","arg":"aggregate","detail":"aggregate"},{"type":"flag","value":"WITHSCORES"}]},{"syntax":"ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]","command":"ZUNIONSTORE","summary":"Stores the union of multiple sorted sets in a key.","since":"2.0.0","complexity":"O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","group":"sorted-set","acl":"@write, @sortedset, @slow","arguments":[{"type":"single","name":"destination"},{"type":"single","name":"numkeys"},{"type":"many","name":"key"},{"type":"arg","key":"WEIGHTS","arg":"weight","detail":"weight"},{"type":"arg","key":"AGGREGATE","arg":"aggregate","detail":"aggregate"}]}]