[{"acl":"@slow","arguments":[{"name":"category","type":"single"}],"command":"ACL CAT","complexity":"O(1) since the categories and commands are a fixed set.","group":"server","since":"6.0.0","summary":"Lists the ACL categories, or the commands inside a category.","syntax":"ACL CAT [category]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"username","type":"many"}],"command":"ACL DELUSER","complexity":"O(1) amortized time considering the typical user.","group":"server","since":"6.0.0","summary":"Deletes ACL users, and terminates their connections.","syntax":"ACL DELUSER username [username ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"username","type":"single"},{"name":"command","type":"single"},{"name":"arg","type":"many"}],"command":"ACL DRYRUN","complexity":"O(1).","group":"server","since":"7.0.0","summary":"Simulates the execution of a command by a user, without executing the command.","syntax":"ACL DRYRUN username command [arg [arg ...]]"},{"acl":"@slow","arguments":[{"name":"bits","type":"single"}],"command":"ACL GENPASS","complexity":"O(1)","group":"server","since":"6.0.0","summary":"Generates a pseudorandom, secure password that can be used to identify ACL users.","syntax":"ACL GENPASS [bits]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"username","type":"single"}],"command":"ACL GETUSER","complexity":"O(N). Where N is the number of password, command and pattern rules that the user has.","group":"server","since":"6.0.0","summary":"Lists the ACL rules of a user.","syntax":"ACL GETUSER username"},{"acl":"@slow","arguments":[],"command":"ACL HELP","complexity":"O(1)","group":"server","since":"6.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"ACL HELP"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"ACL LIST","complexity":"O(N). Where N is the number of configured users.","group":"server","since":"6.0.0","summary":"Dumps the effective rules in ACL file format.","syntax":"ACL LIST"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"ACL LOAD","complexity":"O(N). Where N is the number of configured users.","group":"server","since":"6.0.0","summary":"Reloads the rules from the configured ACL file.","syntax":"ACL LOAD"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["","RESET"]}],"command":"ACL LOG","complexity":"O(N) with N being the number of entries shown.","group":"server","since":"6.0.0","summary":"Lists recent security events generated due to ACL rules.","syntax":"ACL LOG [count | RESET]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"ACL SAVE","complexity":"O(N). Where N is the number of configured users.","group":"server","since":"6.0.0","summary":"Saves the effective ACL rules in the configured ACL file.","syntax":"ACL SAVE"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"username","type":"single"},{"name":"rule","type":"many"}],"command":"ACL SETUSER","complexity":"O(N). Where N is the number of rules provided.","group":"server","since":"6.0.0","summary":"Creates and modifies an ACL user and its rules.","syntax":"ACL SETUSER username [rule [rule ...]]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"ACL USERS","complexity":"O(N). Where N is the number of configured users.","group":"server","since":"6.0.0","summary":"Lists all ACL users.","syntax":"ACL USERS"},{"acl":"@slow","arguments":[],"command":"ACL WHOAMI","complexity":"O(1)","group":"server","since":"6.0.0","summary":"Returns the authenticated username of the current connection.","syntax":"ACL WHOAMI"},{"acl":"@slow","arguments":[],"command":"ACL","complexity":"Depends on subcommand.","group":"server","since":"6.0.0","summary":"A container for Access List Control commands.","syntax":"ACL"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"}],"command":"APPEND","complexity":"O(1). The amortized time complexity is O(1) assuming the appended value is small and the already present value is of any size, since the dynamic string library used by Redis will double the free space available on every reallocation.","group":"string","since":"2.0.0","summary":"Appends a string to the value of a key. Creates the key if it doesn't exist.","syntax":"APPEND key value"},{"acl":"@fast, @connection","arguments":[],"command":"ASKING","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Signals that a cluster client is following an -ASK redirect.","syntax":"ASKING"},{"acl":"@fast, @connection","arguments":[{"name":"username","type":"single"},{"name":"password","type":"single"}],"command":"AUTH","complexity":"O(N) where N is the number of passwords defined for the user","group":"connection","since":"1.0.0","summary":"Authenticates the connection.","syntax":"AUTH [username] password"},{"acl":"@bloom, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"BF.ADD","complexity":"O(k), where k is the number of hash functions used by the last sub-filter","group":"bf","since":"1.0.0","summary":"Adds an item to a Bloom Filter","syntax":"BF.ADD key item"},{"acl":"@bloom, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"BF.CARD","complexity":"O(1)","group":"bf","since":"2.4.4","summary":"Returns the cardinality of a Bloom filter","syntax":"BF.CARD key"},{"acl":"@bloom, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"BF.EXISTS","complexity":"O(k), where k is the number of hash functions used by the last sub-filter","group":"bf","since":"1.0.0","summary":"Checks whether an item exists in a Bloom Filter","syntax":"BF.EXISTS key item"},{"acl":"@bloom, @read, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["CAPACITY","SIZE","FILTERS","ITEMS","EXPANSION"]}],"command":"BF.INFO","complexity":"O(1)","group":"bf","since":"1.0.0","summary":"Returns information about a Bloom Filter","syntax":"BF.INFO key [CAPACITY | SIZE | FILTERS | ITEMS | EXPANSION]"},{"acl":"@bloom, @write, @slow","arguments":[{"name":"key","type":"single"},{"arg":"capacity","detail":"capacity","key":"CAPACITY","type":"arg"},{"arg":"error","detail":"error","key":"ERROR","type":"arg"},{"arg":"expansion","detail":"expansion","key":"EXPANSION","type":"arg"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"NONSCALING"},{"type":"flag","value":"ITEMS"},{"name":"item","type":"many"}],"command":"BF.INSERT","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","since":"1.0.0","summary":"Adds one or more items to a Bloom Filter. A filter will be created if it does not exist","syntax":"BF.INSERT key [CAPACITY capacity] [ERROR error]\n  [EXPANSION expansion] [NOCREATE] [NONSCALING] ITEMS item [item\n  ...]"},{"acl":"@bloom, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"iterator","type":"single"},{"name":"data","type":"single"}],"command":"BF.LOADCHUNK","complexity":"O(n), where n is the capacity","group":"bf","since":"1.0.0","summary":"Restores a filter previously saved using SCANDUMP","syntax":"BF.LOADCHUNK key iterator data"},{"acl":"@bloom, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"BF.MADD","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","since":"1.0.0","summary":"Adds one or more items to a Bloom Filter. A filter will be created if it does not exist","syntax":"BF.MADD key item [item ...]"},{"acl":"@bloom, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"BF.MEXISTS","complexity":"O(k * n), where k is the number of hash functions and n is the number of items","group":"bf","since":"1.0.0","summary":"Checks whether one or more items exist in a Bloom Filter","syntax":"BF.MEXISTS key item [item ...]"},{"acl":"@bloom, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"error_rate","type":"single"},{"name":"capacity","type":"single"},{"arg":"expansion","detail":"expansion","key":"EXPANSION","type":"arg"},{"type":"flag","value":"NONSCALING"}],"command":"BF.RESERVE","complexity":"O(1)","group":"bf","since":"1.0.0","summary":"Creates a new Bloom Filter","syntax":"BF.RESERVE key error_rate capacity [EXPANSION expansion]\n  [NONSCALING]"},{"acl":"@bloom, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"iterator","type":"single"}],"command":"BF.SCANDUMP","complexity":"O(n), where n is the capacity","group":"bf","since":"1.0.0","summary":"Begins an incremental save of the bloom filter","syntax":"BF.SCANDUMP key iterator"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"BGREWRITEAOF","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Asynchronously rewrites the append-only file to disk.","syntax":"BGREWRITEAOF"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"flag","value":"SCHEDULE"}],"command":"BGSAVE","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Asynchronously saves the database(s) to disk.","syntax":"BGSAVE [SCHEDULE]"},{"acl":"@read, @bitmap, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["","",""]}],"command":"BITCOUNT","complexity":"O(N)","group":"bitmap","since":"2.6.0","summary":"Counts the number of set bits (population counting) in a string.","syntax":"BITCOUNT key [start end [BYTE | BIT]]"},{"acl":"@write, @bitmap, @slow","arguments":[{"name":"key","type":"single"},{"name":"get-block write","type":"many"}],"command":"BITFIELD","complexity":"O(1) for each subcommand specified","group":"bitmap","since":"3.2.0","summary":"Performs arbitrary bitfield integer operations on strings.","syntax":"BITFIELD key [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  [GET encoding offset | [OVERFLOW <WRAP | SAT | FAIL>]\n  <SET encoding offset value | INCRBY encoding offset increment>\n  ...]]"},{"acl":"@read, @bitmap, @fast","arguments":[{"name":"key","type":"single"},{"arg":"get-block","detail":"get-block","key":"GET","type":"arg"}],"command":"BITFIELD_RO","complexity":"O(1) for each subcommand specified","group":"bitmap","since":"6.0.0","summary":"Performs arbitrary read-only bitfield integer operations on strings.","syntax":"BITFIELD_RO key [GET encoding offset [GET encoding offset ...]]"},{"acl":"@write, @bitmap, @slow","arguments":[{"type":"enum","values":["AND","OR","XOR","NOT","DIFF","DIFF1","ANDOR","ONE"]},{"name":"destkey","type":"single"},{"name":"key","type":"many"}],"command":"BITOP","complexity":"O(N)","group":"bitmap","since":"2.6.0","summary":"Performs bitwise operations on multiple strings, and stores the result.","syntax":"BITOP <AND | OR | XOR | NOT | DIFF | DIFF1 | ANDOR | ONE> destkey key [key ...]"},{"acl":"@read, @bitmap, @slow","arguments":[{"name":"key","type":"single"},{"name":"bit","type":"single"},{"type":"enum","values":["",""]}],"command":"BITPOS","complexity":"O(N)","group":"bitmap","since":"2.8.7","summary":"Finds the first set (1) or clear (0) bit in a string.","syntax":"BITPOS key bit [start [end [BYTE | BIT]]]"},{"acl":"@write, @list, @slow, @blocking","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"enum","values":["LEFT","RIGHT"]},{"name":"timeout","type":"single"}],"command":"BLMOVE","complexity":"O(1)","group":"list","since":"6.2.0","summary":"Pops an element from a list, pushes it to another list and returns it. Blocks until an element is available otherwise. Deletes the list if the last element was moved.","syntax":"BLMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT> timeout"},{"acl":"@write, @list, @slow, @blocking","arguments":[{"name":"timeout","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"type":"enum","values":["LEFT","RIGHT"]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"BLMPOP","complexity":"O(N+M) where N is the number of provided keys and M is the number of elements returned.","group":"list","since":"7.0.0","summary":"Pops the first element from one of multiple lists. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","syntax":"BLMPOP timeout numkeys key [key ...] <LEFT | RIGHT> [COUNT count]"},{"acl":"@write, @list, @slow, @blocking","arguments":[{"name":"key","type":"many"},{"name":"timeout","type":"single"}],"command":"BLPOP","complexity":"O(N) where N is the number of provided keys.","group":"list","since":"2.0.0","summary":"Removes and returns the first element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","syntax":"BLPOP key [key ...] timeout"},{"acl":"@write, @list, @slow, @blocking","arguments":[{"name":"key","type":"many"},{"name":"timeout","type":"single"}],"command":"BRPOP","complexity":"O(N) where N is the number of provided keys.","group":"list","since":"2.0.0","summary":"Removes and returns the last element in a list. Blocks until an element is available otherwise. Deletes the list if the last element was popped.","syntax":"BRPOP key [key ...] timeout"},{"acl":"@write, @list, @slow, @blocking","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"},{"name":"timeout","type":"single"}],"command":"BRPOPLPUSH","complexity":"O(1)","group":"list","since":"2.2.0","summary":"Pops an element from a list, pushes it to another list and returns it. Block until an element is available otherwise. Deletes the list if the last element was popped.","syntax":"BRPOPLPUSH source destination timeout"},{"acl":"@write, @sortedset, @slow, @blocking","arguments":[{"name":"timeout","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"type":"enum","values":["MIN","MAX"]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"BZMPOP","complexity":"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","since":"7.0.0","summary":"Removes and returns a member by score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","syntax":"BZMPOP timeout numkeys key [key ...] <MIN | MAX> [COUNT count]"},{"acl":"@write, @sortedset, @fast, @blocking","arguments":[{"name":"key","type":"many"},{"name":"timeout","type":"single"}],"command":"BZPOPMAX","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","since":"5.0.0","summary":"Removes and returns the member with the highest score from one or more sorted sets. Blocks until a member available otherwise.  Deletes the sorted set if the last element was popped.","syntax":"BZPOPMAX key [key ...] timeout"},{"acl":"@write, @sortedset, @fast, @blocking","arguments":[{"name":"key","type":"many"},{"name":"timeout","type":"single"}],"command":"BZPOPMIN","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","since":"5.0.0","summary":"Removes and returns the member with the lowest score from one or more sorted sets. Blocks until a member is available otherwise. Deletes the sorted set if the last element was popped.","syntax":"BZPOPMIN key [key ...] timeout"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"CF.ADD","complexity":"O(k + i), where k is the number of sub-filters and i is maxIterations","group":"cf","since":"1.0.0","summary":"Adds an item to a Cuckoo Filter","syntax":"CF.ADD key item"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"CF.ADDNX","complexity":"O(k + i), where k is the number of sub-filters and i is maxIterations","group":"cf","since":"1.0.0","summary":"Adds an item to a Cuckoo Filter if the item did not exist previously.","syntax":"CF.ADDNX key item"},{"acl":"@cuckoo, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"CF.COUNT","complexity":"O(k), where k is the number of sub-filters","group":"cf","since":"1.0.0","summary":"Return the number of times an item might be in a Cuckoo Filter","syntax":"CF.COUNT key item"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"CF.DEL","complexity":"O(k), where k is the number of sub-filters","group":"cf","since":"1.0.0","summary":"Deletes an item from a Cuckoo Filter","syntax":"CF.DEL key item"},{"acl":"@cuckoo, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"single"}],"command":"CF.EXISTS","complexity":"O(k), where k is the number of sub-filters","group":"cf","since":"1.0.0","summary":"Checks whether one or more items exist in a Cuckoo Filter","syntax":"CF.EXISTS key item"},{"acl":"@cuckoo, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"CF.INFO","complexity":"O(1)","group":"cf","since":"1.0.0","summary":"Returns information about a Cuckoo Filter","syntax":"CF.INFO key"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"arg":"capacity","detail":"capacity","key":"CAPACITY","type":"arg"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"ITEMS"},{"name":"item","type":"many"}],"command":"CF.INSERT","complexity":"O(n * (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations","group":"cf","since":"1.0.0","summary":"Adds one or more items to a Cuckoo Filter. A filter will be created if it does not exist","syntax":"CF.INSERT key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"arg":"capacity","detail":"capacity","key":"CAPACITY","type":"arg"},{"type":"flag","value":"NOCREATE"},{"type":"flag","value":"ITEMS"},{"name":"item","type":"many"}],"command":"CF.INSERTNX","complexity":"O(n * (k + i)), where n is the number of items, k is the number of sub-filters and i is maxIterations","group":"cf","since":"1.0.0","summary":"Adds one or more items to a Cuckoo Filter if the items did not exist previously. A filter will be created if it does not exist","syntax":"CF.INSERTNX key [CAPACITY capacity] [NOCREATE] ITEMS item [item ...]"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"iterator","type":"single"},{"name":"data","type":"single"}],"command":"CF.LOADCHUNK","complexity":"O(n), where n is the capacity","group":"cf","since":"1.0.0","summary":"Restores a filter previously saved using SCANDUMP","syntax":"CF.LOADCHUNK key iterator data"},{"acl":"@cuckoo, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"CF.MEXISTS","complexity":"O(k * n), where k is the number of sub-filters and n is the number of items","group":"cf","since":"1.0.0","summary":"Checks whether one or more items exist in a Cuckoo Filter","syntax":"CF.MEXISTS key item [item ...]"},{"acl":"@cuckoo, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"capacity","type":"single"},{"arg":"bucketsize","detail":"bucketsize","key":"BUCKETSIZE","type":"arg"},{"arg":"maxiterations","detail":"maxiterations","key":"MAXITERATIONS","type":"arg"},{"arg":"expansion","detail":"expansion","key":"EXPANSION","type":"arg"}],"command":"CF.RESERVE","complexity":"O(1)","group":"cf","since":"1.0.0","summary":"Creates a new Cuckoo Filter","syntax":"CF.RESERVE key capacity [BUCKETSIZE bucketsize]\n  [MAXITERATIONS maxiterations] [EXPANSION expansion]"},{"acl":"@cuckoo, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"iterator","type":"single"}],"command":"CF.SCANDUMP","complexity":"O(n), where n is the capacity","group":"cf","since":"1.0.0","summary":"Begins an incremental save of the bloom filter","syntax":"CF.SCANDUMP key iterator"},{"acl":"@slow, @connection","arguments":[{"type":"enum","values":["YES","NO"]}],"command":"CLIENT CACHING","complexity":"O(1)","group":"connection","since":"6.0.0","summary":"Instructs the server whether to track the keys in the next request.","syntax":"CLIENT CACHING <YES | NO>"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT GETNAME","complexity":"O(1)","group":"connection","since":"2.6.9","summary":"Returns the name of the connection.","syntax":"CLIENT GETNAME"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT GETREDIR","complexity":"O(1)","group":"connection","since":"6.0.0","summary":"Returns the client ID to which the connection's tracking notifications are redirected.","syntax":"CLIENT GETREDIR"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT HELP","complexity":"O(1)","group":"connection","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"CLIENT HELP"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT ID","complexity":"O(1)","group":"connection","since":"5.0.0","summary":"Returns the unique client ID of the connection.","syntax":"CLIENT ID"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT INFO","complexity":"O(1)","group":"connection","since":"6.2.0","summary":"Returns information about the connection.","syntax":"CLIENT INFO"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"enum","values":["",""]}],"command":"CLIENT KILL","complexity":"O(N) where N is the number of client connections","group":"connection","since":"2.4.0","summary":"Terminates open connections.","syntax":"CLIENT KILL <ip:port | <[ID client-id] | [TYPE <NORMAL | MASTER |\n  SLAVE | REPLICA | PUBSUB>] | [USER username] | [ADDR ip:port] |\n  [LADDR ip:port] | [SKIPME <YES | NO>] | [MAXAGE maxage]\n  [[ID client-id] | [TYPE <NORMAL | MASTER | SLAVE | REPLICA |\n  PUBSUB>] | [USER username] | [ADDR ip:port] | [LADDR ip:port] |\n  [SKIPME <YES | NO>] | [MAXAGE maxage] ...]>>"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[{"arg":"client-type","detail":"client-type","key":"TYPE","type":"arg"},{"arg":"client-id","detail":"client-id","key":"ID","type":"arg"}],"command":"CLIENT LIST","complexity":"O(N) where N is the number of client connections","group":"connection","since":"2.4.0","summary":"Lists open connections.","syntax":"CLIENT LIST [TYPE <NORMAL | MASTER | REPLICA | PUBSUB>]\n  [ID client-id [client-id ...]]"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[{"type":"enum","values":["ON","OFF"]}],"command":"CLIENT NO-EVICT","complexity":"O(1)","group":"connection","since":"7.0.0","summary":"Sets the client eviction mode of the connection.","syntax":"CLIENT NO-EVICT <ON | OFF>"},{"acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF"]}],"command":"CLIENT NO-TOUCH","complexity":"O(1)","group":"connection","since":"7.2.0","summary":"Controls whether commands sent by the client affect the LRU/LFU of accessed keys.","syntax":"CLIENT NO-TOUCH <ON | OFF>"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[{"name":"timeout","type":"single"},{"type":"enum","values":["WRITE","ALL"]}],"command":"CLIENT PAUSE","complexity":"O(1)","group":"connection","since":"3.0.0","summary":"Suspends commands processing.","syntax":"CLIENT PAUSE timeout [WRITE | ALL]"},{"acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF","SKIP"]}],"command":"CLIENT REPLY","complexity":"O(1)","group":"connection","since":"3.2.0","summary":"Instructs the server whether to reply to commands.","syntax":"CLIENT REPLY <ON | OFF | SKIP>"},{"acl":"@slow, @connection","arguments":[{"type":"enum","values":["LIB-NAME","LIB-VER"]}],"command":"CLIENT SETINFO","complexity":"O(1)","group":"connection","since":"7.2.0","summary":"Sets information specific to the client or connection.","syntax":"CLIENT SETINFO <LIB-NAME libname | LIB-VER libver>"},{"acl":"@slow, @connection","arguments":[{"name":"connection-name","type":"single"}],"command":"CLIENT SETNAME","complexity":"O(1)","group":"connection","since":"2.6.9","summary":"Sets the connection name.","syntax":"CLIENT SETNAME connection-name"},{"acl":"@slow, @connection","arguments":[{"type":"enum","values":["ON","OFF"]},{"arg":"client-id","detail":"client-id","key":"REDIRECT","type":"arg"},{"arg":"prefix","detail":"prefix","key":"PREFIX","type":"arg"},{"type":"flag","value":"BCAST"},{"type":"flag","value":"OPTIN"},{"type":"flag","value":"OPTOUT"},{"type":"flag","value":"NOLOOP"}],"command":"CLIENT TRACKING","complexity":"O(1). Some options may introduce additional complexity.","group":"connection","since":"6.0.0","summary":"Controls server-assisted client-side caching for the connection.","syntax":"CLIENT TRACKING <ON | OFF> [REDIRECT client-id] [PREFIX prefix\n  [PREFIX prefix ...]] [BCAST] [OPTIN] [OPTOUT] [NOLOOP]"},{"acl":"@slow, @connection","arguments":[],"command":"CLIENT TRACKINGINFO","complexity":"O(1)","group":"connection","since":"6.2.0","summary":"Returns information about server-assisted client-side caching for the connection.","syntax":"CLIENT TRACKINGINFO"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[{"name":"client-id","type":"single"},{"type":"enum","values":["TIMEOUT","ERROR"]}],"command":"CLIENT UNBLOCK","complexity":"O(log N) where N is the number of client connections","group":"connection","since":"5.0.0","summary":"Unblocks a client blocked by a blocking command from a different connection.","syntax":"CLIENT UNBLOCK client-id [TIMEOUT | ERROR]"},{"acl":"@admin, @slow, @dangerous, @connection","arguments":[],"command":"CLIENT UNPAUSE","complexity":"O(N) Where N is the number of paused clients","group":"connection","since":"6.2.0","summary":"Resumes processing commands from paused clients.","syntax":"CLIENT UNPAUSE"},{"acl":"@slow","arguments":[],"command":"CLIENT","complexity":"Depends on subcommand.","group":"connection","since":"2.4.0","summary":"A container for client connection commands.","syntax":"CLIENT"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"slot","type":"many"}],"command":"CLUSTER ADDSLOTS","complexity":"O(N) where N is the total number of hash slot arguments","group":"cluster","since":"3.0.0","summary":"Assigns new hash slots to a node.","syntax":"CLUSTER ADDSLOTS slot [slot ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"start-slot end-slot","type":"many"}],"command":"CLUSTER ADDSLOTSRANGE","complexity":"O(N) where N is the total number of the slots between the start slot and end slot arguments.","group":"cluster","since":"7.0.0","summary":"Assigns new hash slot ranges to a node.","syntax":"CLUSTER ADDSLOTSRANGE start-slot end-slot [start-slot end-slot ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"CLUSTER BUMPEPOCH","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Advances the cluster config epoch.","syntax":"CLUSTER BUMPEPOCH"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"node-id","type":"single"}],"command":"CLUSTER COUNT-FAILURE-REPORTS","complexity":"O(N) where N is the number of failure reports","group":"cluster","since":"3.0.0","summary":"Returns the number of active failure reports active for a node.","syntax":"CLUSTER COUNT-FAILURE-REPORTS node-id"},{"acl":"@slow","arguments":[{"name":"slot","type":"single"}],"command":"CLUSTER COUNTKEYSINSLOT","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Returns the number of keys in a hash slot.","syntax":"CLUSTER COUNTKEYSINSLOT slot"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"slot","type":"many"}],"command":"CLUSTER DELSLOTS","complexity":"O(N) where N is the total number of hash slot arguments","group":"cluster","since":"3.0.0","summary":"Sets hash slots as unbound for a node.","syntax":"CLUSTER DELSLOTS slot [slot ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"start-slot end-slot","type":"many"}],"command":"CLUSTER DELSLOTSRANGE","complexity":"O(N) where N is the total number of the slots between the start slot and end slot arguments.","group":"cluster","since":"7.0.0","summary":"Sets hash slot ranges as unbound for a node.","syntax":"CLUSTER DELSLOTSRANGE start-slot end-slot [start-slot end-slot ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["FORCE","TAKEOVER"]}],"command":"CLUSTER FAILOVER","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Forces a replica to perform a manual failover of its master.","syntax":"CLUSTER FAILOVER [FORCE | TAKEOVER]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"CLUSTER FLUSHSLOTS","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Deletes all slots information from a node.","syntax":"CLUSTER FLUSHSLOTS"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"node-id","type":"single"}],"command":"CLUSTER FORGET","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Removes a node from the nodes table.","syntax":"CLUSTER FORGET node-id"},{"acl":"@slow","arguments":[{"name":"slot","type":"single"},{"name":"count","type":"single"}],"command":"CLUSTER GETKEYSINSLOT","complexity":"O(N) where N is the number of requested keys","group":"cluster","since":"3.0.0","summary":"Returns the key names in a hash slot.","syntax":"CLUSTER GETKEYSINSLOT slot count"},{"acl":"@slow","arguments":[],"command":"CLUSTER HELP","complexity":"O(1)","group":"cluster","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"CLUSTER HELP"},{"acl":"@slow","arguments":[],"command":"CLUSTER INFO","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Returns information about the state of a node.","syntax":"CLUSTER INFO"},{"acl":"@slow","arguments":[{"name":"key","type":"single"}],"command":"CLUSTER KEYSLOT","complexity":"O(N) where N is the number of bytes in the key","group":"cluster","since":"3.0.0","summary":"Returns the hash slot for a key.","syntax":"CLUSTER KEYSLOT key"},{"acl":"@slow","arguments":[],"command":"CLUSTER LINKS","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","since":"7.0.0","summary":"Returns a list of all TCP links to and from peer nodes.","syntax":"CLUSTER LINKS"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"ip","type":"single"},{"name":"port","type":"single"},{"name":"cluster-bus-port","type":"single"}],"command":"CLUSTER MEET","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Forces a node to handshake with another node.","syntax":"CLUSTER MEET ip port [cluster-bus-port]"},{"acl":"@slow","arguments":[],"command":"CLUSTER MYID","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Returns the ID of a node.","syntax":"CLUSTER MYID"},{"acl":"@slow","arguments":[],"command":"CLUSTER MYSHARDID","complexity":"O(1)","group":"cluster","since":"7.2.0","summary":"Returns the shard ID of a node.","syntax":"CLUSTER MYSHARDID"},{"acl":"@slow","arguments":[],"command":"CLUSTER NODES","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","since":"3.0.0","summary":"Returns the cluster configuration for a node.","syntax":"CLUSTER NODES"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"node-id","type":"single"}],"command":"CLUSTER REPLICAS","complexity":"O(N) where N is the number of replicas.","group":"cluster","since":"5.0.0","summary":"Lists the replica nodes of a master node.","syntax":"CLUSTER REPLICAS node-id"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"node-id","type":"single"}],"command":"CLUSTER REPLICATE","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Configure a node as replica of a master node.","syntax":"CLUSTER REPLICATE node-id"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["HARD","SOFT"]}],"command":"CLUSTER RESET","complexity":"O(N) where N is the number of known nodes. The command may execute a FLUSHALL as a side effect.","group":"cluster","since":"3.0.0","summary":"Resets a node.","syntax":"CLUSTER RESET [HARD | SOFT]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"CLUSTER SAVECONFIG","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Forces a node to save the cluster configuration to disk.","syntax":"CLUSTER SAVECONFIG"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"config-epoch","type":"single"}],"command":"CLUSTER SET-CONFIG-EPOCH","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Sets the configuration epoch for a new node.","syntax":"CLUSTER SET-CONFIG-EPOCH config-epoch"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"slot","type":"single"},{"type":"enum","values":["IMPORTING","MIGRATING","NODE","STABLE"]}],"command":"CLUSTER SETSLOT","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Binds a hash slot to a node.","syntax":"CLUSTER SETSLOT slot <IMPORTING node-id | MIGRATING node-id |\n  NODE node-id | STABLE>"},{"acl":"@slow","arguments":[],"command":"CLUSTER SHARDS","complexity":"O(N) where N is the total number of cluster nodes","group":"cluster","since":"7.0.0","summary":"Returns the mapping of cluster slots to shards.","syntax":"CLUSTER SHARDS"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"node-id","type":"single"}],"command":"CLUSTER SLAVES","complexity":"O(N) where N is the number of replicas.","group":"cluster","since":"3.0.0","summary":"Lists the replica nodes of a master node.","syntax":"CLUSTER SLAVES node-id"},{"acl":"","arguments":[{"type":"enum","values":["SLOTSRANGE","ORDERBY"]}],"command":"CLUSTER SLOT-STATS","complexity":"O(N) where N is the total number of slots based on arguments. O(N*log(N)) with ORDERBY subcommand.","group":"cluster","since":"8.2.0","summary":"Return an array of slot usage statistics for slots assigned to the current node.","syntax":"CLUSTER SLOT-STATS <SLOTSRANGE start-slot end-slot | ORDERBY metric\n  [LIMIT limit] [ASC | DESC]>"},{"acl":"@slow","arguments":[],"command":"CLUSTER SLOTS","complexity":"O(N) where N is the total number of Cluster nodes","group":"cluster","since":"3.0.0","summary":"Returns the mapping of cluster slots to nodes.","syntax":"CLUSTER SLOTS"},{"acl":"@slow","arguments":[],"command":"CLUSTER","complexity":"Depends on subcommand.","group":"cluster","since":"3.0.0","summary":"A container for Redis Cluster commands.","syntax":"CLUSTER"},{"acl":"@cms, @write","arguments":[{"name":"key","type":"single"},{"name":"item increment","type":"many"}],"command":"CMS.INCRBY","complexity":"O(n) where n is the number of items","group":"cms","since":"2.0.0","summary":"Increases the count of one or more items by increment","syntax":"CMS.INCRBY key item increment [item increment ...]"},{"acl":"@cms, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"CMS.INFO","complexity":"O(1)","group":"cms","since":"2.0.0","summary":"Returns information about a sketch","syntax":"CMS.INFO key"},{"acl":"@cms, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"width","type":"single"},{"name":"depth","type":"single"}],"command":"CMS.INITBYDIM","complexity":"O(1)","group":"cms","since":"2.0.0","summary":"Initializes a Count-Min Sketch to dimensions specified by user","syntax":"CMS.INITBYDIM key width depth"},{"acl":"@cms, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"error","type":"single"},{"name":"probability","type":"single"}],"command":"CMS.INITBYPROB","complexity":"O(1)","group":"cms","since":"2.0.0","summary":"Initializes a Count-Min Sketch to accommodate requested tolerances.","syntax":"CMS.INITBYPROB key error probability"},{"acl":"@cms, @write","arguments":[{"name":"destination","type":"single"},{"name":"numKeys","type":"single"},{"name":"source","type":"many"},{"type":"enum","values":["WEIGHTS",""]}],"command":"CMS.MERGE","complexity":"O(n) where n is the number of sketches","group":"cms","since":"2.0.0","summary":"Merges several sketches into one sketch","syntax":"CMS.MERGE destination numKeys source [source ...] [WEIGHTS weight\n  [weight ...]]"},{"acl":"@cms, @read","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"CMS.QUERY","complexity":"O(n) where n is the number of items","group":"cms","since":"2.0.0","summary":"Returns the count for one or more items in a sketch","syntax":"CMS.QUERY key item [item ...]"},{"acl":"@slow, @connection","arguments":[],"command":"COMMAND COUNT","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns a count of commands.","syntax":"COMMAND COUNT"},{"acl":"@slow, @connection","arguments":[{"name":"command-name","type":"many"}],"command":"COMMAND DOCS","complexity":"O(N) where N is the number of commands to look up","group":"server","since":"7.0.0","summary":"Returns documentary information about one, multiple or all commands.","syntax":"COMMAND DOCS [command-name [command-name ...]]"},{"acl":"@slow, @connection","arguments":[{"name":"command","type":"single"},{"name":"arg","type":"many"}],"command":"COMMAND GETKEYS","complexity":"O(N) where N is the number of arguments to the command","group":"server","since":"2.8.13","summary":"Extracts the key names from an arbitrary command.","syntax":"COMMAND GETKEYS command [arg [arg ...]]"},{"acl":"@slow, @connection","arguments":[{"name":"command","type":"single"},{"name":"arg","type":"many"}],"command":"COMMAND GETKEYSANDFLAGS","complexity":"O(N) where N is the number of arguments to the command","group":"server","since":"7.0.0","summary":"Extracts the key names and access flags for an arbitrary command.","syntax":"COMMAND GETKEYSANDFLAGS command [arg [arg ...]]"},{"acl":"@slow, @connection","arguments":[],"command":"COMMAND HELP","complexity":"O(1)","group":"server","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"COMMAND HELP"},{"acl":"@slow, @connection","arguments":[{"name":"command-name","type":"many"}],"command":"COMMAND INFO","complexity":"O(N) where N is the number of commands to look up","group":"server","since":"2.8.13","summary":"Returns information about one, multiple or all commands.","syntax":"COMMAND INFO [command-name [command-name ...]]"},{"acl":"@slow, @connection","arguments":[{"arg":"filterby","detail":"filterby","key":"FILTERBY","type":"arg"}],"command":"COMMAND LIST","complexity":"O(N) where N is the total number of Redis commands","group":"server","since":"7.0.0","summary":"Returns a list of command names.","syntax":"COMMAND LIST [FILTERBY <MODULE module-name | ACLCAT category |\n  PATTERN pattern>]"},{"acl":"@slow, @connection","arguments":[],"command":"COMMAND","complexity":"O(N) where N is the total number of Redis commands","group":"server","since":"2.8.13","summary":"Returns detailed information about all commands.","syntax":"COMMAND"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"parameter","type":"many"}],"command":"CONFIG GET","complexity":"O(N) when N is the number of configuration parameters provided","group":"server","since":"2.0.0","summary":"Returns the effective values of configuration parameters.","syntax":"CONFIG GET parameter [parameter ...]"},{"acl":"@slow","arguments":[],"command":"CONFIG HELP","complexity":"O(1)","group":"server","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"CONFIG HELP"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"CONFIG RESETSTAT","complexity":"O(1)","group":"server","since":"2.0.0","summary":"Resets the server's statistics.","syntax":"CONFIG RESETSTAT"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"CONFIG REWRITE","complexity":"O(1)","group":"server","since":"2.8.0","summary":"Persists the effective configuration to file.","syntax":"CONFIG REWRITE"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"parameter value","type":"many"}],"command":"CONFIG SET","complexity":"O(N) when N is the number of configuration parameters provided","group":"server","since":"2.0.0","summary":"Sets configuration parameters in-flight.","syntax":"CONFIG SET parameter value [parameter value ...]"},{"acl":"@slow","arguments":[],"command":"CONFIG","complexity":"Depends on subcommand.","group":"server","since":"2.0.0","summary":"A container for server configuration commands.","syntax":"CONFIG"},{"acl":"@keyspace, @write, @slow","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"},{"arg":"destination-db","detail":"destination-db","key":"DB","type":"arg"},{"type":"flag","value":"REPLACE"}],"command":"COPY","complexity":"O(N) worst case for collections, where N is the number of nested items. O(1) for string values.","group":"generic","since":"6.2.0","summary":"Copies the value of a key to a new key.","syntax":"COPY source destination [DB destination-db] [REPLACE]"},{"acl":"@keyspace, @read, @fast","arguments":[],"command":"DBSIZE","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Returns the number of keys in the database.","syntax":"DBSIZE"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"DEBUG","complexity":"Depends on subcommand.","group":"server","since":"1.0.0","summary":"A container for debugging commands.","syntax":"DEBUG"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"}],"command":"DECR","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Decrements the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","syntax":"DECR key"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"decrement","type":"single"}],"command":"DECRBY","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Decrements a number from the integer value of a key. Uses 0 as initial value if the key doesn't exist.","syntax":"DECRBY key decrement"},{"acl":"@keyspace, @write, @slow","arguments":[{"name":"key","type":"many"}],"command":"DEL","complexity":"O(N) where N is the number of keys that will be removed. When a key to remove holds a value other than a string, the individual complexity for this key is O(M) where M is the number of elements in the list, set, sorted set or hash. Removing a single key that holds a string value is O(1).","group":"generic","since":"1.0.0","summary":"Deletes one or more keys.","syntax":"DEL key [key ...]"},{"acl":"@fast, @transaction","arguments":[],"command":"DISCARD","complexity":"O(N), when N is the number of queued commands","group":"transactions","since":"2.0.0","summary":"Discards a transaction.","syntax":"DISCARD"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"key","type":"single"}],"command":"DUMP","complexity":"O(1) to access the key and additional O(N*M) to serialize it, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1).","group":"generic","since":"2.6.0","summary":"Returns a serialized representation of the value stored at a key.","syntax":"DUMP key"},{"acl":"@fast, @connection","arguments":[{"name":"message","type":"single"}],"command":"ECHO","complexity":"O(1)","group":"connection","since":"1.0.0","summary":"Returns the given string.","syntax":"ECHO message"},{"acl":"@slow, @scripting","arguments":[{"name":"script","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"EVAL","complexity":"Depends on the script that is executed.","group":"scripting","since":"2.6.0","summary":"Executes a server-side Lua script.","syntax":"EVAL script numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@slow, @scripting","arguments":[{"name":"sha1","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"EVALSHA","complexity":"Depends on the script that is executed.","group":"scripting","since":"2.6.0","summary":"Executes a server-side Lua script by SHA1 digest.","syntax":"EVALSHA sha1 numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@slow, @scripting","arguments":[{"name":"sha1","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"EVALSHA_RO","complexity":"Depends on the script that is executed.","group":"scripting","since":"7.0.0","summary":"Executes a read-only server-side Lua script by SHA1 digest.","syntax":"EVALSHA_RO sha1 numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@slow, @scripting","arguments":[{"name":"script","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"EVAL_RO","complexity":"Depends on the script that is executed.","group":"scripting","since":"7.0.0","summary":"Executes a read-only server-side Lua script.","syntax":"EVAL_RO script numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@slow, @transaction","arguments":[],"command":"EXEC","complexity":"Depends on commands in the transaction","group":"transactions","since":"1.2.0","summary":"Executes all commands in a transaction.","syntax":"EXEC"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"many"}],"command":"EXISTS","complexity":"O(N) where N is the number of keys to check.","group":"generic","since":"1.0.0","summary":"Determines whether one or more keys exist.","syntax":"EXISTS key [key ...]"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"seconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]}],"command":"EXPIRE","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Sets the expiration time of a key in seconds.","syntax":"EXPIRE key seconds [NX | XX | GT | LT]"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"unix-time-seconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]}],"command":"EXPIREAT","complexity":"O(1)","group":"generic","since":"1.2.0","summary":"Sets the expiration time of a key to a Unix timestamp.","syntax":"EXPIREAT key unix-time-seconds [NX | XX | GT | LT]"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"EXPIRETIME","complexity":"O(1)","group":"generic","since":"7.0.0","summary":"Returns the expiration time of a key as a Unix timestamp.","syntax":"EXPIRETIME key"},{"acl":"@admin, @slow, @dangerous","arguments":[{"arg":"target","detail":"target","key":"TO","type":"arg"},{"type":"flag","value":"ABORT"},{"arg":"milliseconds","detail":"milliseconds","key":"TIMEOUT","type":"arg"}],"command":"FAILOVER","complexity":"O(1)","group":"server","since":"6.2.0","summary":"Starts a coordinated failover from a server to one of its replicas.","syntax":"FAILOVER [TO host port [FORCE]] [ABORT] [TIMEOUT milliseconds]"},{"acl":"@slow, @scripting","arguments":[{"name":"function","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"FCALL","complexity":"Depends on the function that is executed.","group":"scripting","since":"7.0.0","summary":"Invokes a function.","syntax":"FCALL function numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@slow, @scripting","arguments":[{"name":"function","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"name":"arg","type":"many"}],"command":"FCALL_RO","complexity":"Depends on the function that is executed.","group":"scripting","since":"7.0.0","summary":"Invokes a read-only function.","syntax":"FCALL_RO function numkeys [key [key ...]] [arg [arg ...]]"},{"acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}],"command":"FLUSHALL","complexity":"O(N) where N is the total number of keys in all databases","group":"server","since":"1.0.0","summary":"Removes all keys from all databases.","syntax":"FLUSHALL [ASYNC | SYNC]"},{"acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}],"command":"FLUSHDB","complexity":"O(N) where N is the number of keys in the selected database","group":"server","since":"1.0.0","summary":"Remove all keys from the current database.","syntax":"FLUSHDB [ASYNC | SYNC]"},{"acl":"@search, @read, @fast","arguments":[{"name":"index","type":"single"},{"name":"query","type":"single"},{"type":"flag","value":"VERBATIM"},{"type":"enum","values":["LOAD",""]},{"arg":"timeout","detail":"timeout","key":"TIMEOUT","type":"arg"},{"type":"flag","value":"LOAD *"},{"name":"nargs property reduce","type":"many"},{"type":"enum","values":["SORTBY","","MAX"]},{"name":"expression name","type":"many"},{"type":"enum","values":["LIMIT","",""]},{"arg":"filter","detail":"filter","key":"FILTER","type":"arg"},{"type":"enum","values":["WITHCURSOR","COUNT","MAXIDLE"]},{"type":"enum","values":["PARAMS","",""]},{"arg":"scorer","detail":"scorer","key":"SCORER","type":"arg"},{"type":"flag","value":"ADDSCORES"},{"arg":"dialect","detail":"dialect","key":"DIALECT","type":"arg"}],"command":"FT.AGGREGATE","complexity":"O(1)","group":"search","since":"1.1.0","summary":"Run a search query on an index and perform aggregate transformations on the results","syntax":"FT.AGGREGATE index query [VERBATIM] [LOAD count field [field ...]]\n  [TIMEOUT timeout] [LOAD *] [GROUPBY nargs property [property ...]\n  [REDUCE function nargs arg [arg ...] [AS name] [REDUCE function\n  nargs arg [arg ...] [AS name] ...]] [GROUPBY nargs property\n  [property ...] [REDUCE function nargs arg [arg ...] [AS name]\n  [REDUCE function nargs arg [arg ...] [AS name] ...]] ...]]\n  [SORTBY nargs [property <ASC | DESC> [property <ASC | DESC> ...]]\n  [MAX num]] [APPLY expression AS name [APPLY expression AS name\n  ...]] [LIMIT offset num] [FILTER filter] [WITHCURSOR\n  [COUNT read_size] [MAXIDLE idle_time]] [PARAMS nargs name value\n  [name value ...]]\n  [SCORER scorer]\n [ADDSCORES]\n  [DIALECT dialect]"},{"acl":"@search","arguments":[{"name":"alias","type":"single"},{"name":"index","type":"single"}],"command":"FT.ALIASADD","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Adds an alias to the index","syntax":"FT.ALIASADD alias index"},{"acl":"@search","arguments":[{"name":"alias","type":"single"}],"command":"FT.ALIASDEL","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Deletes an alias from the index","syntax":"FT.ALIASDEL alias"},{"acl":"@search","arguments":[{"name":"alias","type":"single"},{"name":"index","type":"single"}],"command":"FT.ALIASUPDATE","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Adds or updates an alias to the index","syntax":"FT.ALIASUPDATE alias index"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"type":"flag","value":"SKIPINITIALSCAN"},{"type":"flag","value":"SCHEMA"},{"type":"flag","value":"ADD"},{"name":"field","type":"single"},{"name":"options","type":"single"}],"command":"FT.ALTER","complexity":"O(N) where N is the number of keys in the keyspace","group":"search","since":"1.0.0","summary":"Adds a new field to the index","syntax":"FT.ALTER index [SKIPINITIALSCAN] SCHEMA ADD field options"},{"acl":"@admin, @search","arguments":[{"name":"option","type":"single"}],"command":"FT.CONFIG GET","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Retrieves runtime configuration options","syntax":"FT.CONFIG GET option"},{"acl":"@admin, @search","arguments":[{"name":"option","type":"single"}],"command":"FT.CONFIG HELP","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Help description of runtime configuration options","syntax":"FT.CONFIG HELP option"},{"acl":"@admin, @search","arguments":[{"name":"option","type":"single"},{"name":"value","type":"single"}],"command":"FT.CONFIG SET","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Sets runtime configuration options","syntax":"FT.CONFIG SET option value"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"arg":"data_type","detail":"data_type","key":"ON","type":"arg"},{"type":"enum","values":["PREFIX",""]},{"arg":"filter","detail":"filter","key":"FILTER","type":"arg"},{"arg":"default_lang","detail":"default_lang","key":"LANGUAGE","type":"arg"},{"arg":"lang_attribute","detail":"lang_attribute","key":"LANGUAGE_FIELD","type":"arg"},{"arg":"default_score","detail":"default_score","key":"SCORE","type":"arg"},{"arg":"score_attribute","detail":"score_attribute","key":"SCORE_FIELD","type":"arg"},{"arg":"payload_attribute","detail":"payload_attribute","key":"PAYLOAD_FIELD","type":"arg"},{"type":"flag","value":"MAXTEXTFIELDS"},{"arg":"seconds","detail":"seconds","key":"TEMPORARY","type":"arg"},{"type":"flag","value":"NOOFFSETS"},{"type":"flag","value":"NOHL"},{"type":"flag","value":"NOFIELDS"},{"type":"flag","value":"NOFREQS"},{"arg":"stopwords","detail":"stopwords","key":"STOPWORDS","type":"arg"},{"type":"flag","value":"SKIPINITIALSCAN"},{"type":"flag","value":"SCHEMA"},{"name":"field_name alias field_type withsuffixtrie indexempty sortable noindex","type":"many"}],"command":"FT.CREATE","complexity":"O(K) at creation where K is the number of fields, O(N) if scanning the keyspace is triggered, where N is the number of keys in the keyspace","group":"search","since":"1.0.0","summary":"Creates an index with the given spec","syntax":"FT.CREATE index [ON <HASH | JSON>] [PREFIX count prefix [prefix\n  ...]] [FILTER filter] [LANGUAGE default_lang]\n  [LANGUAGE_FIELD lang_attribute] [SCORE default_score]\n  [SCORE_FIELD score_attribute] [PAYLOAD_FIELD payload_attribute]\n  [MAXTEXTFIELDS] [TEMPORARY seconds] [NOOFFSETS] [NOHL] [NOFIELDS]\n  [NOFREQS] [STOPWORDS count [stopword [stopword ...]]]\n  [SKIPINITIALSCAN] SCHEMA field_name [AS alias] <TEXT | TAG |\n  NUMERIC | GEO | VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]]\n  [NOINDEX] [field_name [AS alias] <TEXT | TAG | NUMERIC | GEO |\n  VECTOR> [WITHSUFFIXTRIE] [SORTABLE [UNF]] [NOINDEX] ...]"},{"acl":"@read, @search","arguments":[{"name":"index","type":"single"},{"name":"cursor_id","type":"single"}],"command":"FT.CURSOR DEL","complexity":"O(1)","group":"search","since":"1.1.0","summary":"Deletes a cursor","syntax":"FT.CURSOR DEL index cursor_id"},{"acl":"@read, @search","arguments":[{"name":"index","type":"single"},{"name":"cursor_id","type":"single"},{"arg":"read size","detail":"read size","key":"COUNT","type":"arg"}],"command":"FT.CURSOR READ","complexity":"O(1)","group":"search","since":"1.1.0","summary":"Reads from a cursor","syntax":"FT.CURSOR READ index cursor_id [COUNT read size]"},{"acl":"@search","arguments":[{"name":"dict","type":"single"},{"name":"term","type":"many"}],"command":"FT.DICTADD","complexity":"O(1)","group":"search","since":"1.4.0","summary":"Adds terms to a dictionary","syntax":"FT.DICTADD dict term [term ...]"},{"acl":"@search","arguments":[{"name":"dict","type":"single"},{"name":"term","type":"many"}],"command":"FT.DICTDEL","complexity":"O(1)","group":"search","since":"1.4.0","summary":"Deletes terms from a dictionary","syntax":"FT.DICTDEL dict term [term ...]"},{"acl":"@search","arguments":[{"name":"dict","type":"single"}],"command":"FT.DICTDUMP","complexity":"O(N), where N is the size of the dictionary","group":"search","since":"1.4.0","summary":"Dumps all terms in the given dictionary","syntax":"FT.DICTDUMP dict"},{"acl":"@dangerous, @search, @slow, @write","arguments":[{"name":"index","type":"single"},{"type":"enum","values":["DD"]}],"command":"FT.DROPINDEX","complexity":"O(1) or O(N) if documents are deleted, where N is the number of keys in the keyspace","group":"search","since":"2.0.0","summary":"Deletes the index","syntax":"FT.DROPINDEX index [DD]"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"name":"query","type":"single"},{"arg":"dialect","detail":"dialect","key":"DIALECT","type":"arg"}],"command":"FT.EXPLAIN","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Returns the execution plan for a complex query","syntax":"FT.EXPLAIN index query [DIALECT dialect]"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"name":"query","type":"single"},{"arg":"dialect","detail":"dialect","key":"DIALECT","type":"arg"}],"command":"FT.EXPLAINCLI","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Returns the execution plan for a complex query","syntax":"FT.EXPLAINCLI index query [DIALECT dialect]"},{"acl":"@search","arguments":[{"name":"index","type":"single"}],"command":"FT.INFO","complexity":"O(1)","group":"search","since":"1.0.0","summary":"Returns information and statistics on the index","syntax":"FT.INFO index"},{"acl":"@read, @search","arguments":[{"name":"index","type":"single"},{"type":"enum","values":["SEARCH","AGGREGATE"]},{"type":"flag","value":"LIMITED"},{"type":"flag","value":"QUERY"},{"name":"query","type":"single"}],"command":"FT.PROFILE","complexity":"O(N)","group":"search","since":"2.2.0","summary":"Performs a `FT.SEARCH` or `FT.AGGREGATE` command and collects performance information","syntax":"FT.PROFILE index <SEARCH | AGGREGATE> [LIMITED] QUERY query"},{"acl":"@read, @search","arguments":[{"name":"index","type":"single"},{"name":"query","type":"single"},{"type":"flag","value":"NOCONTENT"},{"type":"flag","value":"VERBATIM"},{"type":"flag","value":"NOSTOPWORDS"},{"type":"flag","value":"WITHSCORES"},{"type":"flag","value":"WITHPAYLOADS"},{"type":"flag","value":"WITHSORTKEYS"},{"name":"numeric_field min max","type":"many"},{"name":"geo_field lon lat radius radius_type","type":"many"},{"type":"enum","values":["INKEYS",""]},{"type":"enum","values":["INFIELDS",""]},{"type":"enum","values":["RETURN",""]},{"type":"enum","values":["SUMMARIZE","","FRAGS","LEN","SEPARATOR"]},{"type":"enum","values":["HIGHLIGHT","",""]},{"arg":"slop","detail":"slop","key":"SLOP","type":"arg"},{"arg":"timeout","detail":"timeout","key":"TIMEOUT","type":"arg"},{"type":"flag","value":"INORDER"},{"arg":"language","detail":"language","key":"LANGUAGE","type":"arg"},{"arg":"expander","detail":"expander","key":"EXPANDER","type":"arg"},{"arg":"scorer","detail":"scorer","key":"SCORER","type":"arg"},{"type":"flag","value":"EXPLAINSCORE"},{"arg":"payload","detail":"payload","key":"PAYLOAD","type":"arg"},{"type":"enum","values":["SORTBY",""]},{"type":"enum","values":["LIMIT","",""]},{"type":"enum","values":["PARAMS","",""]},{"arg":"dialect","detail":"dialect","key":"DIALECT","type":"arg"}],"command":"FT.SEARCH","complexity":"O(N)","group":"search","since":"1.0.0","summary":"Searches the index with a textual query, returning either documents or just ids","syntax":"FT.SEARCH index query [NOCONTENT] [VERBATIM] [NOSTOPWORDS]\n  [WITHSCORES] [WITHPAYLOADS] [WITHSORTKEYS] [FILTER numeric_field\n  min max [FILTER numeric_field min max ...]] [GEOFILTER geo_field\n  lon lat radius <m | km | mi | ft> [GEOFILTER geo_field lon lat\n  radius <m | km | mi | ft> ...]] [INKEYS count key [key ...]]\n  [INFIELDS count field [field ...]] [RETURN count identifier\n  [AS property] [identifier [AS property] ...]] [SUMMARIZE\n  [FIELDS count field [field ...]] [FRAGS num] [LEN fragsize]\n  [SEPARATOR separator]] [HIGHLIGHT [FIELDS count field [field ...]]\n  [TAGS open close]] [SLOP slop] [TIMEOUT timeout] [INORDER]\n  [LANGUAGE language] [EXPANDER expander] [SCORER scorer]\n  [EXPLAINSCORE] [PAYLOAD payload] [SORTBY sortby [ASC | DESC]]\n  [LIMIT offset num] [PARAMS nargs name value [name value ...]]\n  [DIALECT dialect]"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"name":"query","type":"single"},{"arg":"distance","detail":"distance","key":"DISTANCE","type":"arg"},{"arg":"terms","detail":"terms","key":"TERMS","type":"arg"},{"arg":"dialect","detail":"dialect","key":"DIALECT","type":"arg"}],"command":"FT.SPELLCHECK","complexity":"O(1)","group":"search","since":"1.4.0","summary":"Performs spelling correction on a query, returning suggestions for misspelled terms","syntax":"FT.SPELLCHECK index query [DISTANCE distance] [TERMS <INCLUDE |\n  EXCLUDE> dictionary [terms [terms ...]]] [DIALECT dialect]"},{"acl":"@search, @write","arguments":[{"name":"key","type":"single"},{"name":"string","type":"single"},{"name":"score","type":"single"},{"type":"enum","values":["INCR"]},{"arg":"payload","detail":"payload","key":"PAYLOAD","type":"arg"}],"command":"FT.SUGADD","complexity":"O(1)","group":"suggestion","since":"1.0.0","summary":"Adds a suggestion string to an auto-complete suggestion dictionary","syntax":"FT.SUGADD key string score [INCR] [PAYLOAD payload]"},{"acl":"@search, @write","arguments":[{"name":"key","type":"single"},{"name":"string","type":"single"}],"command":"FT.SUGDEL","complexity":"O(1)","group":"suggestion","since":"1.0.0","summary":"Deletes a string from a suggestion index","syntax":"FT.SUGDEL key string"},{"acl":"@search","arguments":[{"name":"key","type":"single"},{"name":"prefix","type":"single"},{"type":"flag","value":"FUZZY"},{"type":"flag","value":"WITHSCORES"},{"type":"flag","value":"WITHPAYLOADS"},{"arg":"max","detail":"max","key":"MAX","type":"arg"}],"command":"FT.SUGGET","complexity":"O(1)","group":"suggestion","since":"1.0.0","summary":"Gets completion suggestions for a prefix","syntax":"FT.SUGGET key prefix [FUZZY] [WITHSCORES] [WITHPAYLOADS] [MAX max]"},{"acl":"@search","arguments":[{"name":"key","type":"single"}],"command":"FT.SUGLEN","complexity":"O(1)","group":"suggestion","since":"1.0.0","summary":"Gets the size of an auto-complete suggestion dictionary","syntax":"FT.SUGLEN key"},{"acl":"@search","arguments":[{"name":"index","type":"single"}],"command":"FT.SYNDUMP","complexity":"O(1)","group":"search","since":"1.2.0","summary":"Dumps the contents of a synonym group","syntax":"FT.SYNDUMP index"},{"acl":"@search","arguments":[{"name":"index","type":"single"},{"name":"synonym_group_id","type":"single"},{"type":"flag","value":"SKIPINITIALSCAN"},{"name":"term","type":"many"}],"command":"FT.SYNUPDATE","complexity":"O(1)","group":"search","since":"1.2.0","summary":"Creates or updates a synonym group with additional terms","syntax":"FT.SYNUPDATE index synonym_group_id [SKIPINITIALSCAN] term [term\n  ...]"},{"acl":"@dangerous, @read, @search, @slow","arguments":[{"name":"index","type":"single"},{"name":"field_name","type":"single"}],"command":"FT.TAGVALS","complexity":"O(N)","group":"search","since":"1.0.0","summary":"Returns the distinct tags indexed in a Tag field","syntax":"FT.TAGVALS index field_name"},{"acl":"@admin, @search, @slow","arguments":[],"command":"FT._LIST","complexity":"O(1)","group":"search","since":"2.0.0","summary":"Returns a list of all existing indexes","syntax":"FT._LIST"},{"acl":"@write, @slow, @scripting","arguments":[{"name":"library-name","type":"single"}],"command":"FUNCTION DELETE","complexity":"O(1)","group":"scripting","since":"7.0.0","summary":"Deletes a library and its functions.","syntax":"FUNCTION DELETE library-name"},{"acl":"@slow, @scripting","arguments":[],"command":"FUNCTION DUMP","complexity":"O(N) where N is the number of functions","group":"scripting","since":"7.0.0","summary":"Dumps all libraries into a serialized binary payload.","syntax":"FUNCTION DUMP"},{"acl":"@write, @slow, @scripting","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}],"command":"FUNCTION FLUSH","complexity":"O(N) where N is the number of functions deleted","group":"scripting","since":"7.0.0","summary":"Deletes all libraries and functions.","syntax":"FUNCTION FLUSH [ASYNC | SYNC]"},{"acl":"@slow, @scripting","arguments":[],"command":"FUNCTION HELP","complexity":"O(1)","group":"scripting","since":"7.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"FUNCTION HELP"},{"acl":"@slow, @scripting","arguments":[],"command":"FUNCTION KILL","complexity":"O(1)","group":"scripting","since":"7.0.0","summary":"Terminates a function during execution.","syntax":"FUNCTION KILL"},{"acl":"@slow, @scripting","arguments":[{"arg":"library-name-pattern","detail":"library-name-pattern","key":"LIBRARYNAME","type":"arg"},{"type":"flag","value":"WITHCODE"}],"command":"FUNCTION LIST","complexity":"O(N) where N is the number of functions","group":"scripting","since":"7.0.0","summary":"Returns information about all libraries.","syntax":"FUNCTION LIST [LIBRARYNAME library-name-pattern] [WITHCODE]"},{"acl":"@write, @slow, @scripting","arguments":[{"type":"flag","value":"REPLACE"},{"name":"function-code","type":"single"}],"command":"FUNCTION LOAD","complexity":"O(1) (considering compilation time is redundant)","group":"scripting","since":"7.0.0","summary":"Creates a library.","syntax":"FUNCTION LOAD [REPLACE] function-code"},{"acl":"@write, @slow, @scripting","arguments":[{"name":"serialized-value","type":"single"},{"type":"enum","values":["FLUSH","APPEND","REPLACE"]}],"command":"FUNCTION RESTORE","complexity":"O(N) where N is the number of functions on the payload","group":"scripting","since":"7.0.0","summary":"Restores all libraries from a payload.","syntax":"FUNCTION RESTORE serialized-value [FLUSH | APPEND | REPLACE]"},{"acl":"@slow, @scripting","arguments":[],"command":"FUNCTION STATS","complexity":"O(1)","group":"scripting","since":"7.0.0","summary":"Returns information about a function during execution.","syntax":"FUNCTION STATS"},{"acl":"@slow","arguments":[],"command":"FUNCTION","complexity":"Depends on subcommand.","group":"scripting","since":"7.0.0","summary":"A container for function commands.","syntax":"FUNCTION"},{"acl":"@write, @geo, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["NX","XX"]},{"type":"flag","value":"CH"},{"name":"longitude latitude member","type":"many"}],"command":"GEOADD","complexity":"O(log(N)) for each item added, where N is the number of elements in the sorted set.","group":"geo","since":"3.2.0","summary":"Adds one or more members to a geospatial index. The key is created if it doesn't exist.","syntax":"GEOADD key [NX | XX] [CH] longitude latitude member [longitude\n  latitude member ...]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"member1","type":"single"},{"name":"member2","type":"single"},{"type":"enum","values":["M","KM","FT","MI"]}],"command":"GEODIST","complexity":"O(1)","group":"geo","since":"3.2.0","summary":"Returns the distance between two members of a geospatial index.","syntax":"GEODIST key member1 member2 [M | KM | FT | MI]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"GEOHASH","complexity":"O(1) for each member requested.","group":"geo","since":"3.2.0","summary":"Returns members from a geospatial index as geohash strings.","syntax":"GEOHASH key [member [member ...]]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"GEOPOS","complexity":"O(1) for each member requested.","group":"geo","since":"3.2.0","summary":"Returns the longitude and latitude of members from a geospatial index.","syntax":"GEOPOS key [member [member ...]]"},{"acl":"@write, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"longitude","type":"single"},{"name":"latitude","type":"single"},{"name":"radius","type":"single"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["STORE","STOREDIST"]}],"command":"GEORADIUS","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","since":"3.2.0","summary":"Queries a geospatial index for members within a distance from a coordinate, optionally stores the result.","syntax":"GEORADIUS key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]\n  [STORE key | STOREDIST key]"},{"acl":"@write, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"},{"name":"radius","type":"single"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["STORE","STOREDIST"]}],"command":"GEORADIUSBYMEMBER","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","since":"3.2.0","summary":"Queries a geospatial index for members within a distance from a member, optionally stores the result.","syntax":"GEORADIUSBYMEMBER key member radius <M | KM | FT | MI> [WITHCOORD]\n  [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC] [STORE key\n  | STOREDIST key]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"},{"name":"radius","type":"single"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]}],"command":"GEORADIUSBYMEMBER_RO","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","since":"3.2.10","summary":"Returns members from a geospatial index that are within a distance from a member.","syntax":"GEORADIUSBYMEMBER_RO key member radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"name":"longitude","type":"single"},{"name":"latitude","type":"single"},{"name":"radius","type":"single"},{"type":"enum","values":["M","KM","FT","MI"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"},{"type":"enum","values":["COUNT","ANY"]},{"type":"enum","values":["ASC","DESC"]}],"command":"GEORADIUS_RO","complexity":"O(N+log(M)) where N is the number of elements inside the bounding box of the circular area delimited by center and radius and M is the number of items inside the index.","group":"geo","since":"3.2.10","summary":"Returns members from a geospatial index that are within a distance from a coordinate.","syntax":"GEORADIUS_RO key longitude latitude radius <M | KM | FT | MI>\n  [WITHCOORD] [WITHDIST] [WITHHASH] [COUNT count [ANY]] [ASC | DESC]"},{"acl":"@read, @geo, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["FROMMEMBER","FROMLONLAT"]},{"type":"enum","values":["",""]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["COUNT","ANY"]},{"type":"flag","value":"WITHCOORD"},{"type":"flag","value":"WITHDIST"},{"type":"flag","value":"WITHHASH"}],"command":"GEOSEARCH","complexity":"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","group":"geo","since":"6.2.0","summary":"Queries a geospatial index for members inside an area of a box or a circle.","syntax":"GEOSEARCH key <FROMMEMBER member | FROMLONLAT longitude latitude>\n  <BYRADIUS radius <M | KM | FT | MI> | BYBOX width height <M | KM |\n  FT | MI>> [ASC | DESC] [COUNT count [ANY]] [WITHCOORD] [WITHDIST]\n  [WITHHASH]"},{"acl":"@write, @geo, @slow","arguments":[{"name":"destination","type":"single"},{"name":"source","type":"single"},{"type":"enum","values":["FROMMEMBER","FROMLONLAT"]},{"type":"enum","values":["",""]},{"type":"enum","values":["ASC","DESC"]},{"type":"enum","values":["COUNT","ANY"]},{"type":"flag","value":"STOREDIST"}],"command":"GEOSEARCHSTORE","complexity":"O(N+log(M)) where N is the number of elements in the grid-aligned bounding box area around the shape provided as the filter and M is the number of items inside the shape","group":"geo","since":"6.2.0","summary":"Queries a geospatial index for members inside an area of a box or a circle, optionally stores the result.","syntax":"GEOSEARCHSTORE destination source <FROMMEMBER member |\n  FROMLONLAT longitude latitude> <BYRADIUS radius <M | KM | FT | MI>\n  | BYBOX width height <M | KM | FT | MI>> [ASC | DESC] [COUNT count\n  [ANY]] [STOREDIST]"},{"acl":"@read, @string, @fast","arguments":[{"name":"key","type":"single"}],"command":"GET","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Returns the string value of a key.","syntax":"GET key"},{"acl":"@read, @bitmap, @fast","arguments":[{"name":"key","type":"single"},{"name":"offset","type":"single"}],"command":"GETBIT","complexity":"O(1)","group":"bitmap","since":"2.2.0","summary":"Returns a bit value by offset.","syntax":"GETBIT key offset"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"}],"command":"GETDEL","complexity":"O(1)","group":"string","since":"6.2.0","summary":"Returns the string value of a key after deleting the key.","syntax":"GETDEL key"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["EX","PX","EXAT","PXAT","PERSIST"]}],"command":"GETEX","complexity":"O(1)","group":"string","since":"6.2.0","summary":"Returns the string value of a key after setting its expiration time.","syntax":"GETEX key [EX seconds | PX milliseconds | EXAT unix-time-seconds |\n  PXAT unix-time-milliseconds | PERSIST]"},{"acl":"@read, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"end","type":"single"}],"command":"GETRANGE","complexity":"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","group":"string","since":"2.4.0","summary":"Returns a substring of the string stored at a key.","syntax":"GETRANGE key start end"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"}],"command":"GETSET","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Returns the previous string value of a key after setting it to a new value.","syntax":"GETSET key value"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"many"}],"command":"HDEL","complexity":"O(N) where N is the number of fields to be removed.","group":"hash","since":"2.0.0","summary":"Deletes one or more fields and their values from a hash. Deletes the hash if no fields remain.","syntax":"HDEL key field [field ...]"},{"acl":"@fast, @connection","arguments":[{"type":"enum","values":["","AUTH","SETNAME"]}],"command":"HELLO","complexity":"O(1)","group":"connection","since":"6.0.0","summary":"Handshakes with the Redis server.","syntax":"HELLO [protover [AUTH username password] [SETNAME clientname]]"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"}],"command":"HEXISTS","complexity":"O(1)","group":"hash","since":"2.0.0","summary":"Determines whether a field exists in a hash.","syntax":"HEXISTS key field"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"seconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HEXPIRE","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Set expiry for hash field using relative time to expire (seconds)","syntax":"HEXPIRE key seconds [NX | XX | GT | LT] FIELDS numfields field\n  [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"unix-time-seconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HEXPIREAT","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Set expiry for hash field using an absolute Unix timestamp (seconds)","syntax":"HEXPIREAT key unix-time-seconds [NX | XX | GT | LT] FIELDS numfields\n  field [field ...]"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HEXPIRETIME","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Returns the expiration time of a hash field as a Unix timestamp, in seconds.","syntax":"HEXPIRETIME key FIELDS numfields field [field ...]"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"}],"command":"HGET","complexity":"O(1)","group":"hash","since":"2.0.0","summary":"Returns the value of a field in a hash.","syntax":"HGET key field"},{"acl":"@read, @hash, @slow","arguments":[{"name":"key","type":"single"}],"command":"HGETALL","complexity":"O(N) where N is the size of the hash.","group":"hash","since":"2.0.0","summary":"Returns all fields and values in a hash.","syntax":"HGETALL key"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HGETDEL","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"8.0.0","summary":"Returns the value of a field and deletes it from the hash.","syntax":"HGETDEL key FIELDS numfields field [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["EX","PX","EXAT","PXAT","PERSIST"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HGETEX","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"8.0.0","summary":"Get the value of one or more fields of a given hash key, and optionally set their expiration.","syntax":"HGETEX key [EX seconds | PX milliseconds | EXAT unix-time-seconds |\n  PXAT unix-time-milliseconds | PERSIST] FIELDS numfields field\n  [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"},{"name":"increment","type":"single"}],"command":"HINCRBY","complexity":"O(1)","group":"hash","since":"2.0.0","summary":"Increments the integer value of a field in a hash by a number. Uses 0 as initial value if the field doesn't exist.","syntax":"HINCRBY key field increment"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"},{"name":"increment","type":"single"}],"command":"HINCRBYFLOAT","complexity":"O(1)","group":"hash","since":"2.6.0","summary":"Increments the floating point value of a field by a number. Uses 0 as initial value if the field doesn't exist.","syntax":"HINCRBYFLOAT key field increment"},{"acl":"@read, @hash, @slow","arguments":[{"name":"key","type":"single"}],"command":"HKEYS","complexity":"O(N) where N is the size of the hash.","group":"hash","since":"2.0.0","summary":"Returns all fields in a hash.","syntax":"HKEYS key"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"}],"command":"HLEN","complexity":"O(1)","group":"hash","since":"2.0.0","summary":"Returns the number of fields in a hash.","syntax":"HLEN key"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"many"}],"command":"HMGET","complexity":"O(N) where N is the number of fields being requested.","group":"hash","since":"2.0.0","summary":"Returns the values of all fields in a hash.","syntax":"HMGET key field [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field value","type":"many"}],"command":"HMSET","complexity":"O(N) where N is the number of fields being set.","group":"hash","since":"2.0.0","summary":"Sets the values of multiple fields.","syntax":"HMSET key field value [field value ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HPERSIST","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Removes the expiration time for each specified field","syntax":"HPERSIST key FIELDS numfields field [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"milliseconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HPEXPIRE","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Set expiry for hash field using relative time to expire (milliseconds)","syntax":"HPEXPIRE key milliseconds [NX | XX | GT | LT] FIELDS numfields field\n  [field ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"unix-time-milliseconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HPEXPIREAT","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Set expiry for hash field using an absolute Unix timestamp (milliseconds)","syntax":"HPEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]\n  FIELDS numfields field [field ...]"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HPEXPIRETIME","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Returns the expiration time of a hash field as a Unix timestamp, in msec.","syntax":"HPEXPIRETIME key FIELDS numfields field [field ...]"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HPTTL","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Returns the TTL in milliseconds of a hash field.","syntax":"HPTTL key FIELDS numfields field [field ...]"},{"acl":"@read, @hash, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["","WITHVALUES"]}],"command":"HRANDFIELD","complexity":"O(N) where N is the number of fields returned","group":"hash","since":"6.2.0","summary":"Returns one or more random fields from a hash.","syntax":"HRANDFIELD key [count [WITHVALUES]]"},{"acl":"@read, @hash, @slow","arguments":[{"name":"key","type":"single"},{"name":"cursor","type":"single"},{"arg":"pattern","detail":"pattern","key":"MATCH","type":"arg"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"flag","value":"NOVALUES"}],"command":"HSCAN","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"hash","since":"2.8.0","summary":"Iterates over fields and values of a hash.","syntax":"HSCAN key cursor [MATCH pattern] [COUNT count] [NOVALUES]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field value","type":"many"}],"command":"HSET","complexity":"O(1) for each field/value pair added, so O(N) to add N field/value pairs when the command is called with multiple field/value pairs.","group":"hash","since":"2.0.0","summary":"Creates or modifies the value of a field in a hash.","syntax":"HSET key field value [field value ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["FNX","FXX"]},{"type":"enum","values":["EX","PX","EXAT","PXAT","KEEPTTL"]},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HSETEX","complexity":"O(N) where N is the number of fields being set.","group":"hash","since":"8.0.0","summary":"Set the value of one or more fields of a given hash key, and optionally set their expiration.","syntax":"HSETEX key [FNX | FXX] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]\n  FIELDS numfields field value [field value ...]"},{"acl":"@write, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"},{"name":"value","type":"single"}],"command":"HSETNX","complexity":"O(1)","group":"hash","since":"2.0.0","summary":"Sets the value of a field in a hash only when the field doesn't exist.","syntax":"HSETNX key field value"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"name":"field","type":"single"}],"command":"HSTRLEN","complexity":"O(1)","group":"hash","since":"3.2.0","summary":"Returns the length of the value of a field.","syntax":"HSTRLEN key field"},{"acl":"@read, @hash, @fast","arguments":[{"name":"key","type":"single"},{"arg":"fields","detail":"fields","key":"FIELDS","type":"arg"}],"command":"HTTL","complexity":"O(N) where N is the number of specified fields","group":"hash","since":"7.4.0","summary":"Returns the TTL in seconds of a hash field.","syntax":"HTTL key FIELDS numfields field [field ...]"},{"acl":"@read, @hash, @slow","arguments":[{"name":"key","type":"single"}],"command":"HVALS","complexity":"O(N) where N is the size of the hash.","group":"hash","since":"2.0.0","summary":"Returns all values in a hash.","syntax":"HVALS key"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"}],"command":"INCR","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Increments the integer value of a key by one. Uses 0 as initial value if the key doesn't exist.","syntax":"INCR key"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"increment","type":"single"}],"command":"INCRBY","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Increments the integer value of a key by a number. Uses 0 as initial value if the key doesn't exist.","syntax":"INCRBY key increment"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"increment","type":"single"}],"command":"INCRBYFLOAT","complexity":"O(1)","group":"string","since":"2.6.0","summary":"Increment the floating point value of a key by a number. Uses 0 as initial value if the key doesn't exist.","syntax":"INCRBYFLOAT key increment"},{"acl":"@slow, @dangerous","arguments":[{"name":"section","type":"many"}],"command":"INFO","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Returns information and statistics about the server.","syntax":"INFO [section [section ...]]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"many"}],"command":"JSON.ARRAPPEND","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Append one or more JSON values into the array at path after the last element in it.","syntax":"JSON.ARRAPPEND key path value [value ...]"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"},{"type":"enum","values":["",""]}],"command":"JSON.ARRINDEX","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the index of the first occurrence of a JSON scalar value in the array at path","syntax":"JSON.ARRINDEX key path value [start [stop]]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"index","type":"single"},{"name":"value","type":"many"}],"command":"JSON.ARRINSERT","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Inserts the JSON scalar(s) value at the specified index in the array at path","syntax":"JSON.ARRINSERT key path index value [value ...]"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.ARRLEN","complexity":"O(1) where path is evaluated to a single value, O(N) where path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the length of the array at path","syntax":"JSON.ARRLEN key [path]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["",""]}],"command":"JSON.ARRPOP","complexity":"O(N) when path is evaluated to a single value where N is the size of the array and the specified index is not the last element, O(1) when path is evaluated to a single value and the specified index is the last element, or O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Removes and returns the element at the specified index in the array at path","syntax":"JSON.ARRPOP key [path [index]]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"}],"command":"JSON.ARRTRIM","complexity":"O(N) when path is evaluated to a single value where N is the size of the array, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Trims the array at path to contain only the specified inclusive range of indices from start to stop","syntax":"JSON.ARRTRIM key path start stop"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.CLEAR","complexity":"O(N) when path is evaluated to a single value where N is the size of the values, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"2.0.0","summary":"Clears all values from an array or an object and sets numeric values to `0`","syntax":"JSON.CLEAR key [path]"},{"acl":"","arguments":[],"command":"JSON.DEBUG HELP","complexity":"N/A","group":"json","since":"1.0.0","summary":"Shows helpful information","syntax":"JSON.DEBUG HELP"},{"acl":"@json, @read","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.DEBUG MEMORY","complexity":"O(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Reports the size in bytes of a key","syntax":"JSON.DEBUG MEMORY key [path]"},{"acl":"","arguments":[],"command":"JSON.DEBUG","complexity":"N/A","group":"json","since":"1.0.0","summary":"Debugging container command","syntax":"JSON.DEBUG"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.DEL","complexity":"O(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Deletes a value","syntax":"JSON.DEL key [path]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.FORGET","complexity":"O(N) when path is evaluated to a single value where N is the size of the deleted value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Deletes a value","syntax":"JSON.FORGET key [path]"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"arg":"indent","detail":"indent","key":"INDENT","type":"arg"},{"arg":"newline","detail":"newline","key":"NEWLINE","type":"arg"},{"arg":"space","detail":"space","key":"SPACE","type":"arg"},{"name":"path","type":"many"}],"command":"JSON.GET","complexity":"O(N) when path is evaluated to a single value where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Gets the value at one or more paths in JSON serialized form","syntax":"JSON.GET key [INDENT indent] [NEWLINE newline] [SPACE space] [path\n  [path ...]]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"}],"command":"JSON.MERGE","complexity":"O(M+N) when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, O(M+N) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","since":"2.6.0","summary":"Merges a given JSON value into matching paths. Consequently, JSON values at matching paths are updated, deleted, or expanded with new children","syntax":"JSON.MERGE key path value"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"many"},{"name":"path","type":"single"}],"command":"JSON.MGET","complexity":"O(M*N) when path is evaluated to a single value where M is the number of keys and N is the size of the value, O(N1+N2+...+Nm) when path is evaluated to multiple values where m is the number of keys and Ni is the size of the i-th key","group":"json","since":"1.0.0","summary":"Returns the values at a path from one or more keys","syntax":"JSON.MGET key [key ...] path"},{"acl":"@json, @write, @slow","arguments":[{"name":"key path value","type":"many"}],"command":"JSON.MSET","complexity":"O(K*(M+N)) where k is the number of keys in the command, when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, or O(K*(M+N)) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","since":"2.6.0","summary":"Sets or updates the JSON value of one or more keys","syntax":"JSON.MSET key path value [key path value ...]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"}],"command":"JSON.NUMINCRBY","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Increments the numeric value at path by a value","syntax":"JSON.NUMINCRBY key path value"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"}],"command":"JSON.NUMMULTBY","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Multiplies the numeric value at path by a value","syntax":"JSON.NUMMULTBY key path value"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.OBJKEYS","complexity":"O(N) when path is evaluated to a single value, where N is the number of keys in the object, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the JSON keys of the object at path","syntax":"JSON.OBJKEYS key [path]"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.OBJLEN","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the number of keys of the object at path","syntax":"JSON.OBJLEN key [path]"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.RESP","complexity":"O(N) when path is evaluated to a single value, where N is the size of the value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the JSON value at path in Redis Serialization Protocol (RESP)","syntax":"JSON.RESP key [path]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"},{"type":"enum","values":["NX","XX"]}],"command":"JSON.SET","complexity":"O(M+N) when path is evaluated to a single value where M is the size of the original value (if it exists) and N is the size of the new value, O(M+N) when path is evaluated to multiple values where M is the size of the key and N is the size of the new value * the number of original values in the key","group":"json","since":"1.0.0","summary":"Sets or updates the JSON value at a path","syntax":"JSON.SET key path value [NX | XX]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"},{"name":"value","type":"single"}],"command":"JSON.STRAPPEND","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Appends a string to a JSON string value at path","syntax":"JSON.STRAPPEND key [path] value"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.STRLEN","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the length of the JSON String at path in key","syntax":"JSON.STRLEN key [path]"},{"acl":"@json, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.TOGGLE","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"2.0.0","summary":"Toggles a boolean value","syntax":"JSON.TOGGLE key path"},{"acl":"@json, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"path","type":"single"}],"command":"JSON.TYPE","complexity":"O(1) when path is evaluated to a single value, O(N) when path is evaluated to multiple values, where N is the size of the key","group":"json","since":"1.0.0","summary":"Returns the type of the JSON value at path","syntax":"JSON.TYPE key [path]"},{"acl":"@keyspace, @read, @slow, @dangerous","arguments":[{"name":"pattern","type":"single"}],"command":"KEYS","complexity":"O(N) with N being the number of keys in the database, under the assumption that the key names in the database and the given pattern have limited length.","group":"generic","since":"1.0.0","summary":"Returns all key names that match a pattern.","syntax":"KEYS pattern"},{"acl":"@admin, @fast, @dangerous","arguments":[],"command":"LASTSAVE","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Returns the Unix timestamp of the last successful save to disk.","syntax":"LASTSAVE"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"LATENCY DOCTOR","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns a human-readable latency analysis report.","syntax":"LATENCY DOCTOR"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"event","type":"single"}],"command":"LATENCY GRAPH","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns a latency graph for an event.","syntax":"LATENCY GRAPH event"},{"acl":"@slow","arguments":[],"command":"LATENCY HELP","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns helpful text about the different subcommands.","syntax":"LATENCY HELP"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"command","type":"many"}],"command":"LATENCY HISTOGRAM","complexity":"O(N) where N is the number of commands with latency information being retrieved.","group":"server","since":"7.0.0","summary":"Returns the cumulative distribution of latencies of a subset or all commands.","syntax":"LATENCY HISTOGRAM [command [command ...]]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"event","type":"single"}],"command":"LATENCY HISTORY","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns timestamp-latency samples for an event.","syntax":"LATENCY HISTORY event"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"LATENCY LATEST","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Returns the latest latency samples for all events.","syntax":"LATENCY LATEST"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"event","type":"many"}],"command":"LATENCY RESET","complexity":"O(1)","group":"server","since":"2.8.13","summary":"Resets the latency data for one or more events.","syntax":"LATENCY RESET [event [event ...]]"},{"acl":"@slow","arguments":[],"command":"LATENCY","complexity":"Depends on subcommand.","group":"server","since":"2.8.13","summary":"A container for latency diagnostics commands.","syntax":"LATENCY"},{"acl":"@read, @string, @slow","arguments":[{"name":"key1","type":"single"},{"name":"key2","type":"single"},{"type":"flag","value":"LEN"},{"type":"flag","value":"IDX"},{"arg":"min-match-len","detail":"min-match-len","key":"MINMATCHLEN","type":"arg"},{"type":"flag","value":"WITHMATCHLEN"}],"command":"LCS","complexity":"O(N*M) where N and M are the lengths of s1 and s2, respectively","group":"string","since":"7.0.0","summary":"Finds the longest common substring.","syntax":"LCS key1 key2 [LEN] [IDX] [MINMATCHLEN min-match-len] [WITHMATCHLEN]"},{"acl":"@read, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"index","type":"single"}],"command":"LINDEX","complexity":"O(N) where N is the number of elements to traverse to get to the element at index. This makes asking for the first or the last element of the list O(1).","group":"list","since":"1.0.0","summary":"Returns an element from a list by its index.","syntax":"LINDEX key index"},{"acl":"@write, @list, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["BEFORE","AFTER"]},{"name":"pivot","type":"single"},{"name":"element","type":"single"}],"command":"LINSERT","complexity":"O(N) where N is the number of elements to traverse before seeing the value pivot. This means that inserting somewhere on the left end on the list (head) can be considered O(1) and inserting somewhere on the right end (tail) is O(N).","group":"list","since":"2.2.0","summary":"Inserts an element before or after another element in a list.","syntax":"LINSERT key <BEFORE | AFTER> pivot element"},{"acl":"@read, @list, @fast","arguments":[{"name":"key","type":"single"}],"command":"LLEN","complexity":"O(1)","group":"list","since":"1.0.0","summary":"Returns the length of a list.","syntax":"LLEN key"},{"acl":"@write, @list, @slow","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"},{"type":"enum","values":["LEFT","RIGHT"]},{"type":"enum","values":["LEFT","RIGHT"]}],"command":"LMOVE","complexity":"O(1)","group":"list","since":"6.2.0","summary":"Returns an element after popping it from one list and pushing it to another. Deletes the list if the last element was moved.","syntax":"LMOVE source destination <LEFT | RIGHT> <LEFT | RIGHT>"},{"acl":"@write, @list, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"type":"enum","values":["LEFT","RIGHT"]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"LMPOP","complexity":"O(N+M) where N is the number of provided keys and M is the number of elements returned.","group":"list","since":"7.0.0","summary":"Returns multiple elements from a list after removing them. Deletes the list if the last element was popped.","syntax":"LMPOP numkeys key [key ...] <LEFT | RIGHT> [COUNT count]"},{"acl":"@read, @fast","arguments":[{"arg":"version","detail":"version","key":"VERSION","type":"arg"}],"command":"LOLWUT","complexity":null,"group":"server","since":"5.0.0","summary":"Displays computer art and the Redis version","syntax":"LOLWUT [VERSION version]"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"LPOP","complexity":"O(N) where N is the number of elements returned","group":"list","since":"1.0.0","summary":"Returns the first elements in a list after removing it. Deletes the list if the last element was popped.","syntax":"LPOP key [count]"},{"acl":"@read, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"element","type":"single"},{"arg":"rank","detail":"rank","key":"RANK","type":"arg"},{"arg":"num-matches","detail":"num-matches","key":"COUNT","type":"arg"},{"arg":"len","detail":"len","key":"MAXLEN","type":"arg"}],"command":"LPOS","complexity":"O(N) where N is the number of elements in the list, for the average case. When searching for elements near the head or the tail of the list, or when the MAXLEN option is provided, the command may run in constant time.","group":"list","since":"6.0.6","summary":"Returns the index of matching elements in a list.","syntax":"LPOS key element [RANK rank] [COUNT num-matches] [MAXLEN len]"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"element","type":"many"}],"command":"LPUSH","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","since":"1.0.0","summary":"Prepends one or more elements to a list. Creates the key if it doesn't exist.","syntax":"LPUSH key element [element ...]"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"element","type":"many"}],"command":"LPUSHX","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","since":"2.2.0","summary":"Prepends one or more elements to a list only when the list exists.","syntax":"LPUSHX key element [element ...]"},{"acl":"@read, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"}],"command":"LRANGE","complexity":"O(S+N) where S is the distance of start offset from HEAD for small lists, from nearest end (HEAD or TAIL) for large lists; and N is the number of elements in the specified range.","group":"list","since":"1.0.0","summary":"Returns a range of elements from a list.","syntax":"LRANGE key start stop"},{"acl":"@write, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"},{"name":"element","type":"single"}],"command":"LREM","complexity":"O(N+M) where N is the length of the list and M is the number of elements removed.","group":"list","since":"1.0.0","summary":"Removes elements from a list. Deletes the list if the last element was removed.","syntax":"LREM key count element"},{"acl":"@write, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"index","type":"single"},{"name":"element","type":"single"}],"command":"LSET","complexity":"O(N) where N is the length of the list. Setting either the first or the last element of the list is O(1).","group":"list","since":"1.0.0","summary":"Sets the value of an element in a list by its index.","syntax":"LSET key index element"},{"acl":"@write, @list, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"}],"command":"LTRIM","complexity":"O(N) where N is the number of elements to be removed by the operation.","group":"list","since":"1.0.0","summary":"Removes elements from both ends a list. Deletes the list if all elements were trimmed.","syntax":"LTRIM key start stop"},{"acl":"@slow","arguments":[],"command":"MEMORY DOCTOR","complexity":"O(1)","group":"server","since":"4.0.0","summary":"Outputs a memory problems report.","syntax":"MEMORY DOCTOR"},{"acl":"@slow","arguments":[],"command":"MEMORY HELP","complexity":"O(1)","group":"server","since":"4.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"MEMORY HELP"},{"acl":"@slow","arguments":[],"command":"MEMORY MALLOC-STATS","complexity":"Depends on how much memory is allocated, could be slow","group":"server","since":"4.0.0","summary":"Returns the allocator statistics.","syntax":"MEMORY MALLOC-STATS"},{"acl":"@slow","arguments":[],"command":"MEMORY PURGE","complexity":"Depends on how much memory is allocated, could be slow","group":"server","since":"4.0.0","summary":"Asks the allocator to release memory.","syntax":"MEMORY PURGE"},{"acl":"@slow","arguments":[],"command":"MEMORY STATS","complexity":"O(1)","group":"server","since":"4.0.0","summary":"Returns details about memory usage.","syntax":"MEMORY STATS"},{"acl":"@read, @slow","arguments":[{"name":"key","type":"single"},{"arg":"count","detail":"count","key":"SAMPLES","type":"arg"}],"command":"MEMORY USAGE","complexity":"O(N) where N is the number of samples.","group":"server","since":"4.0.0","summary":"Estimates the memory usage of a key.","syntax":"MEMORY USAGE key [SAMPLES count]"},{"acl":"@slow","arguments":[],"command":"MEMORY","complexity":"Depends on subcommand.","group":"server","since":"4.0.0","summary":"A container for memory diagnostics commands.","syntax":"MEMORY"},{"acl":"@read, @string, @fast","arguments":[{"name":"key","type":"many"}],"command":"MGET","complexity":"O(N) where N is the number of keys to retrieve.","group":"string","since":"1.0.0","summary":"Atomically returns the string values of one or more keys.","syntax":"MGET key [key ...]"},{"acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"name":"host","type":"single"},{"name":"port","type":"single"},{"type":"enum","values":["",""]},{"name":"destination-db","type":"single"},{"name":"timeout","type":"single"},{"type":"flag","value":"COPY"},{"type":"flag","value":"REPLACE"},{"type":"enum","values":["AUTH","AUTH2"]},{"arg":"keys","detail":"keys","key":"KEYS","type":"arg"}],"command":"MIGRATE","complexity":"This command actually executes a DUMP+DEL in the source instance, and a RESTORE in the target instance. See the pages of these commands for time complexity. Also an O(N) data transfer between the two instances is performed.","group":"generic","since":"2.6.0","summary":"Atomically transfers a key from one Redis instance to another.","syntax":"MIGRATE host port <key | \"\"> destination-db timeout [COPY] [REPLACE]\n  [AUTH password | AUTH2 username password] [KEYS key [key ...]]"},{"acl":"@slow","arguments":[],"command":"MODULE HELP","complexity":"O(1)","group":"server","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"MODULE HELP"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"MODULE LIST","complexity":"O(N) where N is the number of loaded modules.","group":"server","since":"4.0.0","summary":"Returns all loaded modules.","syntax":"MODULE LIST"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"path","type":"single"},{"name":"arg","type":"many"}],"command":"MODULE LOAD","complexity":"O(1)","group":"server","since":"4.0.0","summary":"Loads a module.","syntax":"MODULE LOAD path [arg [arg ...]]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"path","type":"single"},{"arg":"configs","detail":"configs","key":"CONFIG","type":"arg"},{"arg":"args","detail":"args","key":"ARGS","type":"arg"}],"command":"MODULE LOADEX","complexity":"O(1)","group":"server","since":"7.0.0","summary":"Loads a module using extended parameters.","syntax":"MODULE LOADEX path [CONFIG name value [CONFIG name value ...]]\n  [ARGS args [args ...]]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"name","type":"single"}],"command":"MODULE UNLOAD","complexity":"O(1)","group":"server","since":"4.0.0","summary":"Unloads a module.","syntax":"MODULE UNLOAD name"},{"acl":"@slow","arguments":[],"command":"MODULE","complexity":"Depends on subcommand.","group":"server","since":"4.0.0","summary":"A container for module commands.","syntax":"MODULE"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"MONITOR","complexity":null,"group":"server","since":"1.0.0","summary":"Listens for all requests received by the server in real-time.","syntax":"MONITOR"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"db","type":"single"}],"command":"MOVE","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Moves a key to another database.","syntax":"MOVE key db"},{"acl":"@write, @string, @slow","arguments":[{"name":"key value","type":"many"}],"command":"MSET","complexity":"O(N) where N is the number of keys to set.","group":"string","since":"1.0.1","summary":"Atomically creates or modifies the string values of one or more keys.","syntax":"MSET key value [key value ...]"},{"acl":"@write, @string, @slow","arguments":[{"name":"key value","type":"many"}],"command":"MSETNX","complexity":"O(N) where N is the number of keys to set.","group":"string","since":"1.0.1","summary":"Atomically modifies the string values of one or more keys only when all keys don't exist.","syntax":"MSETNX key value [key value ...]"},{"acl":"@fast, @transaction","arguments":[],"command":"MULTI","complexity":"O(1)","group":"transactions","since":"1.2.0","summary":"Starts a transaction.","syntax":"MULTI"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"key","type":"single"}],"command":"OBJECT ENCODING","complexity":"O(1)","group":"generic","since":"2.2.3","summary":"Returns the internal encoding of a Redis object.","syntax":"OBJECT ENCODING key"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"key","type":"single"}],"command":"OBJECT FREQ","complexity":"O(1)","group":"generic","since":"4.0.0","summary":"Returns the logarithmic access frequency counter of a Redis object.","syntax":"OBJECT FREQ key"},{"acl":"@keyspace, @slow","arguments":[],"command":"OBJECT HELP","complexity":"O(1)","group":"generic","since":"6.2.0","summary":"Returns helpful text about the different subcommands.","syntax":"OBJECT HELP"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"key","type":"single"}],"command":"OBJECT IDLETIME","complexity":"O(1)","group":"generic","since":"2.2.3","summary":"Returns the time since the last access to a Redis object.","syntax":"OBJECT IDLETIME key"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"key","type":"single"}],"command":"OBJECT REFCOUNT","complexity":"O(1)","group":"generic","since":"2.2.3","summary":"Returns the reference count of a value of a key.","syntax":"OBJECT REFCOUNT key"},{"acl":"@slow","arguments":[],"command":"OBJECT","complexity":"Depends on subcommand.","group":"generic","since":"2.2.3","summary":"A container for object introspection commands.","syntax":"OBJECT"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"}],"command":"PERSIST","complexity":"O(1)","group":"generic","since":"2.2.0","summary":"Removes the expiration time of a key.","syntax":"PERSIST key"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"milliseconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]}],"command":"PEXPIRE","complexity":"O(1)","group":"generic","since":"2.6.0","summary":"Sets the expiration time of a key in milliseconds.","syntax":"PEXPIRE key milliseconds [NX | XX | GT | LT]"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"unix-time-milliseconds","type":"single"},{"type":"enum","values":["NX","XX","GT","LT"]}],"command":"PEXPIREAT","complexity":"O(1)","group":"generic","since":"2.6.0","summary":"Sets the expiration time of a key to a Unix milliseconds timestamp.","syntax":"PEXPIREAT key unix-time-milliseconds [NX | XX | GT | LT]"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"PEXPIRETIME","complexity":"O(1)","group":"generic","since":"7.0.0","summary":"Returns the expiration time of a key as a Unix milliseconds timestamp.","syntax":"PEXPIRETIME key"},{"acl":"@write, @hyperloglog, @fast","arguments":[{"name":"key","type":"single"},{"name":"element","type":"many"}],"command":"PFADD","complexity":"O(1) to add every element.","group":"hyperloglog","since":"2.8.9","summary":"Adds elements to a HyperLogLog key. Creates the key if it doesn't exist.","syntax":"PFADD key [element [element ...]]"},{"acl":"@read, @hyperloglog, @slow","arguments":[{"name":"key","type":"many"}],"command":"PFCOUNT","complexity":"O(1) with a very small average constant time when called with a single key. O(N) with N being the number of keys, and much bigger constant times, when called with multiple keys.","group":"hyperloglog","since":"2.8.9","summary":"Returns the approximated cardinality of the set(s) observed by the HyperLogLog key(s).","syntax":"PFCOUNT key [key ...]"},{"acl":"@write, @hyperloglog, @admin, @slow, @dangerous","arguments":[{"name":"subcommand","type":"single"},{"name":"key","type":"single"}],"command":"PFDEBUG","complexity":"N/A","group":"hyperloglog","since":"2.8.9","summary":"Internal commands for debugging HyperLogLog values.","syntax":"PFDEBUG subcommand key"},{"acl":"@write, @hyperloglog, @slow","arguments":[{"name":"destkey","type":"single"},{"name":"sourcekey","type":"many"}],"command":"PFMERGE","complexity":"O(N) to merge N HyperLogLogs, but with high constant times.","group":"hyperloglog","since":"2.8.9","summary":"Merges one or more HyperLogLog values into a single key.","syntax":"PFMERGE destkey [sourcekey [sourcekey ...]]"},{"acl":"@hyperloglog, @admin, @slow, @dangerous","arguments":[],"command":"PFSELFTEST","complexity":"N/A","group":"hyperloglog","since":"2.8.9","summary":"An internal command for testing HyperLogLog values.","syntax":"PFSELFTEST"},{"acl":"@fast, @connection","arguments":[{"name":"message","type":"single"}],"command":"PING","complexity":"O(1)","group":"connection","since":"1.0.0","summary":"Returns the server's liveliness response.","syntax":"PING [message]"},{"acl":"@write, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"milliseconds","type":"single"},{"name":"value","type":"single"}],"command":"PSETEX","complexity":"O(1)","group":"string","since":"2.6.0","summary":"Sets both string value and expiration time in milliseconds of a key. The key is created if it doesn't exist.","syntax":"PSETEX key milliseconds value"},{"acl":"@pubsub, @slow","arguments":[{"name":"pattern","type":"many"}],"command":"PSUBSCRIBE","complexity":"O(N) where N is the number of patterns to subscribe to.","group":"pubsub","since":"2.0.0","summary":"Listens for messages published to channels that match one or more patterns.","syntax":"PSUBSCRIBE pattern [pattern ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"replicationid","type":"single"},{"name":"offset","type":"single"}],"command":"PSYNC","complexity":null,"group":"server","since":"2.8.0","summary":"An internal command used in replication.","syntax":"PSYNC replicationid offset"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"PTTL","complexity":"O(1)","group":"generic","since":"2.6.0","summary":"Returns the expiration time in milliseconds of a key.","syntax":"PTTL key"},{"acl":"@pubsub, @fast","arguments":[{"name":"channel","type":"single"},{"name":"message","type":"single"}],"command":"PUBLISH","complexity":"O(N+M) where N is the number of clients subscribed to the receiving channel and M is the total number of subscribed patterns (by any client).","group":"pubsub","since":"2.0.0","summary":"Posts a message to a channel.","syntax":"PUBLISH channel message"},{"acl":"@pubsub, @slow","arguments":[{"name":"pattern","type":"single"}],"command":"PUBSUB CHANNELS","complexity":"O(N) where N is the number of active channels, and assuming constant time pattern matching (relatively short channels and patterns)","group":"pubsub","since":"2.8.0","summary":"Returns the active channels.","syntax":"PUBSUB CHANNELS [pattern]"},{"acl":"@slow","arguments":[],"command":"PUBSUB HELP","complexity":"O(1)","group":"pubsub","since":"6.2.0","summary":"Returns helpful text about the different subcommands.","syntax":"PUBSUB HELP"},{"acl":"@pubsub, @slow","arguments":[],"command":"PUBSUB NUMPAT","complexity":"O(1)","group":"pubsub","since":"2.8.0","summary":"Returns a count of unique pattern subscriptions.","syntax":"PUBSUB NUMPAT"},{"acl":"@pubsub, @slow","arguments":[{"name":"channel","type":"many"}],"command":"PUBSUB NUMSUB","complexity":"O(N) for the NUMSUB subcommand, where N is the number of requested channels","group":"pubsub","since":"2.8.0","summary":"Returns a count of subscribers to channels.","syntax":"PUBSUB NUMSUB [channel [channel ...]]"},{"acl":"@pubsub, @slow","arguments":[{"name":"pattern","type":"single"}],"command":"PUBSUB SHARDCHANNELS","complexity":"O(N) where N is the number of active shard channels, and assuming constant time pattern matching (relatively short shard channels).","group":"pubsub","since":"7.0.0","summary":"Returns the active shard channels.","syntax":"PUBSUB SHARDCHANNELS [pattern]"},{"acl":"@pubsub, @slow","arguments":[{"name":"shardchannel","type":"many"}],"command":"PUBSUB SHARDNUMSUB","complexity":"O(N) for the SHARDNUMSUB subcommand, where N is the number of requested shard channels","group":"pubsub","since":"7.0.0","summary":"Returns the count of subscribers of shard channels.","syntax":"PUBSUB SHARDNUMSUB [shardchannel [shardchannel ...]]"},{"acl":"@slow","arguments":[],"command":"PUBSUB","complexity":"Depends on subcommand.","group":"pubsub","since":"2.8.0","summary":"A container for Pub/Sub commands.","syntax":"PUBSUB"},{"acl":"@pubsub, @slow","arguments":[{"name":"pattern","type":"many"}],"command":"PUNSUBSCRIBE","complexity":"O(N) where N is the number of patterns to unsubscribe.","group":"pubsub","since":"2.0.0","summary":"Stops listening to messages published to channels that match one or more patterns.","syntax":"PUNSUBSCRIBE [pattern [pattern ...]]"},{"acl":"@fast, @connection","arguments":[],"command":"QUIT","complexity":"O(1)","group":"connection","since":"1.0.0","summary":"Closes the connection.","syntax":"QUIT"},{"acl":"@keyspace, @read, @slow","arguments":[],"command":"RANDOMKEY","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Returns a random key name from the database.","syntax":"RANDOMKEY"},{"acl":"@fast, @connection","arguments":[],"command":"READONLY","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Enables read-only queries for a connection to a Redis Cluster replica node.","syntax":"READONLY"},{"acl":"@fast, @connection","arguments":[],"command":"READWRITE","complexity":"O(1)","group":"cluster","since":"3.0.0","summary":"Enables read-write queries for a connection to a Reids Cluster replica node.","syntax":"READWRITE"},{"acl":"@keyspace, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"newkey","type":"single"}],"command":"RENAME","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Renames a key and overwrites the destination.","syntax":"RENAME key newkey"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"newkey","type":"single"}],"command":"RENAMENX","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Renames a key only when the target key name doesn't exist.","syntax":"RENAMENX key newkey"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"REPLCONF","complexity":"O(1)","group":"server","since":"3.0.0","summary":"An internal command for configuring the replication stream.","syntax":"REPLCONF"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["",""]}],"command":"REPLICAOF","complexity":"O(1)","group":"server","since":"5.0.0","summary":"Configures a server as replica of another, or promotes it to a master.","syntax":"REPLICAOF <host port | NO ONE>"},{"acl":"@fast, @connection","arguments":[],"command":"RESET","complexity":"O(1)","group":"connection","since":"6.2.0","summary":"Resets the connection.","syntax":"RESET"},{"acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"name":"key","type":"single"},{"name":"ttl","type":"single"},{"name":"serialized-value","type":"single"},{"type":"flag","value":"REPLACE"},{"type":"flag","value":"ABSTTL"},{"arg":"seconds","detail":"seconds","key":"IDLETIME","type":"arg"},{"arg":"frequency","detail":"frequency","key":"FREQ","type":"arg"}],"command":"RESTORE-ASKING","complexity":"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","group":"server","since":"3.0.0","summary":"An internal command for migrating keys in a cluster.","syntax":"RESTORE-ASKING key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]"},{"acl":"@keyspace, @write, @slow, @dangerous","arguments":[{"name":"key","type":"single"},{"name":"ttl","type":"single"},{"name":"serialized-value","type":"single"},{"type":"flag","value":"REPLACE"},{"type":"flag","value":"ABSTTL"},{"arg":"seconds","detail":"seconds","key":"IDLETIME","type":"arg"},{"arg":"frequency","detail":"frequency","key":"FREQ","type":"arg"}],"command":"RESTORE","complexity":"O(1) to create the new key and additional O(N*M) to reconstruct the serialized value, where N is the number of Redis objects composing the value and M their average size. For small string values the time complexity is thus O(1)+O(1*M) where M is small, so simply O(1). However for sorted set values the complexity is O(N*M*log(N)) because inserting values into sorted sets is O(log(N)).","group":"generic","since":"2.6.0","summary":"Creates a key from the serialized representation of a value.","syntax":"RESTORE key ttl serialized-value [REPLACE] [ABSTTL]\n  [IDLETIME seconds] [FREQ frequency]"},{"acl":"@admin, @fast, @dangerous","arguments":[],"command":"ROLE","complexity":"O(1)","group":"server","since":"2.8.12","summary":"Returns the replication role.","syntax":"ROLE"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"RPOP","complexity":"O(N) where N is the number of elements returned","group":"list","since":"1.0.0","summary":"Returns and removes the last elements of a list. Deletes the list if the last element was popped.","syntax":"RPOP key [count]"},{"acl":"@write, @list, @slow","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"}],"command":"RPOPLPUSH","complexity":"O(1)","group":"list","since":"1.2.0","summary":"Returns the last element of a list after removing and pushing it to another list. Deletes the list if the last element was popped.","syntax":"RPOPLPUSH source destination"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"element","type":"many"}],"command":"RPUSH","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","since":"1.0.0","summary":"Appends one or more elements to a list. Creates the key if it doesn't exist.","syntax":"RPUSH key element [element ...]"},{"acl":"@write, @list, @fast","arguments":[{"name":"key","type":"single"},{"name":"element","type":"many"}],"command":"RPUSHX","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"list","since":"2.2.0","summary":"Appends an element to a list only when the list exists.","syntax":"RPUSHX key element [element ...]"},{"acl":"@write, @set, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"SADD","complexity":"O(1) for each element added, so O(N) to add N elements when the command is called with multiple arguments.","group":"set","since":"1.0.0","summary":"Adds one or more members to a set. Creates the key if it doesn't exist.","syntax":"SADD key member [member ...]"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"SAVE","complexity":"O(N) where N is the total number of keys in all databases","group":"server","since":"1.0.0","summary":"Synchronously saves the database(s) to disk.","syntax":"SAVE"},{"acl":"@keyspace, @read, @slow","arguments":[{"name":"cursor","type":"single"},{"arg":"pattern","detail":"pattern","key":"MATCH","type":"arg"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"arg":"type","detail":"type","key":"TYPE","type":"arg"}],"command":"SCAN","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"generic","since":"2.8.0","summary":"Iterates over the key names in the database.","syntax":"SCAN cursor [MATCH pattern] [COUNT count] [TYPE type]"},{"acl":"@read, @set, @fast","arguments":[{"name":"key","type":"single"}],"command":"SCARD","complexity":"O(1)","group":"set","since":"1.0.0","summary":"Returns the number of members in a set.","syntax":"SCARD key"},{"acl":"@slow, @scripting","arguments":[{"type":"enum","values":["YES","SYNC","NO"]}],"command":"SCRIPT DEBUG","complexity":"O(1)","group":"scripting","since":"3.2.0","summary":"Sets the debug mode of server-side Lua scripts.","syntax":"SCRIPT DEBUG <YES | SYNC | NO>"},{"acl":"@slow, @scripting","arguments":[{"name":"sha1","type":"many"}],"command":"SCRIPT EXISTS","complexity":"O(N) with N being the number of scripts to check (so checking a single script is an O(1) operation).","group":"scripting","since":"2.6.0","summary":"Determines whether server-side Lua scripts exist in the script cache.","syntax":"SCRIPT EXISTS sha1 [sha1 ...]"},{"acl":"@slow, @scripting","arguments":[{"type":"enum","values":["ASYNC","SYNC"]}],"command":"SCRIPT FLUSH","complexity":"O(N) with N being the number of scripts in cache","group":"scripting","since":"2.6.0","summary":"Removes all server-side Lua scripts from the script cache.","syntax":"SCRIPT FLUSH [ASYNC | SYNC]"},{"acl":"@slow, @scripting","arguments":[],"command":"SCRIPT HELP","complexity":"O(1)","group":"scripting","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"SCRIPT HELP"},{"acl":"@slow, @scripting","arguments":[],"command":"SCRIPT KILL","complexity":"O(1)","group":"scripting","since":"2.6.0","summary":"Terminates a server-side Lua script during execution.","syntax":"SCRIPT KILL"},{"acl":"@slow, @scripting","arguments":[{"name":"script","type":"single"}],"command":"SCRIPT LOAD","complexity":"O(N) with N being the length in bytes of the script body.","group":"scripting","since":"2.6.0","summary":"Loads a server-side Lua script to the script cache.","syntax":"SCRIPT LOAD script"},{"acl":"@slow","arguments":[],"command":"SCRIPT","complexity":"Depends on subcommand.","group":"scripting","since":"2.6.0","summary":"A container for Lua scripts management commands.","syntax":"SCRIPT"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"many"}],"command":"SDIFF","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","since":"1.0.0","summary":"Returns the difference of multiple sets.","syntax":"SDIFF key [key ...]"},{"acl":"@write, @set, @slow","arguments":[{"name":"destination","type":"single"},{"name":"key","type":"many"}],"command":"SDIFFSTORE","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","since":"1.0.0","summary":"Stores the difference of multiple sets in a key.","syntax":"SDIFFSTORE destination key [key ...]"},{"acl":"@fast, @connection","arguments":[{"name":"index","type":"single"}],"command":"SELECT","complexity":"O(1)","group":"connection","since":"1.0.0","summary":"Changes the selected database.","syntax":"SELECT index"},{"acl":"@write, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"},{"type":"enum","values":["NX","XX"]},{"type":"flag","value":"GET"},{"type":"enum","values":["EX","PX","EXAT","PXAT","KEEPTTL"]}],"command":"SET","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Sets the string value of a key, ignoring its type. The key is created if it doesn't exist.","syntax":"SET key value [NX | XX] [GET] [EX seconds | PX milliseconds |\n  EXAT unix-time-seconds | PXAT unix-time-milliseconds | KEEPTTL]"},{"acl":"@write, @bitmap, @slow","arguments":[{"name":"key","type":"single"},{"name":"offset","type":"single"},{"name":"value","type":"single"}],"command":"SETBIT","complexity":"O(1)","group":"bitmap","since":"2.2.0","summary":"Sets or clears the bit at offset of the string value. Creates the key if it doesn't exist.","syntax":"SETBIT key offset value"},{"acl":"@write, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"seconds","type":"single"},{"name":"value","type":"single"}],"command":"SETEX","complexity":"O(1)","group":"string","since":"2.0.0","summary":"Sets the string value and expiration time of a key. Creates the key if it doesn't exist.","syntax":"SETEX key seconds value"},{"acl":"@write, @string, @fast","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"}],"command":"SETNX","complexity":"O(1)","group":"string","since":"1.0.0","summary":"Set the string value of a key only when the key doesn't exist.","syntax":"SETNX key value"},{"acl":"@write, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"offset","type":"single"},{"name":"value","type":"single"}],"command":"SETRANGE","complexity":"O(1), not counting the time taken to copy the new string in place. Usually, this string is very small so the amortized complexity is O(1). Otherwise, complexity is O(M) with M being the length of the value argument.","group":"string","since":"2.2.0","summary":"Overwrites a part of a string value with another by an offset. Creates the key if it doesn't exist.","syntax":"SETRANGE key offset value"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["NOSAVE","SAVE"]},{"type":"flag","value":"NOW"},{"type":"flag","value":"FORCE"},{"type":"flag","value":"ABORT"}],"command":"SHUTDOWN","complexity":"O(N) when saving, where N is the total number of keys in all databases when saving data, otherwise O(1)","group":"server","since":"1.0.0","summary":"Synchronously saves the database(s) to disk and shuts down the Redis server.","syntax":"SHUTDOWN [NOSAVE | SAVE] [NOW] [FORCE] [ABORT]"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"many"}],"command":"SINTER","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","since":"1.0.0","summary":"Returns the intersect of multiple sets.","syntax":"SINTER key [key ...]"},{"acl":"@read, @set, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"SINTERCARD","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","since":"7.0.0","summary":"Returns the number of members of the intersect of multiple sets.","syntax":"SINTERCARD numkeys key [key ...] [LIMIT limit]"},{"acl":"@write, @set, @slow","arguments":[{"name":"destination","type":"single"},{"name":"key","type":"many"}],"command":"SINTERSTORE","complexity":"O(N*M) worst case where N is the cardinality of the smallest set and M is the number of sets.","group":"set","since":"1.0.0","summary":"Stores the intersect of multiple sets in a key.","syntax":"SINTERSTORE destination key [key ...]"},{"acl":"@read, @set, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"}],"command":"SISMEMBER","complexity":"O(1)","group":"set","since":"1.0.0","summary":"Determines whether a member belongs to a set.","syntax":"SISMEMBER key member"},{"acl":"@admin, @slow, @dangerous","arguments":[{"type":"enum","values":["",""]}],"command":"SLAVEOF","complexity":"O(1)","group":"server","since":"1.0.0","summary":"Sets a Redis server as a replica of another, or promotes it to being a master.","syntax":"SLAVEOF <host port | NO ONE>"},{"acl":"@admin, @slow, @dangerous","arguments":[{"name":"count","type":"single"}],"command":"SLOWLOG GET","complexity":"O(N) where N is the number of entries returned","group":"server","since":"2.2.12","summary":"Returns the slow log's entries.","syntax":"SLOWLOG GET [count]"},{"acl":"@slow","arguments":[],"command":"SLOWLOG HELP","complexity":"O(1)","group":"server","since":"6.2.0","summary":"Show helpful text about the different subcommands","syntax":"SLOWLOG HELP"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"SLOWLOG LEN","complexity":"O(1)","group":"server","since":"2.2.12","summary":"Returns the number of entries in the slow log.","syntax":"SLOWLOG LEN"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"SLOWLOG RESET","complexity":"O(N) where N is the number of entries in the slowlog","group":"server","since":"2.2.12","summary":"Clears all entries from the slow log.","syntax":"SLOWLOG RESET"},{"acl":"@slow","arguments":[],"command":"SLOWLOG","complexity":"Depends on subcommand.","group":"server","since":"2.2.12","summary":"A container for slow log commands.","syntax":"SLOWLOG"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"single"}],"command":"SMEMBERS","complexity":"O(N) where N is the set cardinality.","group":"set","since":"1.0.0","summary":"Returns all members of a set.","syntax":"SMEMBERS key"},{"acl":"@read, @set, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"SMISMEMBER","complexity":"O(N) where N is the number of elements being checked for membership","group":"set","since":"6.2.0","summary":"Determines whether multiple members belong to a set.","syntax":"SMISMEMBER key member [member ...]"},{"acl":"@write, @set, @fast","arguments":[{"name":"source","type":"single"},{"name":"destination","type":"single"},{"name":"member","type":"single"}],"command":"SMOVE","complexity":"O(1)","group":"set","since":"1.0.0","summary":"Moves a member from one set to another.","syntax":"SMOVE source destination member"},{"acl":"@write, @set, @sortedset, @list, @slow, @dangerous","arguments":[{"name":"key","type":"single"},{"arg":"by-pattern","detail":"by-pattern","key":"BY","type":"arg"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"},{"arg":"get-pattern","detail":"get-pattern","key":"GET","type":"arg"},{"type":"enum","values":["ASC","DESC"]},{"type":"flag","value":"ALPHA"},{"arg":"destination","detail":"destination","key":"STORE","type":"arg"}],"command":"SORT","complexity":"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","group":"generic","since":"1.0.0","summary":"Sorts the elements in a list, a set, or a sorted set, optionally storing the result.","syntax":"SORT key [BY pattern] [LIMIT offset count] [GET pattern [GET pattern\n  ...]] [ASC | DESC] [ALPHA] [STORE destination]"},{"acl":"@read, @set, @sortedset, @list, @slow, @dangerous","arguments":[{"name":"key","type":"single"},{"arg":"by-pattern","detail":"by-pattern","key":"BY","type":"arg"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"},{"arg":"get-pattern","detail":"get-pattern","key":"GET","type":"arg"},{"type":"enum","values":["ASC","DESC"]},{"type":"flag","value":"ALPHA"}],"command":"SORT_RO","complexity":"O(N+M*log(M)) where N is the number of elements in the list or set to sort, and M the number of returned elements. When the elements are not sorted, complexity is O(N).","group":"generic","since":"7.0.0","summary":"Returns the sorted elements of a list, a set, or a sorted set.","syntax":"SORT_RO key [BY pattern] [LIMIT offset count] [GET pattern [GET\n  pattern ...]] [ASC | DESC] [ALPHA]"},{"acl":"@write, @set, @fast","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"SPOP","complexity":"Without the count argument O(1), otherwise O(N) where N is the value of the passed count.","group":"set","since":"1.0.0","summary":"Returns one or more random members from a set after removing them. Deletes the set if the last member was popped.","syntax":"SPOP key [count]"},{"acl":"@pubsub, @fast","arguments":[{"name":"shardchannel","type":"single"},{"name":"message","type":"single"}],"command":"SPUBLISH","complexity":"O(N) where N is the number of clients subscribed to the receiving shard channel.","group":"pubsub","since":"7.0.0","summary":"Post a message to a shard channel","syntax":"SPUBLISH shardchannel message"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"SRANDMEMBER","complexity":"Without the count argument O(1), otherwise O(N) where N is the absolute value of the passed count.","group":"set","since":"1.0.0","summary":"Get one or multiple random members from a set","syntax":"SRANDMEMBER key [count]"},{"acl":"@write, @set, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"SREM","complexity":"O(N) where N is the number of members to be removed.","group":"set","since":"1.0.0","summary":"Removes one or more members from a set. Deletes the set if the last member was removed.","syntax":"SREM key member [member ...]"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"single"},{"name":"cursor","type":"single"},{"arg":"pattern","detail":"pattern","key":"MATCH","type":"arg"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"SSCAN","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"set","since":"2.8.0","summary":"Iterates over members of a set.","syntax":"SSCAN key cursor [MATCH pattern] [COUNT count]"},{"acl":"@pubsub, @slow","arguments":[{"name":"shardchannel","type":"many"}],"command":"SSUBSCRIBE","complexity":"O(N) where N is the number of shard channels to subscribe to.","group":"pubsub","since":"7.0.0","summary":"Listens for messages published to shard channels.","syntax":"SSUBSCRIBE shardchannel [shardchannel ...]"},{"acl":"@read, @string, @fast","arguments":[{"name":"key","type":"single"}],"command":"STRLEN","complexity":"O(1)","group":"string","since":"2.2.0","summary":"Returns the length of a string value.","syntax":"STRLEN key"},{"acl":"@pubsub, @slow","arguments":[{"name":"channel","type":"many"}],"command":"SUBSCRIBE","complexity":"O(N) where N is the number of channels to subscribe to.","group":"pubsub","since":"2.0.0","summary":"Listens for messages published to channels.","syntax":"SUBSCRIBE channel [channel ...]"},{"acl":"@read, @string, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"end","type":"single"}],"command":"SUBSTR","complexity":"O(N) where N is the length of the returned string. The complexity is ultimately determined by the returned length, but because creating a substring from an existing string is very cheap, it can be considered O(1) for small strings.","group":"string","since":"1.0.0","summary":"Returns a substring from a string value.","syntax":"SUBSTR key start end"},{"acl":"@read, @set, @slow","arguments":[{"name":"key","type":"many"}],"command":"SUNION","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","since":"1.0.0","summary":"Returns the union of multiple sets.","syntax":"SUNION key [key ...]"},{"acl":"@write, @set, @slow","arguments":[{"name":"destination","type":"single"},{"name":"key","type":"many"}],"command":"SUNIONSTORE","complexity":"O(N) where N is the total number of elements in all given sets.","group":"set","since":"1.0.0","summary":"Stores the union of multiple sets in a key.","syntax":"SUNIONSTORE destination key [key ...]"},{"acl":"@pubsub, @slow","arguments":[{"name":"shardchannel","type":"many"}],"command":"SUNSUBSCRIBE","complexity":"O(N) where N is the number of shard channels to unsubscribe.","group":"pubsub","since":"7.0.0","summary":"Stops listening to messages posted to shard channels.","syntax":"SUNSUBSCRIBE [shardchannel [shardchannel ...]]"},{"acl":"@keyspace, @write, @fast, @dangerous","arguments":[{"name":"index1","type":"single"},{"name":"index2","type":"single"}],"command":"SWAPDB","complexity":"O(N) where N is the count of clients watching or blocking on keys from both databases.","group":"server","since":"4.0.0","summary":"Swaps two Redis databases.","syntax":"SWAPDB index1 index2"},{"acl":"@admin, @slow, @dangerous","arguments":[],"command":"SYNC","complexity":null,"group":"server","since":"1.0.0","summary":"An internal command used in replication.","syntax":"SYNC"},{"acl":"@tdigest, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"value","type":"many"}],"command":"TDIGEST.ADD","complexity":"O(N) , where N is the number of samples to add","group":"tdigest","since":"2.4.0","summary":"Adds one or more observations to a t-digest sketch","syntax":"TDIGEST.ADD key value [value ...]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"rank","type":"many"}],"command":"TDIGEST.BYRANK","complexity":"O(N) where N is the number of ranks specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each input rank, a floating-point estimation of the value with that rank","syntax":"TDIGEST.BYRANK key rank [rank ...]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"reverse_rank","type":"many"}],"command":"TDIGEST.BYREVRANK","complexity":"O(N) where N is the number of reverse ranks specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each input reverse rank, an estimation of the floating-point value with that reverse rank","syntax":"TDIGEST.BYREVRANK key reverse_rank [reverse_rank ...]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"value","type":"many"}],"command":"TDIGEST.CDF","complexity":"O(N) where N is the number of values specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each input value, an estimation of the floating-point fraction of (observations smaller than the given value + half the observations equal to the given value)","syntax":"TDIGEST.CDF key value [value ...]"},{"acl":"@tdigest, @write","arguments":[{"name":"key","type":"single"},{"arg":"compression","detail":"compression","key":"COMPRESSION","type":"arg"}],"command":"TDIGEST.CREATE","complexity":"O(1)","group":"tdigest","since":"2.4.0","summary":"Allocates memory and initializes a new t-digest sketch","syntax":"TDIGEST.CREATE key [COMPRESSION compression]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"}],"command":"TDIGEST.INFO","complexity":"O(1)","group":"tdigest","since":"2.4.0","summary":"Returns information and statistics about a t-digest sketch","syntax":"TDIGEST.INFO key"},{"acl":"@tdigest, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"TDIGEST.MAX","complexity":"O(1)","group":"tdigest","since":"2.4.0","summary":"Returns the maximum observation value from a t-digest sketch","syntax":"TDIGEST.MAX key"},{"acl":"@tdigest, @write, @slow","arguments":[{"name":"destination-key","type":"single"},{"name":"numkeys","type":"single"},{"name":"source-key","type":"many"},{"type":"enum","values":["COMPRESSION",""]},{"type":"flag","value":"OVERRIDE"}],"command":"TDIGEST.MERGE","complexity":"O(N*K), where N is the number of centroids and K being the number of input sketches","group":"tdigest","since":"2.4.0","summary":"Merges multiple t-digest sketches into a single sketch","syntax":"TDIGEST.MERGE destination-key numkeys source-key [source-key ...]\n  [COMPRESSION compression] [OVERRIDE]"},{"acl":"@tdigest, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"TDIGEST.MIN","complexity":"O(1)","group":"tdigest","since":"2.4.0","summary":"Returns the minimum observation value from a t-digest sketch","syntax":"TDIGEST.MIN key"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"quantile","type":"many"}],"command":"TDIGEST.QUANTILE","complexity":"O(N) where N is the number of quantiles specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each input fraction, a floating-point estimation of the value that is smaller than the given fraction of observations","syntax":"TDIGEST.QUANTILE key quantile [quantile ...]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"value","type":"many"}],"command":"TDIGEST.RANK","complexity":"O(N) where N is the number of values specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each floating-point input value, the estimated rank of the value (the number of observations in the sketch that are smaller than the value + half the number of observations that are equal to the value)","syntax":"TDIGEST.RANK key value [value ...]"},{"acl":"@tdigest, @write, @fast","arguments":[{"name":"key","type":"single"}],"command":"TDIGEST.RESET","complexity":"O(1)","group":"tdigest","since":"2.4.0","summary":"Resets a t-digest sketch (empties the sketch and re-initializes it).","syntax":"TDIGEST.RESET key"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"value","type":"many"}],"command":"TDIGEST.REVRANK","complexity":"O(N) where N is the number of values specified.","group":"tdigest","since":"2.4.0","summary":"Returns, for each floating-point input value, the estimated reverse rank of the value (the number of observations in the sketch that are larger than the value + half the number of observations that are equal to the value)","syntax":"TDIGEST.REVRANK key value [value ...]"},{"acl":"@tdigest, @read","arguments":[{"name":"key","type":"single"},{"name":"low_cut_quantile","type":"single"},{"name":"high_cut_quantile","type":"single"}],"command":"TDIGEST.TRIMMED_MEAN","complexity":"O(N) where N is the number of centroids","group":"tdigest","since":"2.4.0","summary":"Returns an estimation of the mean value from the sketch, excluding observation values outside the low and high cutoff quantiles","syntax":"TDIGEST.TRIMMED_MEAN key low_cut_quantile high_cut_quantile"},{"acl":"@fast","arguments":[],"command":"TIME","complexity":"O(1)","group":"server","since":"2.6.0","summary":"Returns the server time.","syntax":"TIME"},{"acl":"@topk, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"items","type":"many"}],"command":"TOPK.ADD","complexity":"O(n * k) where n is the number of items and k is the depth","group":"topk","since":"2.0.0","summary":"Increases the count of one or more items by increment","syntax":"TOPK.ADD key items [items ...]"},{"acl":"@topk, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"TOPK.COUNT","complexity":"O(n) where n is the number of items","group":"topk","since":"2.0.0","summary":"Return the count for one or more items in a sketch","syntax":"TOPK.COUNT key item [item ...]"},{"acl":"@topk, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"item increment","type":"many"}],"command":"TOPK.INCRBY","complexity":"O(n * k * incr) where n is the number of items, k is the depth and incr is the increment","group":"topk","since":"2.0.0","summary":"Increases the count of one or more items by increment","syntax":"TOPK.INCRBY key item increment [item increment ...]"},{"acl":"@topk, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"TOPK.INFO","complexity":"O(1)","group":"topk","since":"2.0.0","summary":"Returns information about a sketch","syntax":"TOPK.INFO key"},{"acl":"@topk, @read, @slow","arguments":[{"name":"key","type":"single"},{"type":"flag","value":"WITHCOUNT"}],"command":"TOPK.LIST","complexity":"O(k*log(k)) where k is the value of top-k","group":"topk","since":"2.0.0","summary":"Return the full list of items in the Top-K sketch","syntax":"TOPK.LIST key [WITHCOUNT]"},{"acl":"@topk, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"item","type":"many"}],"command":"TOPK.QUERY","complexity":"O(n) where n is the number of items","group":"topk","since":"2.0.0","summary":"Checks whether one or more items are in a sketch","syntax":"TOPK.QUERY key item [item ...]"},{"acl":"@topk, @write, @fast","arguments":[{"name":"key","type":"single"},{"name":"topk","type":"single"},{"type":"enum","values":["","",""]}],"command":"TOPK.RESERVE","complexity":"O(1)","group":"topk","since":"2.0.0","summary":"Initializes a Top-K sketch with specified parameters","syntax":"TOPK.RESERVE key topk [width depth decay]"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"many"}],"command":"TOUCH","complexity":"O(N) where N is the number of keys that will be touched.","group":"generic","since":"3.2.1","summary":"Returns the number of existing keys out of those specified after updating the time they were last accessed.","syntax":"TOUCH key [key ...]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"timestamp","type":"single"},{"name":"value","type":"single"},{"arg":"retentionPeriod","detail":"retentionPeriod","key":"RETENTION","type":"arg"},{"arg":"enc","detail":"enc","key":"ENCODING","type":"arg"},{"arg":"size","detail":"size","key":"CHUNK_SIZE","type":"arg"},{"arg":"policy","detail":"policy","key":"DUPLICATE_POLICY","type":"arg"},{"arg":"policy_ovr","detail":"policy_ovr","key":"ON_DUPLICATE","type":"arg"},{"arg":"labels","detail":"labels","key":"LABELS","type":"arg"}],"command":"TS.ADD","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","since":"1.0.0","summary":"Append a sample to a time series","syntax":"TS.ADD key timestamp value [RETENTION retentionPeriod]\n  [ENCODING <COMPRESSED | UNCOMPRESSED>] [CHUNK_SIZE size]\n  [DUPLICATE_POLICY policy] \n  [ON_DUPLICATE <BLOCK | FIRST | LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff]\n  [LABELS [label value ...]]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key","type":"single"},{"arg":"retentionPeriod","detail":"retentionPeriod","key":"RETENTION","type":"arg"},{"arg":"size","detail":"size","key":"CHUNK_SIZE","type":"arg"},{"arg":"policy","detail":"policy","key":"DUPLICATE_POLICY","type":"arg"},{"arg":"labels","detail":"labels","key":"LABELS","type":"arg"}],"command":"TS.ALTER","complexity":"O(N) where N is the number of labels requested to update","group":"timeseries","since":"1.0.0","summary":"Update the retention, chunk size, duplicate policy, and labels of an existing time series","syntax":"TS.ALTER key [RETENTION retentionPeriod] [CHUNK_SIZE size]\n  [DUPLICATE_POLICY <BLOCK | FIRST | LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff] \n  [LABELS [label value ...]]"},{"acl":"@timeseries, @write, @fast","arguments":[{"name":"key","type":"single"},{"arg":"retentionPeriod","detail":"retentionPeriod","key":"RETENTION","type":"arg"},{"arg":"enc","detail":"enc","key":"ENCODING","type":"arg"},{"arg":"size","detail":"size","key":"CHUNK_SIZE","type":"arg"},{"arg":"policy","detail":"policy","key":"DUPLICATE_POLICY","type":"arg"},{"arg":"labels","detail":"labels","key":"LABELS","type":"arg"}],"command":"TS.CREATE","complexity":"O(1)","group":"timeseries","since":"1.0.0","summary":"Create a new time series","syntax":"TS.CREATE key [RETENTION retentionPeriod] [ENCODING <COMPRESSED |\n  UNCOMPRESSED>] [CHUNK_SIZE size] [DUPLICATE_POLICY <BLOCK | FIRST |\n  LAST | MIN | MAX | SUM>]\n  [IGNORE ignoreMaxTimediff ignoreMaxValDiff]\n  [LABELS [label value ...]]"},{"acl":"@timeseries, @write, @fast","arguments":[{"name":"sourceKey","type":"single"},{"name":"destKey","type":"single"},{"arg":"aggregator","detail":"aggregator","key":"AGGREGATION","type":"arg"},{"name":"bucketDuration","type":"single"},{"name":"alignTimestamp","type":"single"}],"command":"TS.CREATERULE","complexity":"O(1)","group":"timeseries","since":"1.0.0","summary":"Create a compaction rule","syntax":"TS.CREATERULE sourceKey destKey AGGREGATION <AVG | FIRST | LAST |\n  MIN | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S |\n  TWA> bucketDuration [alignTimestamp]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"},{"arg":"timestamp","detail":"timestamp","key":"TIMESTAMP","type":"arg"},{"arg":"retentionPeriod","detail":"retentionPeriod","key":"RETENTION","type":"arg"},{"arg":"enc","detail":"enc","key":"ENCODING","type":"arg"},{"arg":"size","detail":"size","key":"CHUNK_SIZE","type":"arg"},{"arg":"policy","detail":"policy","key":"DUPLICATE_POLICY","type":"arg"},{"arg":"labels","detail":"labels","key":"LABELS","type":"arg"}],"command":"TS.DECRBY","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","since":"1.0.0","summary":"Decrease the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given decrement","syntax":"TS.DECRBY key value [TIMESTAMP timestamp]\n  [RETENTION retentionPeriod] [ENCODING <COMPRESSED|UNCOMPRESSED>] [CHUNK_SIZE size]\n [DUPLICATE_POLICY policy] [LABELS [label value ...]]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"from_timestamp","type":"single"},{"name":"to_timestamp","type":"single"}],"command":"TS.DEL","complexity":"O(N) where N is the number of data points that will be removed","group":"timeseries","since":"1.6.0","summary":"Delete all samples between two timestamps for a given time series","syntax":"TS.DEL key from_timestamp to_timestamp"},{"acl":"@timeseries, @write, @fast","arguments":[{"name":"sourceKey","type":"single"},{"name":"destKey","type":"single"}],"command":"TS.DELETERULE","complexity":"O(1)","group":"timeseries","since":"1.0.0","summary":"Delete a compaction rule","syntax":"TS.DELETERULE sourceKey destKey"},{"acl":"@timeseries, @read, @fast","arguments":[{"name":"key","type":"single"},{"name":"LATEST","type":"single"}],"command":"TS.GET","complexity":"O(1)","group":"timeseries","since":"1.0.0","summary":"Get the sample with the highest timestamp from a given time series","syntax":"TS.GET key [LATEST]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key","type":"single"},{"name":"value","type":"single"},{"arg":"timestamp","detail":"timestamp","key":"TIMESTAMP","type":"arg"},{"arg":"retentionPeriod","detail":"retentionPeriod","key":"RETENTION","type":"arg"},{"arg":"enc","detail":"enc","key":"ENCODING","type":"arg"},{"arg":"size","detail":"size","key":"CHUNK_SIZE","type":"arg"},{"arg":"policy","detail":"policy","key":"DUPLICATE_POLICY","type":"arg"},{"arg":"labels","detail":"labels","key":"LABELS","type":"arg"}],"command":"TS.INCRBY","complexity":"O(M) when M is the amount of compaction rules or O(1) with no compaction","group":"timeseries","since":"1.0.0","summary":"Increase the value of the sample with the maximum existing timestamp, or create a new sample with a value equal to the value of the sample with the maximum existing timestamp with a given increment","syntax":"TS.INCRBY key value [TIMESTAMP timestamp]\n  [RETENTION retentionPeriod] [ENCODING <COMPRESSED|UNCOMPRESSED>] [CHUNK_SIZE size]\n [DUPLICATE_POLICY policy] [LABELS [label value ...]]"},{"acl":"@timeseries, @read, @fast","arguments":[{"name":"key","type":"single"},{"name":"DEBUG","type":"single"}],"command":"TS.INFO","complexity":"O(1)","group":"timeseries","since":"1.0.0","summary":"Returns information and statistics for a time series","syntax":"TS.INFO key [DEBUG]"},{"acl":"@timeseries, @write, @slow","arguments":[{"name":"key timestamp value","type":"many"}],"command":"TS.MADD","complexity":"O(N*M) when N is the amount of series updated and M is the amount of compaction rules or O(N) with no compaction","group":"timeseries","since":"1.0.0","summary":"Append new samples to one or more time series","syntax":"TS.MADD key timestamp value [key timestamp value ...]"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"LATEST","type":"single"},{"type":"enum","values":["WITHLABELS",""]},{"arg":"filterExpr","detail":"filterExpr","key":"FILTER","type":"arg"}],"command":"TS.MGET","complexity":"O(n) where n is the number of time-series that match the filters","group":"timeseries","since":"1.0.0","summary":"Get the sample with the highest timestamp from each time series matching a specific filter","syntax":"TS.MGET [LATEST] [WITHLABELS | <SELECTED_LABELS label1 [label1 ...]>]\n  FILTER <l=v | l!=v | l= | l!= | l=(v1,v2,...) | l!=(v1,v2,...)\n  [l=v | l!=v | l= | l!= | l=(v1,v2,...) | l!=(v1,v2,...) ...]>"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"fromTimestamp","type":"single"},{"name":"toTimestamp","type":"single"},{"name":"LATEST","type":"single"},{"arg":"Timestamp","detail":"Timestamp","key":"FILTER_BY_TS","type":"arg"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"enum","values":["WITHLABELS",""]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]},{"arg":"filterExpr","detail":"filterExpr","key":"FILTER","type":"arg"},{"type":"enum","values":["GROUPBY","","",""]}],"command":"TS.MRANGE","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges","group":"timeseries","since":"1.0.0","summary":"Query a range across multiple time series by filters in forward direction","syntax":"TS.MRANGE fromTimestamp toTimestamp [LATEST] [FILTER_BY_TS Timestamp\n  [Timestamp ...]] [FILTER_BY_VALUE min max] [WITHLABELS |\n  <SELECTED_LABELS label1 [label1 ...]>] [COUNT count] [[ALIGN value]\n  AGGREGATION <AVG | FIRST | LAST | MIN | MAX | SUM | RANGE | COUNT\n  | STD.P | STD.S | VAR.P | VAR.S | TWA> bucketDuration\n  [BUCKETTIMESTAMP] [EMPTY]] FILTER <l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) [l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) ...]> [GROUPBY label REDUCE\n  reducer]"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"fromTimestamp","type":"single"},{"name":"toTimestamp","type":"single"},{"name":"LATEST","type":"single"},{"arg":"Timestamp","detail":"Timestamp","key":"FILTER_BY_TS","type":"arg"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"type":"enum","values":["WITHLABELS",""]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]},{"arg":"filterExpr","detail":"filterExpr","key":"FILTER","type":"arg"},{"type":"enum","values":["GROUPBY","","",""]}],"command":"TS.MREVRANGE","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested ranges","group":"timeseries","since":"1.4.0","summary":"Query a range across multiple time-series by filters in reverse direction","syntax":"TS.MREVRANGE fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [WITHLABELS | <SELECTED_LABELS label1 [label1 ...]>] [COUNT count]\n  [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN | MAX | SUM |\n  RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]] FILTER <l=v | l!=v | l=\n  | l!= | l=(v1,v2,...) | l!=(v1,v2,...) [l=v | l!=v | l= | l!= |\n  l=(v1,v2,...) | l!=(v1,v2,...) ...]> [GROUPBY label REDUCE\n  reducer]"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"l=v l!=v l= l!= l=(v1,v2,...) l!=(v1,v2,...)","type":"many"}],"command":"TS.QUERYINDEX","complexity":"O(n) where n is the number of time-series that match the filters","group":"timeseries","since":"1.0.0","summary":"Get all time series keys matching a filter list","syntax":"TS.QUERYINDEX <l=v | l!=v | l= | l!= | l=(v1,v2,...) |\n  l!=(v1,v2,...) [l=v | l!=v | l= | l!= | l=(v1,v2,...) |\n  l!=(v1,v2,...) ...]>"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"fromTimestamp","type":"single"},{"name":"toTimestamp","type":"single"},{"name":"LATEST","type":"single"},{"arg":"Timestamp","detail":"Timestamp","key":"FILTER_BY_TS","type":"arg"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]}],"command":"TS.RANGE","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range","group":"timeseries","since":"1.0.0","summary":"Query a range in forward direction","syntax":"TS.RANGE key fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [COUNT count] [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN\n  | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]]"},{"acl":"@timeseries, @read, @slow","arguments":[{"name":"key","type":"single"},{"name":"fromTimestamp","type":"single"},{"name":"toTimestamp","type":"single"},{"name":"LATEST","type":"single"},{"arg":"Timestamp","detail":"Timestamp","key":"FILTER_BY_TS","type":"arg"},{"type":"enum","values":["FILTER_BY_VALUE","",""]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"enum","values":["ALIGN","AGGREGATION","","BUCKETTIMESTAMP","EMPTY"]}],"command":"TS.REVRANGE","complexity":"O(n/m+k) where n = Number of data points, m = Chunk size (data points per chunk), k = Number of data points that are in the requested range","group":"timeseries","since":"1.4.0","summary":"Query a range in reverse direction","syntax":"TS.REVRANGE key fromTimestamp toTimestamp [LATEST]\n  [FILTER_BY_TS Timestamp [Timestamp ...]] [FILTER_BY_VALUE min max]\n  [COUNT count] [[ALIGN value] AGGREGATION <AVG | FIRST | LAST | MIN\n  | MAX | SUM | RANGE | COUNT | STD.P | STD.S | VAR.P | VAR.S | TWA>\n  bucketDuration [BUCKETTIMESTAMP] [EMPTY]]"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"TTL","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Returns the expiration time in seconds of a key.","syntax":"TTL key"},{"acl":"@keyspace, @read, @fast","arguments":[{"name":"key","type":"single"}],"command":"TYPE","complexity":"O(1)","group":"generic","since":"1.0.0","summary":"Determines the type of value stored at a key.","syntax":"TYPE key"},{"acl":"@keyspace, @write, @fast","arguments":[{"name":"key","type":"many"}],"command":"UNLINK","complexity":"O(1) for each key removed regardless of its size. Then the command does O(N) work in a different thread in order to reclaim memory, where N is the number of allocations the deleted objects where composed of.","group":"generic","since":"4.0.0","summary":"Asynchronously deletes one or more keys.","syntax":"UNLINK key [key ...]"},{"acl":"@pubsub, @slow","arguments":[{"name":"channel","type":"many"}],"command":"UNSUBSCRIBE","complexity":"O(N) where N is the number of channels to unsubscribe.","group":"pubsub","since":"2.0.0","summary":"Stops listening to messages posted to channels.","syntax":"UNSUBSCRIBE [channel [channel ...]]"},{"acl":"@fast, @transaction","arguments":[],"command":"UNWATCH","complexity":"O(1)","group":"transactions","since":"2.2.0","summary":"Forgets about watched keys of a transaction.","syntax":"UNWATCH"},{"acl":"","arguments":[],"command":"VADD","complexity":"O(log(N)) for each element added, where N is the number of elements in the vector set.","group":"vector_set","since":"8.0.0","summary":"Add a new element to a vector set, or update its vector if it already exists.","syntax":"VADD key [REDUCE dim] (FP32 | VALUES num) vector element [CAS] [NOQUANT | Q8 | BIN]\n  [EF build-exploration-factor] [SETATTR attributes] [M numlinks]"},{"acl":"","arguments":[],"command":"VCARD","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Return the number of elements in a vector set.","syntax":"VCARD key"},{"acl":"","arguments":[],"command":"VDIM","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Return the dimension of vectors in the vector set.","syntax":"VDIM key"},{"acl":"","arguments":[],"command":"VEMB","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Return the vector associated with an element.","syntax":"VEMB key element [RAW]"},{"acl":"","arguments":[],"command":"VGETATTR","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Retrieve the JSON attributes of elements.","syntax":"VGETATTR key element"},{"acl":"","arguments":[],"command":"VINFO","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Return information about a vector set.","syntax":"VINFO key"},{"acl":"","arguments":[{"name":"key","type":"single"},{"name":"element","type":"single"}],"command":"VISMEMBER","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Check if an element exists in a vector set.","syntax":"VISMEMBER key element"},{"acl":"","arguments":[],"command":"VLINKS","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Return the neighbors of an element at each layer in the HNSW graph.","syntax":"VLINKS key element [WITHSCORES]"},{"acl":"","arguments":[],"command":"VRANDMEMBER","complexity":"O(N) where N is the absolute value of the count argument.","group":"vector_set","since":"8.0.0","summary":"Return one or multiple random members from a vector set.","syntax":"VRANDMEMBER key [count]"},{"acl":"","arguments":[],"command":"VREM","complexity":"O(log(N)) for each element removed, where N is the number of elements in the vector set.","group":"vector_set","since":"8.0.0","summary":"Remove an element from a vector set.","syntax":"VREM key element"},{"acl":"","arguments":[],"command":"VSETATTR","complexity":"O(1)","group":"vector_set","since":"8.0.0","summary":"Associate or remove the JSON attributes of elements.","syntax":"VSETATTR key element \"{ JSON obj }\""},{"acl":"","arguments":[],"command":"VSIM","complexity":"O(log(N)) where N is the number of elements in the vector set.","group":"vector_set","since":"8.0.0","summary":"Return elements by vector similarity.","syntax":"VSIM key (ELE | FP32 | VALUES num) (vector | element) [WITHSCORES] [WITHATTRIBS] [COUNT num]\n  [EPSILON delta] [EF search-exploration-factor] [FILTER expression] [FILTER-EF max-filtering-effort]\n  [TRUTH] [NOTHREAD]"},{"acl":"@slow, @blocking, @connection","arguments":[{"name":"numreplicas","type":"single"},{"name":"timeout","type":"single"}],"command":"WAIT","complexity":"O(1)","group":"generic","since":"3.0.0","summary":"Blocks until the asynchronous replication of all preceding write commands sent by the connection is completed.","syntax":"WAIT numreplicas timeout"},{"acl":"@slow, @blocking, @connection","arguments":[{"name":"numlocal","type":"single"},{"name":"numreplicas","type":"single"},{"name":"timeout","type":"single"}],"command":"WAITAOF","complexity":"O(1)","group":"generic","since":"7.2.0","summary":"Blocks until all of the preceding write commands sent by the connection are written to the append-only file of the master and/or replicas.","syntax":"WAITAOF numlocal numreplicas timeout"},{"acl":"@fast, @transaction","arguments":[{"name":"key","type":"many"}],"command":"WATCH","complexity":"O(1) for every key.","group":"transactions","since":"2.2.0","summary":"Monitors changes to keys to determine the execution of a transaction.","syntax":"WATCH key [key ...]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"name":"id","type":"many"}],"command":"XACK","complexity":"O(1) for each message ID processed.","group":"stream","since":"5.0.0","summary":"Returns the number of messages that were successfully acknowledged by the consumer group member of a stream.","syntax":"XACK key group id [id ...]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"type":"enum","values":["KEEPREF","DELREF","ACKED"]},{"arg":"ids","detail":"ids","key":"IDS","type":"arg"}],"command":"XACKDEL","complexity":"O(1) for each entry ID processed.","group":"stream","since":"8.2.0","summary":"Acknowledges and conditionally deletes one or multiple entries for a stream consumer group.","syntax":"XACKDEL key group [KEEPREF | DELREF | ACKED] IDS numids id [id ...]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"type":"flag","value":"NOMKSTREAM"},{"type":"enum","values":["KEEPREF","DELREF","ACKED"]},{"type":"enum","values":["","","","LIMIT"]},{"type":"enum","values":["*",""]},{"name":"field value","type":"many"}],"command":"XADD","complexity":"O(1) when adding a new entry, O(N) when trimming where N being the number of entries evicted.","group":"stream","since":"5.0.0","summary":"Appends a new message to a stream. Creates the key if it doesn't exist.","syntax":"XADD key [NOMKSTREAM] [KEEPREF | DELREF | ACKED] [<MAXLEN | MINID>\n  [= | ~] threshold [LIMIT count]] <* | id> field value [field value\n  ...]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"name":"consumer","type":"single"},{"name":"min-idle-time","type":"single"},{"name":"start","type":"single"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"type":"flag","value":"JUSTID"}],"command":"XAUTOCLAIM","complexity":"O(1) if COUNT is small.","group":"stream","since":"6.2.0","summary":"Changes, or acquires, ownership of messages in a consumer group, as if the messages were delivered to as consumer group member.","syntax":"XAUTOCLAIM key group consumer min-idle-time start [COUNT count]\n  [JUSTID]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"name":"consumer","type":"single"},{"name":"min-idle-time","type":"single"},{"name":"id","type":"many"},{"arg":"ms","detail":"ms","key":"IDLE","type":"arg"},{"arg":"unix-time-milliseconds","detail":"unix-time-milliseconds","key":"TIME","type":"arg"},{"arg":"count","detail":"count","key":"RETRYCOUNT","type":"arg"},{"type":"flag","value":"FORCE"},{"type":"flag","value":"JUSTID"},{"arg":"lastid","detail":"lastid","key":"LASTID","type":"arg"}],"command":"XCLAIM","complexity":"O(log N) with N being the number of messages in the PEL of the consumer group.","group":"stream","since":"5.0.0","summary":"Changes, or acquires, ownership of a message in a consumer group, as if the message was delivered a consumer group member.","syntax":"XCLAIM key group consumer min-idle-time id [id ...] [IDLE ms]\n  [TIME unix-time-milliseconds] [RETRYCOUNT count] [FORCE] [JUSTID]\n  [LASTID lastid]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"id","type":"many"}],"command":"XDEL","complexity":"O(1) for each single item to delete in the stream, regardless of the stream size.","group":"stream","since":"5.0.0","summary":"Returns the number of messages after removing them from a stream.","syntax":"XDEL key id [id ...]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["KEEPREF","DELREF","ACKED"]},{"arg":"ids","detail":"ids","key":"IDS","type":"arg"}],"command":"XDELEX","complexity":"O(1) for each single item to delete in the stream, regardless of the stream size.","group":"stream","since":"8.2.0","summary":"Deletes one or multiple entries from the stream.","syntax":"XDELEX key [KEEPREF | DELREF | ACKED] IDS numids id [id ...]"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"type":"enum","values":["","$"]},{"type":"flag","value":"MKSTREAM"},{"arg":"entriesread","detail":"entriesread","key":"ENTRIESREAD","type":"arg"}],"command":"XGROUP CREATE","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Creates a consumer group.","syntax":"XGROUP CREATE key group <id | $> [MKSTREAM]\n  [ENTRIESREAD entries-read]"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"name":"consumer","type":"single"}],"command":"XGROUP CREATECONSUMER","complexity":"O(1)","group":"stream","since":"6.2.0","summary":"Creates a consumer in a consumer group.","syntax":"XGROUP CREATECONSUMER key group consumer"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"name":"consumer","type":"single"}],"command":"XGROUP DELCONSUMER","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Deletes a consumer from a consumer group.","syntax":"XGROUP DELCONSUMER key group consumer"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"}],"command":"XGROUP DESTROY","complexity":"O(N) where N is the number of entries in the group's pending entries list (PEL).","group":"stream","since":"5.0.0","summary":"Destroys a consumer group.","syntax":"XGROUP DESTROY key group"},{"acl":"@stream, @slow","arguments":[],"command":"XGROUP HELP","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"XGROUP HELP"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"type":"enum","values":["","$"]},{"arg":"entriesread","detail":"entriesread","key":"ENTRIESREAD","type":"arg"}],"command":"XGROUP SETID","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Sets the last-delivered ID of a consumer group.","syntax":"XGROUP SETID key group <id | $> [ENTRIESREAD entries-read]"},{"acl":"@slow","arguments":[],"command":"XGROUP","complexity":"Depends on subcommand.","group":"stream","since":"5.0.0","summary":"A container for consumer groups commands.","syntax":"XGROUP"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"}],"command":"XINFO CONSUMERS","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Returns a list of the consumers in a consumer group.","syntax":"XINFO CONSUMERS key group"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"}],"command":"XINFO GROUPS","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Returns a list of the consumer groups of a stream.","syntax":"XINFO GROUPS key"},{"acl":"@stream, @slow","arguments":[],"command":"XINFO HELP","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Returns helpful text about the different subcommands.","syntax":"XINFO HELP"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["FULL","COUNT"]}],"command":"XINFO STREAM","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Returns information about a stream.","syntax":"XINFO STREAM key [FULL [COUNT count]]"},{"acl":"@slow","arguments":[],"command":"XINFO","complexity":"Depends on subcommand.","group":"stream","since":"5.0.0","summary":"A container for stream introspection commands.","syntax":"XINFO"},{"acl":"@read, @stream, @fast","arguments":[{"name":"key","type":"single"}],"command":"XLEN","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"Return the number of messages in a stream.","syntax":"XLEN key"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"group","type":"single"},{"type":"enum","values":["IDLE","","","",""]}],"command":"XPENDING","complexity":"O(N) with N being the number of elements returned, so asking for a small fixed number of entries per call is O(1). O(M), where M is the total number of entries scanned when used with the IDLE filter. When the command returns just the summary and the list of consumers is small, it runs in O(1) time; otherwise, an additional O(N) time for iterating every consumer.","group":"stream","since":"5.0.0","summary":"Returns the information and entries from a stream consumer group's pending entries list.","syntax":"XPENDING key group [[IDLE min-idle-time] start end count [consumer]]"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"end","type":"single"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"XRANGE","complexity":"O(N) with N being the number of elements being returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","group":"stream","since":"5.0.0","summary":"Returns the messages from a stream within a range of IDs.","syntax":"XRANGE key start end [COUNT count]"},{"acl":"@read, @stream, @slow, @blocking","arguments":[{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"arg":"milliseconds","detail":"milliseconds","key":"BLOCK","type":"arg"},{"arg":"streams","detail":"streams","key":"STREAMS","type":"arg"}],"command":"XREAD","complexity":null,"group":"stream","since":"5.0.0","summary":"Returns messages from multiple streams with IDs greater than the ones requested. Blocks until a message is available otherwise.","syntax":"XREAD [COUNT count] [BLOCK milliseconds] STREAMS key [key ...] id\n  [id ...]"},{"acl":"@write, @stream, @slow, @blocking","arguments":[{"arg":"group-block","detail":"group-block","key":"GROUP","type":"arg"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"},{"arg":"milliseconds","detail":"milliseconds","key":"BLOCK","type":"arg"},{"type":"flag","value":"NOACK"},{"arg":"streams","detail":"streams","key":"STREAMS","type":"arg"}],"command":"XREADGROUP","complexity":"For each stream mentioned: O(M) with M being the number of elements returned. If M is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1). On the other side when XREADGROUP blocks, XADD will pay the O(N) time in order to serve the N clients blocked on the stream getting new data.","group":"stream","since":"5.0.0","summary":"Returns new or historical messages from a stream for a consumer in a group. Blocks until a message is available otherwise.","syntax":"XREADGROUP GROUP group consumer [COUNT count] [BLOCK milliseconds]\n  [NOACK] STREAMS key [key ...] id [id ...]"},{"acl":"@read, @stream, @slow","arguments":[{"name":"key","type":"single"},{"name":"end","type":"single"},{"name":"start","type":"single"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"XREVRANGE","complexity":"O(N) with N being the number of elements returned. If N is constant (e.g. always asking for the first 10 elements with COUNT), you can consider it O(1).","group":"stream","since":"5.0.0","summary":"Returns the messages from a stream within a range of IDs in reverse order.","syntax":"XREVRANGE key end start [COUNT count]"},{"acl":"@write, @stream, @fast","arguments":[{"name":"key","type":"single"},{"name":"last-id","type":"single"},{"arg":"entries-added","detail":"entries-added","key":"ENTRIESADDED","type":"arg"},{"arg":"max-deleted-id","detail":"max-deleted-id","key":"MAXDELETEDID","type":"arg"}],"command":"XSETID","complexity":"O(1)","group":"stream","since":"5.0.0","summary":"An internal command for replicating stream values.","syntax":"XSETID key last-id [ENTRIESADDED entries-added]\n  [MAXDELETEDID max-deleted-id]"},{"acl":"@write, @stream, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["","","","LIMIT",""]}],"command":"XTRIM","complexity":"O(N), with N being the number of evicted entries. Constant times are very small however, since entries are organized in macro nodes containing multiple entries that can be released with a single deallocation.","group":"stream","since":"5.0.0","summary":"Deletes messages from the beginning of a stream.","syntax":"XTRIM key <MAXLEN | MINID> [= | ~] threshold [LIMIT count] [KEEPREF\n  | DELREF | ACKED]"},{"acl":"@write, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["NX","XX"]},{"type":"enum","values":["GT","LT"]},{"type":"flag","value":"CH"},{"type":"flag","value":"INCR"},{"name":"score member","type":"many"}],"command":"ZADD","complexity":"O(log(N)) for each item added, where N is the number of elements in the sorted set.","group":"sorted-set","since":"1.2.0","summary":"Adds one or more members to a sorted set, or updates their scores. Creates the key if it doesn't exist.","syntax":"ZADD key [NX | XX] [GT | LT] [CH] [INCR] score member [score member\n  ...]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"}],"command":"ZCARD","complexity":"O(1)","group":"sorted-set","since":"1.2.0","summary":"Returns the number of members in a sorted set.","syntax":"ZCARD key"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"}],"command":"ZCOUNT","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","since":"2.0.0","summary":"Returns the count of members in a sorted set that have scores within a range.","syntax":"ZCOUNT key min max"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"type":"flag","value":"WITHSCORES"}],"command":"ZDIFF","complexity":"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","group":"sorted-set","since":"6.2.0","summary":"Returns the difference between multiple sorted sets.","syntax":"ZDIFF numkeys key [key ...] [WITHSCORES]"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"destination","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"}],"command":"ZDIFFSTORE","complexity":"O(L + (N-K)log(N)) worst case where L is the total number of elements in all the sets, N is the size of the first set, and K is the size of the result set.","group":"sorted-set","since":"6.2.0","summary":"Stores the difference of multiple sorted sets in a key.","syntax":"ZDIFFSTORE destination numkeys key [key ...]"},{"acl":"@write, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"increment","type":"single"},{"name":"member","type":"single"}],"command":"ZINCRBY","complexity":"O(log(N)) where N is the number of elements in the sorted set.","group":"sorted-set","since":"1.2.0","summary":"Increments the score of a member in a sorted set.","syntax":"ZINCRBY key increment member"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"weight","detail":"weight","key":"WEIGHTS","type":"arg"},{"arg":"aggregate","detail":"aggregate","key":"AGGREGATE","type":"arg"},{"type":"flag","value":"WITHSCORES"}],"command":"ZINTER","complexity":"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","group":"sorted-set","since":"6.2.0","summary":"Returns the intersect of multiple sorted sets.","syntax":"ZINTER numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZINTERCARD","complexity":"O(N*K) worst case with N being the smallest input sorted set, K being the number of input sorted sets.","group":"sorted-set","since":"7.0.0","summary":"Returns the number of members of the intersect of multiple sorted sets.","syntax":"ZINTERCARD numkeys key [key ...] [LIMIT limit]"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"destination","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"weight","detail":"weight","key":"WEIGHTS","type":"arg"},{"arg":"aggregate","detail":"aggregate","key":"AGGREGATE","type":"arg"}],"command":"ZINTERSTORE","complexity":"O(N*K)+O(M*log(M)) worst case with N being the smallest input sorted set, K being the number of input sorted sets and M being the number of elements in the resulting sorted set.","group":"sorted-set","since":"2.0.0","summary":"Stores the intersect of multiple sorted sets in a key.","syntax":"ZINTERSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"}],"command":"ZLEXCOUNT","complexity":"O(log(N)) with N being the number of elements in the sorted set.","group":"sorted-set","since":"2.8.9","summary":"Returns the number of members in a sorted set within a lexicographical range.","syntax":"ZLEXCOUNT key min max"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"type":"enum","values":["MIN","MAX"]},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"ZMPOP","complexity":"O(K) + O(M*log(N)) where K is the number of provided keys, N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","since":"7.0.0","summary":"Returns the highest- or lowest-scoring members from one or more sorted sets after removing them. Deletes the sorted set if the last member was popped.","syntax":"ZMPOP numkeys key [key ...] <MIN | MAX> [COUNT count]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"ZMSCORE","complexity":"O(N) where N is the number of members being requested.","group":"sorted-set","since":"6.2.0","summary":"Returns the score of one or more members in a sorted set.","syntax":"ZMSCORE key member [member ...]"},{"acl":"@write, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"ZPOPMAX","complexity":"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","since":"5.0.0","summary":"Returns the highest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","syntax":"ZPOPMAX key [count]"},{"acl":"@write, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"count","type":"single"}],"command":"ZPOPMIN","complexity":"O(log(N)*M) with N being the number of elements in the sorted set, and M being the number of elements popped.","group":"sorted-set","since":"5.0.0","summary":"Returns the lowest-scoring members from a sorted set after removing them. Deletes the sorted set if the last member was popped.","syntax":"ZPOPMIN key [count]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"type":"enum","values":["","WITHSCORES"]}],"command":"ZRANDMEMBER","complexity":"O(N) where N is the number of members returned","group":"sorted-set","since":"6.2.0","summary":"Returns one or more random members from a sorted set.","syntax":"ZRANDMEMBER key [count [WITHSCORES]]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"},{"type":"enum","values":["BYSCORE","BYLEX"]},{"type":"flag","value":"REV"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"},{"type":"flag","value":"WITHSCORES"}],"command":"ZRANGE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","group":"sorted-set","since":"1.2.0","summary":"Returns members in a sorted set within a range of indexes.","syntax":"ZRANGE key start stop [BYSCORE | BYLEX] [REV] [LIMIT offset count]\n  [WITHSCORES]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZRANGEBYLEX","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","since":"2.8.9","summary":"Returns members in a sorted set within a lexicographical range.","syntax":"ZRANGEBYLEX key min max [LIMIT offset count]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"},{"type":"flag","value":"WITHSCORES"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZRANGEBYSCORE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","since":"1.0.5","summary":"Returns members in a sorted set within a range of scores.","syntax":"ZRANGEBYSCORE key min max [WITHSCORES] [LIMIT offset count]"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"dst","type":"single"},{"name":"src","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"},{"type":"enum","values":["BYSCORE","BYLEX"]},{"type":"flag","value":"REV"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZRANGESTORE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements stored into the destination key.","group":"sorted-set","since":"6.2.0","summary":"Stores a range of members from sorted set in a key.","syntax":"ZRANGESTORE dst src min max [BYSCORE | BYLEX] [REV] [LIMIT offset\n  count]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"},{"type":"flag","value":"WITHSCORE"}],"command":"ZRANK","complexity":"O(log(N))","group":"sorted-set","since":"2.0.0","summary":"Returns the index of a member in a sorted set ordered by ascending scores.","syntax":"ZRANK key member [WITHSCORE]"},{"acl":"@write, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"many"}],"command":"ZREM","complexity":"O(M*log(N)) with N being the number of elements in the sorted set and M the number of elements to be removed.","group":"sorted-set","since":"1.2.0","summary":"Removes one or more members from a sorted set. Deletes the sorted set if all members were removed.","syntax":"ZREM key member [member ...]"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"}],"command":"ZREMRANGEBYLEX","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","since":"2.8.9","summary":"Removes members in a sorted set within a lexicographical range. Deletes the sorted set if all members were removed.","syntax":"ZREMRANGEBYLEX key min max"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"}],"command":"ZREMRANGEBYRANK","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","since":"2.0.0","summary":"Removes members in a sorted set within a range of indexes. Deletes the sorted set if all members were removed.","syntax":"ZREMRANGEBYRANK key start stop"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"min","type":"single"},{"name":"max","type":"single"}],"command":"ZREMRANGEBYSCORE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements removed by the operation.","group":"sorted-set","since":"1.2.0","summary":"Removes members in a sorted set within a range of scores. Deletes the sorted set if all members were removed.","syntax":"ZREMRANGEBYSCORE key min max"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"start","type":"single"},{"name":"stop","type":"single"},{"type":"flag","value":"WITHSCORES"}],"command":"ZREVRANGE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements returned.","group":"sorted-set","since":"1.2.0","summary":"Returns members in a sorted set within a range of indexes in reverse order.","syntax":"ZREVRANGE key start stop [WITHSCORES]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"max","type":"single"},{"name":"min","type":"single"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZREVRANGEBYLEX","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","since":"2.8.9","summary":"Returns members in a sorted set within a lexicographical range in reverse order.","syntax":"ZREVRANGEBYLEX key max min [LIMIT offset count]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"max","type":"single"},{"name":"min","type":"single"},{"type":"flag","value":"WITHSCORES"},{"arg":"limit","detail":"limit","key":"LIMIT","type":"arg"}],"command":"ZREVRANGEBYSCORE","complexity":"O(log(N)+M) with N being the number of elements in the sorted set and M the number of elements being returned. If M is constant (e.g. always asking for the first 10 elements with LIMIT), you can consider it O(log(N)).","group":"sorted-set","since":"2.2.0","summary":"Returns members in a sorted set within a range of scores in reverse order.","syntax":"ZREVRANGEBYSCORE key max min [WITHSCORES] [LIMIT offset count]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"},{"type":"flag","value":"WITHSCORE"}],"command":"ZREVRANK","complexity":"O(log(N))","group":"sorted-set","since":"2.0.0","summary":"Returns the index of a member in a sorted set ordered by descending scores.","syntax":"ZREVRANK key member [WITHSCORE]"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"key","type":"single"},{"name":"cursor","type":"single"},{"arg":"pattern","detail":"pattern","key":"MATCH","type":"arg"},{"arg":"count","detail":"count","key":"COUNT","type":"arg"}],"command":"ZSCAN","complexity":"O(1) for every call. O(N) for a complete iteration, including enough command calls for the cursor to return back to 0. N is the number of elements inside the collection.","group":"sorted-set","since":"2.8.0","summary":"Iterates over members and scores of a sorted set.","syntax":"ZSCAN key cursor [MATCH pattern] [COUNT count]"},{"acl":"@read, @sortedset, @fast","arguments":[{"name":"key","type":"single"},{"name":"member","type":"single"}],"command":"ZSCORE","complexity":"O(1)","group":"sorted-set","since":"1.2.0","summary":"Returns the score of a member in a sorted set.","syntax":"ZSCORE key member"},{"acl":"@read, @sortedset, @slow","arguments":[{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"weight","detail":"weight","key":"WEIGHTS","type":"arg"},{"arg":"aggregate","detail":"aggregate","key":"AGGREGATE","type":"arg"},{"type":"flag","value":"WITHSCORES"}],"command":"ZUNION","complexity":"O(N)+O(M*log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","group":"sorted-set","since":"6.2.0","summary":"Returns the union of multiple sorted sets.","syntax":"ZUNION numkeys key [key ...] [WEIGHTS weight [weight ...]]\n  [AGGREGATE <SUM | MIN | MAX>] [WITHSCORES]"},{"acl":"@write, @sortedset, @slow","arguments":[{"name":"destination","type":"single"},{"name":"numkeys","type":"single"},{"name":"key","type":"many"},{"arg":"weight","detail":"weight","key":"WEIGHTS","type":"arg"},{"arg":"aggregate","detail":"aggregate","key":"AGGREGATE","type":"arg"}],"command":"ZUNIONSTORE","complexity":"O(N)+O(M log(M)) with N being the sum of the sizes of the input sorted sets, and M being the number of elements in the resulting sorted set.","group":"sorted-set","since":"2.0.0","summary":"Stores the union of multiple sorted sets in a key.","syntax":"ZUNIONSTORE destination numkeys key [key ...] [WEIGHTS weight\n  [weight ...]] [AGGREGATE <SUM | MIN | MAX>]"}]