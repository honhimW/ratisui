name: Release

permissions:
  contents: write
  packages: write

on:
  workflow_dispatch:
    inputs:
      major_version:
        description: 'Major Ver.'
        required: true
        type: string

jobs:
  create_release:
    runs-on: ubuntu-latest
    outputs:
      upload_url: ${{ steps.set_output.outputs.upload_url }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Create Release
      if: github.event_name == 'workflow_dispatch'
      id: create_release
      uses: ncipollo/release-action@v1.20.0
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag: ${{ github.event.inputs.major_version }}
        name: v${{ github.event.inputs.major_version }}
        draft: false
        prerelease: false
        generateReleaseNotes: true
    - name: Set output
      id: set_output
      run: echo "upload_url=${{ steps.create_release.outputs.upload_url }}" >> "$GITHUB_OUTPUT"

  build:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-22.04, macos-latest, windows-latest]
        rust: [stable]
    outputs:
      linux_amd64_sha256: ${{ steps.linux_amd64.outputs.sha256 }}
      mac_aarch64_sha256: ${{ steps.mac_aarch64.outputs.sha256 }}
      windows_amd64_sha256: ${{ steps.windows.outputs.sha256 }}

    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: rust-toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu
    - name: Build
      run: cargo build --release
    - name: Package (Linux)
      id: linux_amd64
      if: matrix.os == 'ubuntu-22.04'
      run: |
        tar -czvf ./target/release/ratisui-linux-amd64.tar.gz LICENSE README.md -C ./target/release ratisui
        ARCHIVE_SHA256=$(sha256sum ./target/release/ratisui-linux-amd64.tar.gz | awk '{print $1}')
        echo "sha256=$ARCHIVE_SHA256" >> $GITHUB_OUTPUT

    - name: Package (Mac)
      id: mac_aarch64
      if: matrix.os == 'macos-latest'
      run: |
        tar -czvf ./target/release/ratisui-mac-aarch64.tar.gz LICENSE README.md -C ./target/release ratisui
        ARCHIVE_SHA256=$(shasum -a 256 ./target/release/ratisui-mac-aarch64.tar.gz | awk '{print $1}')
        echo "sha256=$ARCHIVE_SHA256" >> $GITHUB_OUTPUT

    - name: Package (Windows)
      id: windows
      if: matrix.os == 'windows-latest'
      run: |
        Compress-Archive -Path '.\README.md', '.\LICENSE', '.\target\release\ratisui.exe' -DestinationPath '.\target\release\ratisui-windows-amd64.zip'
        $ARCHIVE_SHA256 = (Get-FileHash -Algorithm SHA256 -Path ".\target\release\ratisui-windows-amd64.zip").Hash
        "sha256=$ARCHIVE_SHA256" >> $env:GITHUB_OUTPUT

    - name: Upload Release Asset (Linux)
      if: matrix.os == 'ubuntu-22.04'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./target/release/ratisui-linux-amd64.tar.gz
        asset_name: ratisui-linux-amd64.tar.gz
        asset_content_type: application/octet-stream
    - name: Upload Release Asset (Mac)
      if: matrix.os == 'macos-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./target/release/ratisui-mac-aarch64.tar.gz
        asset_name: ratisui-mac-aarch64.tar.gz
        asset_content_type: application/octet-stream

    - name: Upload Release Asset (Windows)
      if: matrix.os == 'windows-latest'
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: .\target\release\ratisui-windows-amd64.zip
        asset_name: ratisui-windows-amd64.zip
        asset_content_type: application/octet-stream

  build-linux-aarch64:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      matrix:
        os: [ubuntu-22.04]
        rust: [stable]
    outputs:
      linux_aarch64_sha256: ${{ steps.linux_aarch64.outputs.sha256 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: rust-toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
        target: aarch64-unknown-linux-gnu
    - name: Cargo
      uses: actions-rs/cargo@v1
      with:
          use-cross: true
          command: build
          args: --target aarch64-unknown-linux-gnu --release
    - name: Package (Linux-aarch64)
      id: linux_aarch64
      run: |
        tar -czvf ./target/aarch64-unknown-linux-gnu/release/ratisui-linux-aarch64.tar.gz LICENSE README.md -C ./target/aarch64-unknown-linux-gnu/release ratisui
        ARCHIVE_SHA256=$(sha256sum ./target/aarch64-unknown-linux-gnu/release/ratisui-linux-aarch64.tar.gz | awk '{print $1}')
        echo "sha256=$ARCHIVE_SHA256" >> $GITHUB_OUTPUT

    - name: Upload Release Asset (Linux-aarch64)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./target/aarch64-unknown-linux-gnu/release/ratisui-linux-aarch64.tar.gz
        asset_name: ratisui-linux-aarch64.tar.gz
        asset_content_type: application/octet-stream

  build-mac-intel:
    runs-on: ${{ matrix.os }}
    needs: create_release
    strategy:
      matrix:
        os: [macos-13]
        rust: [stable]
    outputs:
      mac_intel_sha256: ${{ steps.mac_intel.outputs.sha256 }}
    steps:
    - name: Checkout code
      uses: actions/checkout@v5
    - name: Cargo
      uses: actions-rs/cargo@v1
      with:
          use-cross: true
          command: build
          args: --release
    - name: Package (Mac-intel)
      id: mac_intel
      run: |
        tar -czvf ./target/release/ratisui-mac-intel.tar.gz LICENSE README.md -C ./target/release ratisui
        ARCHIVE_SHA256=$(shasum -a 256 ./target/release/ratisui-mac-intel.tar.gz | awk '{print $1}')
        echo "sha256=$ARCHIVE_SHA256" >> $GITHUB_OUTPUT
    - name: Upload Release Asset (Mac-intel)
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ needs.create_release.outputs.upload_url }}
        asset_path: ./target/release/ratisui-mac-intel.tar.gz
        asset_name: ratisui-mac-intel.tar.gz
        asset_content_type: application/octet-stream

  dispatch-package-manager:
    runs-on: ubuntu-latest
    needs: [build, build-linux-aarch64, build-mac-intel]
    steps:
    - name: Echo
      run: |
        echo "version: ${{ github.event.inputs.major_version }}"
        echo "linux_amd64_sha256: ${{ needs.build.outputs.linux_amd64_sha256 }}"
        echo "linux_aarch64_sha256: ${{ needs.build-linux-aarch64.outputs.linux_aarch64_sha256 }}"
        echo "mac_aarch64_sha256: ${{ needs.build.outputs.mac_aarch64_sha256 }}"
        echo "mac_intel_sha256: ${{ needs.build-mac-intel.outputs.mac_intel_sha256 }}"
        echo "windows_amd64_sha256: ${{ needs.build.outputs.windows_amd64_sha256 }}"

    - name: Update Homebrew Formula
      run: |
        curl -X POST https://api.github.com/repos/honhimW/homebrew-tap/dispatches \
            -H "Accept: application/vnd.github.everest-preview+json" \
            -H "Authorization: token ${{ secrets.PERSONAL_ACCESS_TOKEN }}" \
            -d '{"event_type": "ratisui-release", "client_payload": {
              "version": "${{ github.event.inputs.major_version }}",
              "linux_amd64_sha256": "${{ needs.build.outputs.linux_amd64_sha256 }}",
              "linux_aarch64_sha256": "${{ needs.build-linux-aarch64.outputs.linux_aarch64_sha256 }}",
              "mac_aarch64_sha256": "${{ needs.build.outputs.mac_aarch64_sha256 }}",
              "mac_intel_sha256": "${{ needs.build-mac-intel.outputs.mac_intel_sha256 }}",
              "windows_amd64_sha256": "${{ needs.build.outputs.windows_amd64_sha256 }}"
            }}'

    - name: rust-toolchain
      uses: dtolnay/rust-toolchain@v1
      with:
        toolchain: stable
    - name: Use Cargo Bins
      uses: cargo-bins/cargo-binstall@main
    - name: Install Komac
      run: cargo binstall komac -y
    - name: WinGet New Version
      env:
        GITHUB_TOKEN: "${{ secrets.WINGET_TOKEN }}"
      run: |
        komac update HonhimW.Ratisui \
            --version "${{ github.event.inputs.major_version }}" \
            --urls "https://github.com/honhimW/ratisui/releases/download/${{ github.event.inputs.major_version }}/ratisui-windows-amd64.zip" \
            --submit
